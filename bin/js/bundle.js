var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
module.exports = asPromise;

/**
 * Callback as used by {@link util.asPromise}.
 * @typedef asPromiseCallback
 * @type {function}
 * @param {Error|null} error Error, if any
 * @param {...*} params Additional arguments
 * @returns {undefined}
 */

/**
 * Returns a promise from a node-style callback function.
 * @memberof util
 * @param {asPromiseCallback} fn Function to call
 * @param {*} ctx Function context
 * @param {...*} params Function arguments
 * @returns {Promise<*>} Promisified function
 */
function asPromise(fn, ctx/*, varargs */) {
    var params  = new Array(arguments.length - 1),
        offset  = 0,
        index   = 2,
        pending = true;
    while (index < arguments.length)
        params[offset++] = arguments[index++];
    return new Promise(function executor(resolve, reject) {
        params[offset] = function callback(err/*, varargs */) {
            if (pending) {
                pending = false;
                if (err)
                    reject(err);
                else {
                    var params = new Array(arguments.length - 1),
                        offset = 0;
                    while (offset < params.length)
                        params[offset++] = arguments[offset];
                    resolve.apply(null, params);
                }
            }
        };
        try {
            fn.apply(ctx || null, params);
        } catch (err) {
            if (pending) {
                pending = false;
                reject(err);
            }
        }
    });
}

},{}],2:[function(require,module,exports){
"use strict";

/**
 * A minimal base64 implementation for number arrays.
 * @memberof util
 * @namespace
 */
var base64 = exports;

/**
 * Calculates the byte length of a base64 encoded string.
 * @param {string} string Base64 encoded string
 * @returns {number} Byte length
 */
base64.length = function length(string) {
    var p = string.length;
    if (!p)
        return 0;
    var n = 0;
    while (--p % 4 > 1 && string.charAt(p) === "=")
        ++n;
    return Math.ceil(string.length * 3) / 4 - n;
};

// Base64 encoding table
var b64 = new Array(64);

// Base64 decoding table
var s64 = new Array(123);

// 65..90, 97..122, 48..57, 43, 47
for (var i = 0; i < 64;)
    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;

/**
 * Encodes a buffer to a base64 encoded string.
 * @param {Uint8Array} buffer Source buffer
 * @param {number} start Source start
 * @param {number} end Source end
 * @returns {string} Base64 encoded string
 */
base64.encode = function encode(buffer, start, end) {
    var parts = null,
        chunk = [];
    var i = 0, // output index
        j = 0, // goto index
        t;     // temporary
    while (start < end) {
        var b = buffer[start++];
        switch (j) {
            case 0:
                chunk[i++] = b64[b >> 2];
                t = (b & 3) << 4;
                j = 1;
                break;
            case 1:
                chunk[i++] = b64[t | b >> 4];
                t = (b & 15) << 2;
                j = 2;
                break;
            case 2:
                chunk[i++] = b64[t | b >> 6];
                chunk[i++] = b64[b & 63];
                j = 0;
                break;
        }
        if (i > 8191) {
            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));
            i = 0;
        }
    }
    if (j) {
        chunk[i++] = b64[t];
        chunk[i++] = 61;
        if (j === 1)
            chunk[i++] = 61;
    }
    if (parts) {
        if (i)
            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));
        return parts.join("");
    }
    return String.fromCharCode.apply(String, chunk.slice(0, i));
};

var invalidEncoding = "invalid encoding";

/**
 * Decodes a base64 encoded string to a buffer.
 * @param {string} string Source string
 * @param {Uint8Array} buffer Destination buffer
 * @param {number} offset Destination offset
 * @returns {number} Number of bytes written
 * @throws {Error} If encoding is invalid
 */
base64.decode = function decode(string, buffer, offset) {
    var start = offset;
    var j = 0, // goto index
        t;     // temporary
    for (var i = 0; i < string.length;) {
        var c = string.charCodeAt(i++);
        if (c === 61 && j > 1)
            break;
        if ((c = s64[c]) === undefined)
            throw Error(invalidEncoding);
        switch (j) {
            case 0:
                t = c;
                j = 1;
                break;
            case 1:
                buffer[offset++] = t << 2 | (c & 48) >> 4;
                t = c;
                j = 2;
                break;
            case 2:
                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;
                t = c;
                j = 3;
                break;
            case 3:
                buffer[offset++] = (t & 3) << 6 | c;
                j = 0;
                break;
        }
    }
    if (j === 1)
        throw Error(invalidEncoding);
    return offset - start;
};

/**
 * Tests if the specified string appears to be base64 encoded.
 * @param {string} string String to test
 * @returns {boolean} `true` if probably base64 encoded, otherwise false
 */
base64.test = function test(string) {
    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);
};

},{}],3:[function(require,module,exports){
"use strict";
module.exports = codegen;

/**
 * Begins generating a function.
 * @memberof util
 * @param {string[]} functionParams Function parameter names
 * @param {string} [functionName] Function name if not anonymous
 * @returns {Codegen} Appender that appends code to the function's body
 */
function codegen(functionParams, functionName) {

    /* istanbul ignore if */
    if (typeof functionParams === "string") {
        functionName = functionParams;
        functionParams = undefined;
    }

    var body = [];

    /**
     * Appends code to the function's body or finishes generation.
     * @typedef Codegen
     * @type {function}
     * @param {string|Object.<string,*>} [formatStringOrScope] Format string or, to finish the function, an object of additional scope variables, if any
     * @param {...*} [formatParams] Format parameters
     * @returns {Codegen|Function} Itself or the generated function if finished
     * @throws {Error} If format parameter counts do not match
     */

    function Codegen(formatStringOrScope) {
        // note that explicit array handling below makes this ~50% faster

        // finish the function
        if (typeof formatStringOrScope !== "string") {
            var source = toString();
            if (codegen.verbose)
                console.log("codegen: " + source); // eslint-disable-line no-console
            source = "return " + source;
            if (formatStringOrScope) {
                var scopeKeys   = Object.keys(formatStringOrScope),
                    scopeParams = new Array(scopeKeys.length + 1),
                    scopeValues = new Array(scopeKeys.length),
                    scopeOffset = 0;
                while (scopeOffset < scopeKeys.length) {
                    scopeParams[scopeOffset] = scopeKeys[scopeOffset];
                    scopeValues[scopeOffset] = formatStringOrScope[scopeKeys[scopeOffset++]];
                }
                scopeParams[scopeOffset] = source;
                return Function.apply(null, scopeParams).apply(null, scopeValues); // eslint-disable-line no-new-func
            }
            return Function(source)(); // eslint-disable-line no-new-func
        }

        // otherwise append to body
        var formatParams = new Array(arguments.length - 1),
            formatOffset = 0;
        while (formatOffset < formatParams.length)
            formatParams[formatOffset] = arguments[++formatOffset];
        formatOffset = 0;
        formatStringOrScope = formatStringOrScope.replace(/%([%dfijs])/g, function replace($0, $1) {
            var value = formatParams[formatOffset++];
            switch ($1) {
                case "d": case "f": return String(Number(value));
                case "i": return String(Math.floor(value));
                case "j": return JSON.stringify(value);
                case "s": return String(value);
            }
            return "%";
        });
        if (formatOffset !== formatParams.length)
            throw Error("parameter count mismatch");
        body.push(formatStringOrScope);
        return Codegen;
    }

    function toString(functionNameOverride) {
        return "function " + (functionNameOverride || functionName || "") + "(" + (functionParams && functionParams.join(",") || "") + "){\n  " + body.join("\n  ") + "\n}";
    }

    Codegen.toString = toString;
    return Codegen;
}

/**
 * Begins generating a function.
 * @memberof util
 * @function codegen
 * @param {string} [functionName] Function name if not anonymous
 * @returns {Codegen} Appender that appends code to the function's body
 * @variation 2
 */

/**
 * When set to `true`, codegen will log generated code to console. Useful for debugging.
 * @name util.codegen.verbose
 * @type {boolean}
 */
codegen.verbose = false;

},{}],4:[function(require,module,exports){
"use strict";
module.exports = EventEmitter;

/**
 * Constructs a new event emitter instance.
 * @classdesc A minimal event emitter.
 * @memberof util
 * @constructor
 */
function EventEmitter() {

    /**
     * Registered listeners.
     * @type {Object.<string,*>}
     * @private
     */
    this._listeners = {};
}

/**
 * Registers an event listener.
 * @param {string} evt Event name
 * @param {function} fn Listener
 * @param {*} [ctx] Listener context
 * @returns {util.EventEmitter} `this`
 */
EventEmitter.prototype.on = function on(evt, fn, ctx) {
    (this._listeners[evt] || (this._listeners[evt] = [])).push({
        fn  : fn,
        ctx : ctx || this
    });
    return this;
};

/**
 * Removes an event listener or any matching listeners if arguments are omitted.
 * @param {string} [evt] Event name. Removes all listeners if omitted.
 * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.
 * @returns {util.EventEmitter} `this`
 */
EventEmitter.prototype.off = function off(evt, fn) {
    if (evt === undefined)
        this._listeners = {};
    else {
        if (fn === undefined)
            this._listeners[evt] = [];
        else {
            var listeners = this._listeners[evt];
            for (var i = 0; i < listeners.length;)
                if (listeners[i].fn === fn)
                    listeners.splice(i, 1);
                else
                    ++i;
        }
    }
    return this;
};

/**
 * Emits an event by calling its listeners with the specified arguments.
 * @param {string} evt Event name
 * @param {...*} args Arguments
 * @returns {util.EventEmitter} `this`
 */
EventEmitter.prototype.emit = function emit(evt) {
    var listeners = this._listeners[evt];
    if (listeners) {
        var args = [],
            i = 1;
        for (; i < arguments.length;)
            args.push(arguments[i++]);
        for (i = 0; i < listeners.length;)
            listeners[i].fn.apply(listeners[i++].ctx, args);
    }
    return this;
};

},{}],5:[function(require,module,exports){
"use strict";
module.exports = fetch;

var asPromise = require("@protobufjs/aspromise"),
    inquire   = require("@protobufjs/inquire");

var fs = inquire("fs");

/**
 * Node-style callback as used by {@link util.fetch}.
 * @typedef FetchCallback
 * @type {function}
 * @param {?Error} error Error, if any, otherwise `null`
 * @param {string} [contents] File contents, if there hasn't been an error
 * @returns {undefined}
 */

/**
 * Options as used by {@link util.fetch}.
 * @typedef FetchOptions
 * @type {Object}
 * @property {boolean} [binary=false] Whether expecting a binary response
 * @property {boolean} [xhr=false] If `true`, forces the use of XMLHttpRequest
 */

/**
 * Fetches the contents of a file.
 * @memberof util
 * @param {string} filename File path or url
 * @param {FetchOptions} options Fetch options
 * @param {FetchCallback} callback Callback function
 * @returns {undefined}
 */
function fetch(filename, options, callback) {
    if (typeof options === "function") {
        callback = options;
        options = {};
    } else if (!options)
        options = {};

    if (!callback)
        return asPromise(fetch, this, filename, options); // eslint-disable-line no-invalid-this

    // if a node-like filesystem is present, try it first but fall back to XHR if nothing is found.
    if (!options.xhr && fs && fs.readFile)
        return fs.readFile(filename, function fetchReadFileCallback(err, contents) {
            return err && typeof XMLHttpRequest !== "undefined"
                ? fetch.xhr(filename, options, callback)
                : err
                ? callback(err)
                : callback(null, options.binary ? contents : contents.toString("utf8"));
        });

    // use the XHR version otherwise.
    return fetch.xhr(filename, options, callback);
}

/**
 * Fetches the contents of a file.
 * @name util.fetch
 * @function
 * @param {string} path File path or url
 * @param {FetchCallback} callback Callback function
 * @returns {undefined}
 * @variation 2
 */

/**
 * Fetches the contents of a file.
 * @name util.fetch
 * @function
 * @param {string} path File path or url
 * @param {FetchOptions} [options] Fetch options
 * @returns {Promise<string|Uint8Array>} Promise
 * @variation 3
 */

/**/
fetch.xhr = function fetch_xhr(filename, options, callback) {
    var xhr = new XMLHttpRequest();
    xhr.onreadystatechange /* works everywhere */ = function fetchOnReadyStateChange() {

        if (xhr.readyState !== 4)
            return undefined;

        // local cors security errors return status 0 / empty string, too. afaik this cannot be
        // reliably distinguished from an actually empty file for security reasons. feel free
        // to send a pull request if you are aware of a solution.
        if (xhr.status !== 0 && xhr.status !== 200)
            return callback(Error("status " + xhr.status));

        // if binary data is expected, make sure that some sort of array is returned, even if
        // ArrayBuffers are not supported. the binary string fallback, however, is unsafe.
        if (options.binary) {
            var buffer = xhr.response;
            if (!buffer) {
                buffer = [];
                for (var i = 0; i < xhr.responseText.length; ++i)
                    buffer.push(xhr.responseText.charCodeAt(i) & 255);
            }
            return callback(null, typeof Uint8Array !== "undefined" ? new Uint8Array(buffer) : buffer);
        }
        return callback(null, xhr.responseText);
    };

    if (options.binary) {
        // ref: https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Sending_and_Receiving_Binary_Data#Receiving_binary_data_in_older_browsers
        if ("overrideMimeType" in xhr)
            xhr.overrideMimeType("text/plain; charset=x-user-defined");
        xhr.responseType = "arraybuffer";
    }

    xhr.open("GET", filename);
    xhr.send();
};

},{"@protobufjs/aspromise":1,"@protobufjs/inquire":7}],6:[function(require,module,exports){
"use strict";

module.exports = factory(factory);

/**
 * Reads / writes floats / doubles from / to buffers.
 * @name util.float
 * @namespace
 */

/**
 * Writes a 32 bit float to a buffer using little endian byte order.
 * @name util.float.writeFloatLE
 * @function
 * @param {number} val Value to write
 * @param {Uint8Array} buf Target buffer
 * @param {number} pos Target buffer offset
 * @returns {undefined}
 */

/**
 * Writes a 32 bit float to a buffer using big endian byte order.
 * @name util.float.writeFloatBE
 * @function
 * @param {number} val Value to write
 * @param {Uint8Array} buf Target buffer
 * @param {number} pos Target buffer offset
 * @returns {undefined}
 */

/**
 * Reads a 32 bit float from a buffer using little endian byte order.
 * @name util.float.readFloatLE
 * @function
 * @param {Uint8Array} buf Source buffer
 * @param {number} pos Source buffer offset
 * @returns {number} Value read
 */

/**
 * Reads a 32 bit float from a buffer using big endian byte order.
 * @name util.float.readFloatBE
 * @function
 * @param {Uint8Array} buf Source buffer
 * @param {number} pos Source buffer offset
 * @returns {number} Value read
 */

/**
 * Writes a 64 bit double to a buffer using little endian byte order.
 * @name util.float.writeDoubleLE
 * @function
 * @param {number} val Value to write
 * @param {Uint8Array} buf Target buffer
 * @param {number} pos Target buffer offset
 * @returns {undefined}
 */

/**
 * Writes a 64 bit double to a buffer using big endian byte order.
 * @name util.float.writeDoubleBE
 * @function
 * @param {number} val Value to write
 * @param {Uint8Array} buf Target buffer
 * @param {number} pos Target buffer offset
 * @returns {undefined}
 */

/**
 * Reads a 64 bit double from a buffer using little endian byte order.
 * @name util.float.readDoubleLE
 * @function
 * @param {Uint8Array} buf Source buffer
 * @param {number} pos Source buffer offset
 * @returns {number} Value read
 */

/**
 * Reads a 64 bit double from a buffer using big endian byte order.
 * @name util.float.readDoubleBE
 * @function
 * @param {Uint8Array} buf Source buffer
 * @param {number} pos Source buffer offset
 * @returns {number} Value read
 */

// Factory function for the purpose of node-based testing in modified global environments
function factory(exports) {

    // float: typed array
    if (typeof Float32Array !== "undefined") (function() {

        var f32 = new Float32Array([ -0 ]),
            f8b = new Uint8Array(f32.buffer),
            le  = f8b[3] === 128;

        function writeFloat_f32_cpy(val, buf, pos) {
            f32[0] = val;
            buf[pos    ] = f8b[0];
            buf[pos + 1] = f8b[1];
            buf[pos + 2] = f8b[2];
            buf[pos + 3] = f8b[3];
        }

        function writeFloat_f32_rev(val, buf, pos) {
            f32[0] = val;
            buf[pos    ] = f8b[3];
            buf[pos + 1] = f8b[2];
            buf[pos + 2] = f8b[1];
            buf[pos + 3] = f8b[0];
        }

        /* istanbul ignore next */
        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;
        /* istanbul ignore next */
        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;

        function readFloat_f32_cpy(buf, pos) {
            f8b[0] = buf[pos    ];
            f8b[1] = buf[pos + 1];
            f8b[2] = buf[pos + 2];
            f8b[3] = buf[pos + 3];
            return f32[0];
        }

        function readFloat_f32_rev(buf, pos) {
            f8b[3] = buf[pos    ];
            f8b[2] = buf[pos + 1];
            f8b[1] = buf[pos + 2];
            f8b[0] = buf[pos + 3];
            return f32[0];
        }

        /* istanbul ignore next */
        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;
        /* istanbul ignore next */
        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;

    // float: ieee754
    })(); else (function() {

        function writeFloat_ieee754(writeUint, val, buf, pos) {
            var sign = val < 0 ? 1 : 0;
            if (sign)
                val = -val;
            if (val === 0)
                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);
            else if (isNaN(val))
                writeUint(2143289344, buf, pos);
            else if (val > 3.4028234663852886e+38) // +-Infinity
                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);
            else if (val < 1.1754943508222875e-38) // denormal
                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);
            else {
                var exponent = Math.floor(Math.log(val) / Math.LN2),
                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;
                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);
            }
        }

        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);
        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);

        function readFloat_ieee754(readUint, buf, pos) {
            var uint = readUint(buf, pos),
                sign = (uint >> 31) * 2 + 1,
                exponent = uint >>> 23 & 255,
                mantissa = uint & 8388607;
            return exponent === 255
                ? mantissa
                ? NaN
                : sign * Infinity
                : exponent === 0 // denormal
                ? sign * 1.401298464324817e-45 * mantissa
                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);
        }

        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);
        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);

    })();

    // double: typed array
    if (typeof Float64Array !== "undefined") (function() {

        var f64 = new Float64Array([-0]),
            f8b = new Uint8Array(f64.buffer),
            le  = f8b[7] === 128;

        function writeDouble_f64_cpy(val, buf, pos) {
            f64[0] = val;
            buf[pos    ] = f8b[0];
            buf[pos + 1] = f8b[1];
            buf[pos + 2] = f8b[2];
            buf[pos + 3] = f8b[3];
            buf[pos + 4] = f8b[4];
            buf[pos + 5] = f8b[5];
            buf[pos + 6] = f8b[6];
            buf[pos + 7] = f8b[7];
        }

        function writeDouble_f64_rev(val, buf, pos) {
            f64[0] = val;
            buf[pos    ] = f8b[7];
            buf[pos + 1] = f8b[6];
            buf[pos + 2] = f8b[5];
            buf[pos + 3] = f8b[4];
            buf[pos + 4] = f8b[3];
            buf[pos + 5] = f8b[2];
            buf[pos + 6] = f8b[1];
            buf[pos + 7] = f8b[0];
        }

        /* istanbul ignore next */
        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;
        /* istanbul ignore next */
        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;

        function readDouble_f64_cpy(buf, pos) {
            f8b[0] = buf[pos    ];
            f8b[1] = buf[pos + 1];
            f8b[2] = buf[pos + 2];
            f8b[3] = buf[pos + 3];
            f8b[4] = buf[pos + 4];
            f8b[5] = buf[pos + 5];
            f8b[6] = buf[pos + 6];
            f8b[7] = buf[pos + 7];
            return f64[0];
        }

        function readDouble_f64_rev(buf, pos) {
            f8b[7] = buf[pos    ];
            f8b[6] = buf[pos + 1];
            f8b[5] = buf[pos + 2];
            f8b[4] = buf[pos + 3];
            f8b[3] = buf[pos + 4];
            f8b[2] = buf[pos + 5];
            f8b[1] = buf[pos + 6];
            f8b[0] = buf[pos + 7];
            return f64[0];
        }

        /* istanbul ignore next */
        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;
        /* istanbul ignore next */
        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;

    // double: ieee754
    })(); else (function() {

        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {
            var sign = val < 0 ? 1 : 0;
            if (sign)
                val = -val;
            if (val === 0) {
                writeUint(0, buf, pos + off0);
                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);
            } else if (isNaN(val)) {
                writeUint(0, buf, pos + off0);
                writeUint(2146959360, buf, pos + off1);
            } else if (val > 1.7976931348623157e+308) { // +-Infinity
                writeUint(0, buf, pos + off0);
                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);
            } else {
                var mantissa;
                if (val < 2.2250738585072014e-308) { // denormal
                    mantissa = val / 5e-324;
                    writeUint(mantissa >>> 0, buf, pos + off0);
                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);
                } else {
                    var exponent = Math.floor(Math.log(val) / Math.LN2);
                    if (exponent === 1024)
                        exponent = 1023;
                    mantissa = val * Math.pow(2, -exponent);
                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);
                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);
                }
            }
        }

        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);
        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);

        function readDouble_ieee754(readUint, off0, off1, buf, pos) {
            var lo = readUint(buf, pos + off0),
                hi = readUint(buf, pos + off1);
            var sign = (hi >> 31) * 2 + 1,
                exponent = hi >>> 20 & 2047,
                mantissa = 4294967296 * (hi & 1048575) + lo;
            return exponent === 2047
                ? mantissa
                ? NaN
                : sign * Infinity
                : exponent === 0 // denormal
                ? sign * 5e-324 * mantissa
                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);
        }

        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);
        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);

    })();

    return exports;
}

// uint helpers

function writeUintLE(val, buf, pos) {
    buf[pos    ] =  val        & 255;
    buf[pos + 1] =  val >>> 8  & 255;
    buf[pos + 2] =  val >>> 16 & 255;
    buf[pos + 3] =  val >>> 24;
}

function writeUintBE(val, buf, pos) {
    buf[pos    ] =  val >>> 24;
    buf[pos + 1] =  val >>> 16 & 255;
    buf[pos + 2] =  val >>> 8  & 255;
    buf[pos + 3] =  val        & 255;
}

function readUintLE(buf, pos) {
    return (buf[pos    ]
          | buf[pos + 1] << 8
          | buf[pos + 2] << 16
          | buf[pos + 3] << 24) >>> 0;
}

function readUintBE(buf, pos) {
    return (buf[pos    ] << 24
          | buf[pos + 1] << 16
          | buf[pos + 2] << 8
          | buf[pos + 3]) >>> 0;
}

},{}],7:[function(require,module,exports){
"use strict";
module.exports = inquire;

/**
 * Requires a module only if available.
 * @memberof util
 * @param {string} moduleName Module to require
 * @returns {?Object} Required module if available and not empty, otherwise `null`
 */
function inquire(moduleName) {
    try {
        var mod = eval("quire".replace(/^/,"re"))(moduleName); // eslint-disable-line no-eval
        if (mod && (mod.length || Object.keys(mod).length))
            return mod;
    } catch (e) {} // eslint-disable-line no-empty
    return null;
}

},{}],8:[function(require,module,exports){
"use strict";

/**
 * A minimal path module to resolve Unix, Windows and URL paths alike.
 * @memberof util
 * @namespace
 */
var path = exports;

var isAbsolute =
/**
 * Tests if the specified path is absolute.
 * @param {string} path Path to test
 * @returns {boolean} `true` if path is absolute
 */
path.isAbsolute = function isAbsolute(path) {
    return /^(?:\/|\w+:)/.test(path);
};

var normalize =
/**
 * Normalizes the specified path.
 * @param {string} path Path to normalize
 * @returns {string} Normalized path
 */
path.normalize = function normalize(path) {
    path = path.replace(/\\/g, "/")
               .replace(/\/{2,}/g, "/");
    var parts    = path.split("/"),
        absolute = isAbsolute(path),
        prefix   = "";
    if (absolute)
        prefix = parts.shift() + "/";
    for (var i = 0; i < parts.length;) {
        if (parts[i] === "..") {
            if (i > 0 && parts[i - 1] !== "..")
                parts.splice(--i, 2);
            else if (absolute)
                parts.splice(i, 1);
            else
                ++i;
        } else if (parts[i] === ".")
            parts.splice(i, 1);
        else
            ++i;
    }
    return prefix + parts.join("/");
};

/**
 * Resolves the specified include path against the specified origin path.
 * @param {string} originPath Path to the origin file
 * @param {string} includePath Include path relative to origin path
 * @param {boolean} [alreadyNormalized=false] `true` if both paths are already known to be normalized
 * @returns {string} Path to the include file
 */
path.resolve = function resolve(originPath, includePath, alreadyNormalized) {
    if (!alreadyNormalized)
        includePath = normalize(includePath);
    if (isAbsolute(includePath))
        return includePath;
    if (!alreadyNormalized)
        originPath = normalize(originPath);
    return (originPath = originPath.replace(/(?:\/|^)[^/]+$/, "")).length ? normalize(originPath + "/" + includePath) : includePath;
};

},{}],9:[function(require,module,exports){
"use strict";
module.exports = pool;

/**
 * An allocator as used by {@link util.pool}.
 * @typedef PoolAllocator
 * @type {function}
 * @param {number} size Buffer size
 * @returns {Uint8Array} Buffer
 */

/**
 * A slicer as used by {@link util.pool}.
 * @typedef PoolSlicer
 * @type {function}
 * @param {number} start Start offset
 * @param {number} end End offset
 * @returns {Uint8Array} Buffer slice
 * @this {Uint8Array}
 */

/**
 * A general purpose buffer pool.
 * @memberof util
 * @function
 * @param {PoolAllocator} alloc Allocator
 * @param {PoolSlicer} slice Slicer
 * @param {number} [size=8192] Slab size
 * @returns {PoolAllocator} Pooled allocator
 */
function pool(alloc, slice, size) {
    var SIZE   = size || 8192;
    var MAX    = SIZE >>> 1;
    var slab   = null;
    var offset = SIZE;
    return function pool_alloc(size) {
        if (size < 1 || size > MAX)
            return alloc(size);
        if (offset + size > SIZE) {
            slab = alloc(SIZE);
            offset = 0;
        }
        var buf = slice.call(slab, offset, offset += size);
        if (offset & 7) // align to 32 bit
            offset = (offset | 7) + 1;
        return buf;
    };
}

},{}],10:[function(require,module,exports){
"use strict";

/**
 * A minimal UTF8 implementation for number arrays.
 * @memberof util
 * @namespace
 */
var utf8 = exports;

/**
 * Calculates the UTF8 byte length of a string.
 * @param {string} string String
 * @returns {number} Byte length
 */
utf8.length = function utf8_length(string) {
    var len = 0,
        c = 0;
    for (var i = 0; i < string.length; ++i) {
        c = string.charCodeAt(i);
        if (c < 128)
            len += 1;
        else if (c < 2048)
            len += 2;
        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {
            ++i;
            len += 4;
        } else
            len += 3;
    }
    return len;
};

/**
 * Reads UTF8 bytes as a string.
 * @param {Uint8Array} buffer Source buffer
 * @param {number} start Source start
 * @param {number} end Source end
 * @returns {string} String read
 */
utf8.read = function utf8_read(buffer, start, end) {
    var len = end - start;
    if (len < 1)
        return "";
    var parts = null,
        chunk = [],
        i = 0, // char offset
        t;     // temporary
    while (start < end) {
        t = buffer[start++];
        if (t < 128)
            chunk[i++] = t;
        else if (t > 191 && t < 224)
            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;
        else if (t > 239 && t < 365) {
            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;
            chunk[i++] = 0xD800 + (t >> 10);
            chunk[i++] = 0xDC00 + (t & 1023);
        } else
            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;
        if (i > 8191) {
            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));
            i = 0;
        }
    }
    if (parts) {
        if (i)
            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));
        return parts.join("");
    }
    return String.fromCharCode.apply(String, chunk.slice(0, i));
};

/**
 * Writes a string as UTF8 bytes.
 * @param {string} string Source string
 * @param {Uint8Array} buffer Destination buffer
 * @param {number} offset Destination offset
 * @returns {number} Bytes written
 */
utf8.write = function utf8_write(string, buffer, offset) {
    var start = offset,
        c1, // character 1
        c2; // character 2
    for (var i = 0; i < string.length; ++i) {
        c1 = string.charCodeAt(i);
        if (c1 < 128) {
            buffer[offset++] = c1;
        } else if (c1 < 2048) {
            buffer[offset++] = c1 >> 6       | 192;
            buffer[offset++] = c1       & 63 | 128;
        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {
            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);
            ++i;
            buffer[offset++] = c1 >> 18      | 240;
            buffer[offset++] = c1 >> 12 & 63 | 128;
            buffer[offset++] = c1 >> 6  & 63 | 128;
            buffer[offset++] = c1       & 63 | 128;
        } else {
            buffer[offset++] = c1 >> 12      | 224;
            buffer[offset++] = c1 >> 6  & 63 | 128;
            buffer[offset++] = c1       & 63 | 128;
        }
    }
    return offset - start;
};

},{}],11:[function(require,module,exports){
// full library entry point.

"use strict";
module.exports = require("./src/index");

},{"./src/index":20}],12:[function(require,module,exports){
"use strict";
module.exports = common;

var commonRe = /\/|\./;

/**
 * Provides common type definitions.
 * Can also be used to provide additional google types or your own custom types.
 * @param {string} name Short name as in `google/protobuf/[name].proto` or full file name
 * @param {Object.<string,*>} json JSON definition within `google.protobuf` if a short name, otherwise the file's root definition
 * @returns {undefined}
 * @property {INamespace} google/protobuf/any.proto Any
 * @property {INamespace} google/protobuf/duration.proto Duration
 * @property {INamespace} google/protobuf/empty.proto Empty
 * @property {INamespace} google/protobuf/field_mask.proto FieldMask
 * @property {INamespace} google/protobuf/struct.proto Struct, Value, NullValue and ListValue
 * @property {INamespace} google/protobuf/timestamp.proto Timestamp
 * @property {INamespace} google/protobuf/wrappers.proto Wrappers
 * @example
 * // manually provides descriptor.proto (assumes google/protobuf/ namespace and .proto extension)
 * protobuf.common("descriptor", descriptorJson);
 *
 * // manually provides a custom definition (uses my.foo namespace)
 * protobuf.common("my/foo/bar.proto", myFooBarJson);
 */
function common(name, json) {
    if (!commonRe.test(name)) {
        name = "google/protobuf/" + name + ".proto";
        json = { nested: { google: { nested: { protobuf: { nested: json } } } } };
    }
    common[name] = json;
}

// Not provided because of limited use (feel free to discuss or to provide yourself):
//
// google/protobuf/descriptor.proto
// google/protobuf/source_context.proto
// google/protobuf/type.proto
//
// Stripped and pre-parsed versions of these non-bundled files are instead available as part of
// the repository or package within the google/protobuf directory.

common("any", {

    /**
     * Properties of a google.protobuf.Any message.
     * @interface IAny
     * @type {Object}
     * @property {string} [typeUrl]
     * @property {Uint8Array} [bytes]
     * @memberof common
     */
    Any: {
        fields: {
            type_url: {
                type: "string",
                id: 1
            },
            value: {
                type: "bytes",
                id: 2
            }
        }
    }
});

var timeType;

common("duration", {

    /**
     * Properties of a google.protobuf.Duration message.
     * @interface IDuration
     * @type {Object}
     * @property {number|Long} [seconds]
     * @property {number} [nanos]
     * @memberof common
     */
    Duration: timeType = {
        fields: {
            seconds: {
                type: "int64",
                id: 1
            },
            nanos: {
                type: "int32",
                id: 2
            }
        }
    }
});

common("timestamp", {

    /**
     * Properties of a google.protobuf.Timestamp message.
     * @interface ITimestamp
     * @type {Object}
     * @property {number|Long} [seconds]
     * @property {number} [nanos]
     * @memberof common
     */
    Timestamp: timeType
});

common("empty", {

    /**
     * Properties of a google.protobuf.Empty message.
     * @interface IEmpty
     * @memberof common
     */
    Empty: {
        fields: {}
    }
});

common("struct", {

    /**
     * Properties of a google.protobuf.Struct message.
     * @interface IStruct
     * @type {Object}
     * @property {Object.<string,IValue>} [fields]
     * @memberof common
     */
    Struct: {
        fields: {
            fields: {
                keyType: "string",
                type: "Value",
                id: 1
            }
        }
    },

    /**
     * Properties of a google.protobuf.Value message.
     * @interface IValue
     * @type {Object}
     * @property {string} [kind]
     * @property {0} [nullValue]
     * @property {number} [numberValue]
     * @property {string} [stringValue]
     * @property {boolean} [boolValue]
     * @property {IStruct} [structValue]
     * @property {IListValue} [listValue]
     * @memberof common
     */
    Value: {
        oneofs: {
            kind: {
                oneof: [
                    "nullValue",
                    "numberValue",
                    "stringValue",
                    "boolValue",
                    "structValue",
                    "listValue"
                ]
            }
        },
        fields: {
            nullValue: {
                type: "NullValue",
                id: 1
            },
            numberValue: {
                type: "double",
                id: 2
            },
            stringValue: {
                type: "string",
                id: 3
            },
            boolValue: {
                type: "bool",
                id: 4
            },
            structValue: {
                type: "Struct",
                id: 5
            },
            listValue: {
                type: "ListValue",
                id: 6
            }
        }
    },

    NullValue: {
        values: {
            NULL_VALUE: 0
        }
    },

    /**
     * Properties of a google.protobuf.ListValue message.
     * @interface IListValue
     * @type {Object}
     * @property {Array.<IValue>} [values]
     * @memberof common
     */
    ListValue: {
        fields: {
            values: {
                rule: "repeated",
                type: "Value",
                id: 1
            }
        }
    }
});

common("wrappers", {

    /**
     * Properties of a google.protobuf.DoubleValue message.
     * @interface IDoubleValue
     * @type {Object}
     * @property {number} [value]
     * @memberof common
     */
    DoubleValue: {
        fields: {
            value: {
                type: "double",
                id: 1
            }
        }
    },

    /**
     * Properties of a google.protobuf.FloatValue message.
     * @interface IFloatValue
     * @type {Object}
     * @property {number} [value]
     * @memberof common
     */
    FloatValue: {
        fields: {
            value: {
                type: "float",
                id: 1
            }
        }
    },

    /**
     * Properties of a google.protobuf.Int64Value message.
     * @interface IInt64Value
     * @type {Object}
     * @property {number|Long} [value]
     * @memberof common
     */
    Int64Value: {
        fields: {
            value: {
                type: "int64",
                id: 1
            }
        }
    },

    /**
     * Properties of a google.protobuf.UInt64Value message.
     * @interface IUInt64Value
     * @type {Object}
     * @property {number|Long} [value]
     * @memberof common
     */
    UInt64Value: {
        fields: {
            value: {
                type: "uint64",
                id: 1
            }
        }
    },

    /**
     * Properties of a google.protobuf.Int32Value message.
     * @interface IInt32Value
     * @type {Object}
     * @property {number} [value]
     * @memberof common
     */
    Int32Value: {
        fields: {
            value: {
                type: "int32",
                id: 1
            }
        }
    },

    /**
     * Properties of a google.protobuf.UInt32Value message.
     * @interface IUInt32Value
     * @type {Object}
     * @property {number} [value]
     * @memberof common
     */
    UInt32Value: {
        fields: {
            value: {
                type: "uint32",
                id: 1
            }
        }
    },

    /**
     * Properties of a google.protobuf.BoolValue message.
     * @interface IBoolValue
     * @type {Object}
     * @property {boolean} [value]
     * @memberof common
     */
    BoolValue: {
        fields: {
            value: {
                type: "bool",
                id: 1
            }
        }
    },

    /**
     * Properties of a google.protobuf.StringValue message.
     * @interface IStringValue
     * @type {Object}
     * @property {string} [value]
     * @memberof common
     */
    StringValue: {
        fields: {
            value: {
                type: "string",
                id: 1
            }
        }
    },

    /**
     * Properties of a google.protobuf.BytesValue message.
     * @interface IBytesValue
     * @type {Object}
     * @property {Uint8Array} [value]
     * @memberof common
     */
    BytesValue: {
        fields: {
            value: {
                type: "bytes",
                id: 1
            }
        }
    }
});

common("field_mask", {

    /**
     * Properties of a google.protobuf.FieldMask message.
     * @interface IDoubleValue
     * @type {Object}
     * @property {number} [value]
     * @memberof common
     */
    FieldMask: {
        fields: {
            paths: {
                rule: "repeated",
                type: "string",
                id: 1
            }
        }
    }
});

/**
 * Gets the root definition of the specified common proto file.
 *
 * Bundled definitions are:
 * - google/protobuf/any.proto
 * - google/protobuf/duration.proto
 * - google/protobuf/empty.proto
 * - google/protobuf/field_mask.proto
 * - google/protobuf/struct.proto
 * - google/protobuf/timestamp.proto
 * - google/protobuf/wrappers.proto
 *
 * @param {string} file Proto file name
 * @returns {INamespace|null} Root definition or `null` if not defined
 */
common.get = function get(file) {
    return common[file] || null;
};

},{}],13:[function(require,module,exports){
"use strict";
/**
 * Runtime message from/to plain object converters.
 * @namespace
 */
var converter = exports;

var Enum = require("./enum"),
    util = require("./util");

/**
 * Generates a partial value fromObject conveter.
 * @param {Codegen} gen Codegen instance
 * @param {Field} field Reflected field
 * @param {number} fieldIndex Field index
 * @param {string} prop Property reference
 * @returns {Codegen} Codegen instance
 * @ignore
 */
function genValuePartial_fromObject(gen, field, fieldIndex, prop) {
    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */
    if (field.resolvedType) {
        if (field.resolvedType instanceof Enum) { gen
            ("switch(d%s){", prop);
            for (var values = field.resolvedType.values, keys = Object.keys(values), i = 0; i < keys.length; ++i) {
                if (field.repeated && values[keys[i]] === field.typeDefault) gen
                ("default:");
                gen
                ("case%j:", keys[i])
                ("case %i:", values[keys[i]])
                    ("m%s=%j", prop, values[keys[i]])
                    ("break");
            } gen
            ("}");
        } else gen
            ("if(typeof d%s!==\"object\")", prop)
                ("throw TypeError(%j)", field.fullName + ": object expected")
            ("m%s=types[%i].fromObject(d%s)", prop, fieldIndex, prop);
    } else {
        var isUnsigned = false;
        switch (field.type) {
            case "double":
            case "float": gen
                ("m%s=Number(d%s)", prop, prop); // also catches "NaN", "Infinity"
                break;
            case "uint32":
            case "fixed32": gen
                ("m%s=d%s>>>0", prop, prop);
                break;
            case "int32":
            case "sint32":
            case "sfixed32": gen
                ("m%s=d%s|0", prop, prop);
                break;
            case "uint64":
                isUnsigned = true;
                // eslint-disable-line no-fallthrough
            case "int64":
            case "sint64":
            case "fixed64":
            case "sfixed64": gen
                ("if(util.Long)")
                    ("(m%s=util.Long.fromValue(d%s)).unsigned=%j", prop, prop, isUnsigned)
                ("else if(typeof d%s===\"string\")", prop)
                    ("m%s=parseInt(d%s,10)", prop, prop)
                ("else if(typeof d%s===\"number\")", prop)
                    ("m%s=d%s", prop, prop)
                ("else if(typeof d%s===\"object\")", prop)
                    ("m%s=new util.LongBits(d%s.low>>>0,d%s.high>>>0).toNumber(%s)", prop, prop, prop, isUnsigned ? "true" : "");
                break;
            case "bytes": gen
                ("if(typeof d%s===\"string\")", prop)
                    ("util.base64.decode(d%s,m%s=util.newBuffer(util.base64.length(d%s)),0)", prop, prop, prop)
                ("else if(d%s.length)", prop)
                    ("m%s=d%s", prop, prop);
                break;
            case "string": gen
                ("m%s=String(d%s)", prop, prop);
                break;
            case "bool": gen
                ("m%s=Boolean(d%s)", prop, prop);
                break;
            /* default: gen
                ("m%s=d%s", prop, prop);
                break; */
        }
    }
    return gen;
    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */
}

/**
 * Generates a plain object to runtime message converter specific to the specified message type.
 * @param {Type} mtype Message type
 * @returns {Codegen} Codegen instance
 */
converter.fromObject = function fromObject(mtype) {
    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */
    var fields = mtype.fieldsArray;
    var gen = util.codegen(["d"], mtype.name + "$fromObject")
    ("if(d instanceof this.ctor)")
        ("return d");
    if (!fields.length) return gen
    ("return new this.ctor");
    gen
    ("var m=new this.ctor");
    for (var i = 0; i < fields.length; ++i) {
        var field  = fields[i].resolve(),
            prop   = util.safeProp(field.name);

        // Map fields
        if (field.map) { gen
    ("if(d%s){", prop)
        ("if(typeof d%s!==\"object\")", prop)
            ("throw TypeError(%j)", field.fullName + ": object expected")
        ("m%s={}", prop)
        ("for(var ks=Object.keys(d%s),i=0;i<ks.length;++i){", prop);
            genValuePartial_fromObject(gen, field, /* not sorted */ i, prop + "[ks[i]]")
        ("}")
    ("}");

        // Repeated fields
        } else if (field.repeated) { gen
    ("if(d%s){", prop)
        ("if(!Array.isArray(d%s))", prop)
            ("throw TypeError(%j)", field.fullName + ": array expected")
        ("m%s=[]", prop)
        ("for(var i=0;i<d%s.length;++i){", prop);
            genValuePartial_fromObject(gen, field, /* not sorted */ i, prop + "[i]")
        ("}")
    ("}");

        // Non-repeated fields
        } else {
            if (!(field.resolvedType instanceof Enum)) gen // no need to test for null/undefined if an enum (uses switch)
    ("if(d%s!=null){", prop); // !== undefined && !== null
        genValuePartial_fromObject(gen, field, /* not sorted */ i, prop);
            if (!(field.resolvedType instanceof Enum)) gen
    ("}");
        }
    } return gen
    ("return m");
    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */
};

/**
 * Generates a partial value toObject converter.
 * @param {Codegen} gen Codegen instance
 * @param {Field} field Reflected field
 * @param {number} fieldIndex Field index
 * @param {string} prop Property reference
 * @returns {Codegen} Codegen instance
 * @ignore
 */
function genValuePartial_toObject(gen, field, fieldIndex, prop) {
    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */
    if (field.resolvedType) {
        if (field.resolvedType instanceof Enum) gen
            ("d%s=o.enums===String?types[%i].values[m%s]:m%s", prop, fieldIndex, prop, prop);
        else gen
            ("d%s=types[%i].toObject(m%s,o)", prop, fieldIndex, prop);
    } else {
        var isUnsigned = false;
        switch (field.type) {
            case "double":
            case "float": gen
            ("d%s=o.json&&!isFinite(m%s)?String(m%s):m%s", prop, prop, prop, prop);
                break;
            case "uint64":
                isUnsigned = true;
                // eslint-disable-line no-fallthrough
            case "int64":
            case "sint64":
            case "fixed64":
            case "sfixed64": gen
            ("if(typeof m%s===\"number\")", prop)
                ("d%s=o.longs===String?String(m%s):m%s", prop, prop, prop)
            ("else") // Long-like
                ("d%s=o.longs===String?util.Long.prototype.toString.call(m%s):o.longs===Number?new util.LongBits(m%s.low>>>0,m%s.high>>>0).toNumber(%s):m%s", prop, prop, prop, prop, isUnsigned ? "true": "", prop);
                break;
            case "bytes": gen
            ("d%s=o.bytes===String?util.base64.encode(m%s,0,m%s.length):o.bytes===Array?Array.prototype.slice.call(m%s):m%s", prop, prop, prop, prop, prop);
                break;
            default: gen
            ("d%s=m%s", prop, prop);
                break;
        }
    }
    return gen;
    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */
}

/**
 * Generates a runtime message to plain object converter specific to the specified message type.
 * @param {Type} mtype Message type
 * @returns {Codegen} Codegen instance
 */
converter.toObject = function toObject(mtype) {
    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */
    var fields = mtype.fieldsArray.slice().sort(util.compareFieldsById);
    if (!fields.length)
        return util.codegen()("return {}");
    var gen = util.codegen(["m", "o"], mtype.name + "$toObject")
    ("if(!o)")
        ("o={}")
    ("var d={}");

    var repeatedFields = [],
        mapFields = [],
        normalFields = [],
        i = 0;
    for (; i < fields.length; ++i)
        if (!fields[i].partOf)
            ( fields[i].resolve().repeated ? repeatedFields
            : fields[i].map ? mapFields
            : normalFields).push(fields[i]);

    if (repeatedFields.length) { gen
    ("if(o.arrays||o.defaults){");
        for (i = 0; i < repeatedFields.length; ++i) gen
        ("d%s=[]", util.safeProp(repeatedFields[i].name));
        gen
    ("}");
    }

    if (mapFields.length) { gen
    ("if(o.objects||o.defaults){");
        for (i = 0; i < mapFields.length; ++i) gen
        ("d%s={}", util.safeProp(mapFields[i].name));
        gen
    ("}");
    }

    if (normalFields.length) { gen
    ("if(o.defaults){");
        for (i = 0; i < normalFields.length; ++i) {
            var field = normalFields[i],
                prop  = util.safeProp(field.name);
            if (field.resolvedType instanceof Enum) gen
        ("d%s=o.enums===String?%j:%j", prop, field.resolvedType.valuesById[field.typeDefault], field.typeDefault);
            else if (field.long) gen
        ("if(util.Long){")
            ("var n=new util.Long(%i,%i,%j)", field.typeDefault.low, field.typeDefault.high, field.typeDefault.unsigned)
            ("d%s=o.longs===String?n.toString():o.longs===Number?n.toNumber():n", prop)
        ("}else")
            ("d%s=o.longs===String?%j:%i", prop, field.typeDefault.toString(), field.typeDefault.toNumber());
            else if (field.bytes) {
                var arrayDefault = "[" + Array.prototype.slice.call(field.typeDefault).join(",") + "]";
                gen
        ("if(o.bytes===String)d%s=%j", prop, String.fromCharCode.apply(String, field.typeDefault))
        ("else{")
            ("d%s=%s", prop, arrayDefault)
            ("if(o.bytes!==Array)d%s=util.newBuffer(d%s)", prop, prop)
        ("}");
            } else gen
        ("d%s=%j", prop, field.typeDefault); // also messages (=null)
        } gen
    ("}");
    }
    var hasKs2 = false;
    for (i = 0; i < fields.length; ++i) {
        var field = fields[i],
            index = mtype._fieldsArray.indexOf(field),
            prop  = util.safeProp(field.name);
        if (field.map) {
            if (!hasKs2) { hasKs2 = true; gen
    ("var ks2");
            } gen
    ("if(m%s&&(ks2=Object.keys(m%s)).length){", prop, prop)
        ("d%s={}", prop)
        ("for(var j=0;j<ks2.length;++j){");
            genValuePartial_toObject(gen, field, /* sorted */ index, prop + "[ks2[j]]")
        ("}");
        } else if (field.repeated) { gen
    ("if(m%s&&m%s.length){", prop, prop)
        ("d%s=[]", prop)
        ("for(var j=0;j<m%s.length;++j){", prop);
            genValuePartial_toObject(gen, field, /* sorted */ index, prop + "[j]")
        ("}");
        } else { gen
    ("if(m%s!=null&&m.hasOwnProperty(%j)){", prop, field.name); // !== undefined && !== null
        genValuePartial_toObject(gen, field, /* sorted */ index, prop);
        if (field.partOf) gen
        ("if(o.oneofs)")
            ("d%s=%j", util.safeProp(field.partOf.name), field.name);
        }
        gen
    ("}");
    }
    return gen
    ("return d");
    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */
};

},{"./enum":16,"./util":38}],14:[function(require,module,exports){
"use strict";
module.exports = decoder;

var Enum    = require("./enum"),
    types   = require("./types"),
    util    = require("./util");

function missing(field) {
    return "missing required '" + field.name + "'";
}

/**
 * Generates a decoder specific to the specified message type.
 * @param {Type} mtype Message type
 * @returns {Codegen} Codegen instance
 */
function decoder(mtype) {
    /* eslint-disable no-unexpected-multiline */
    var gen = util.codegen(["r", "l"], mtype.name + "$decode")
    ("if(!(r instanceof Reader))")
        ("r=Reader.create(r)")
    ("var c=l===undefined?r.len:r.pos+l,m=new this.ctor" + (mtype.fieldsArray.filter(function(field) { return field.map; }).length ? ",k" : ""))
    ("while(r.pos<c){")
        ("var t=r.uint32()");
    if (mtype.group) gen
        ("if((t&7)===4)")
            ("break");
    gen
        ("switch(t>>>3){");

    var i = 0;
    for (; i < /* initializes */ mtype.fieldsArray.length; ++i) {
        var field = mtype._fieldsArray[i].resolve(),
            type  = field.resolvedType instanceof Enum ? "int32" : field.type,
            ref   = "m" + util.safeProp(field.name); gen
            ("case %i:", field.id);

        // Map fields
        if (field.map) { gen
                ("r.skip().pos++") // assumes id 1 + key wireType
                ("if(%s===util.emptyObject)", ref)
                    ("%s={}", ref)
                ("k=r.%s()", field.keyType)
                ("r.pos++"); // assumes id 2 + value wireType
            if (types.long[field.keyType] !== undefined) {
                if (types.basic[type] === undefined) gen
                ("%s[typeof k===\"object\"?util.longToHash(k):k]=types[%i].decode(r,r.uint32())", ref, i); // can't be groups
                else gen
                ("%s[typeof k===\"object\"?util.longToHash(k):k]=r.%s()", ref, type);
            } else {
                if (types.basic[type] === undefined) gen
                ("%s[k]=types[%i].decode(r,r.uint32())", ref, i); // can't be groups
                else gen
                ("%s[k]=r.%s()", ref, type);
            }

        // Repeated fields
        } else if (field.repeated) { gen

                ("if(!(%s&&%s.length))", ref, ref)
                    ("%s=[]", ref);

            // Packable (always check for forward and backward compatiblity)
            if (types.packed[type] !== undefined) gen
                ("if((t&7)===2){")
                    ("var c2=r.uint32()+r.pos")
                    ("while(r.pos<c2)")
                        ("%s.push(r.%s())", ref, type)
                ("}else");

            // Non-packed
            if (types.basic[type] === undefined) gen(field.resolvedType.group
                    ? "%s.push(types[%i].decode(r))"
                    : "%s.push(types[%i].decode(r,r.uint32()))", ref, i);
            else gen
                    ("%s.push(r.%s())", ref, type);

        // Non-repeated
        } else if (types.basic[type] === undefined) gen(field.resolvedType.group
                ? "%s=types[%i].decode(r)"
                : "%s=types[%i].decode(r,r.uint32())", ref, i);
        else gen
                ("%s=r.%s()", ref, type);
        gen
                ("break");
    // Unknown fields
    } gen
            ("default:")
                ("r.skipType(t&7)")
                ("break")

        ("}")
    ("}");

    // Field presence
    for (i = 0; i < mtype._fieldsArray.length; ++i) {
        var rfield = mtype._fieldsArray[i];
        if (rfield.required) gen
    ("if(!m.hasOwnProperty(%j))", rfield.name)
        ("throw util.ProtocolError(%j,{instance:m})", missing(rfield));
    }

    return gen
    ("return m");
    /* eslint-enable no-unexpected-multiline */
}

},{"./enum":16,"./types":37,"./util":38}],15:[function(require,module,exports){
"use strict";
module.exports = encoder;

var Enum     = require("./enum"),
    types    = require("./types"),
    util     = require("./util");

/**
 * Generates a partial message type encoder.
 * @param {Codegen} gen Codegen instance
 * @param {Field} field Reflected field
 * @param {number} fieldIndex Field index
 * @param {string} ref Variable reference
 * @returns {Codegen} Codegen instance
 * @ignore
 */
function genTypePartial(gen, field, fieldIndex, ref) {
    return field.resolvedType.group
        ? gen("types[%i].encode(%s,w.uint32(%i)).uint32(%i)", fieldIndex, ref, (field.id << 3 | 3) >>> 0, (field.id << 3 | 4) >>> 0)
        : gen("types[%i].encode(%s,w.uint32(%i).fork()).ldelim()", fieldIndex, ref, (field.id << 3 | 2) >>> 0);
}

/**
 * Generates an encoder specific to the specified message type.
 * @param {Type} mtype Message type
 * @returns {Codegen} Codegen instance
 */
function encoder(mtype) {
    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */
    var gen = util.codegen(["m", "w"], mtype.name + "$encode")
    ("if(!w)")
        ("w=Writer.create()");

    var i, ref;

    // "when a message is serialized its known fields should be written sequentially by field number"
    var fields = /* initializes */ mtype.fieldsArray.slice().sort(util.compareFieldsById);

    for (var i = 0; i < fields.length; ++i) {
        var field    = fields[i].resolve(),
            index    = mtype._fieldsArray.indexOf(field),
            type     = field.resolvedType instanceof Enum ? "int32" : field.type,
            wireType = types.basic[type];
            ref      = "m" + util.safeProp(field.name);

        // Map fields
        if (field.map) {
            gen
    ("if(%s!=null&&m.hasOwnProperty(%j)){", ref, field.name) // !== undefined && !== null
        ("for(var ks=Object.keys(%s),i=0;i<ks.length;++i){", ref)
            ("w.uint32(%i).fork().uint32(%i).%s(ks[i])", (field.id << 3 | 2) >>> 0, 8 | types.mapKey[field.keyType], field.keyType);
            if (wireType === undefined) gen
            ("types[%i].encode(%s[ks[i]],w.uint32(18).fork()).ldelim().ldelim()", index, ref); // can't be groups
            else gen
            (".uint32(%i).%s(%s[ks[i]]).ldelim()", 16 | wireType, type, ref);
            gen
        ("}")
    ("}");

            // Repeated fields
        } else if (field.repeated) { gen
    ("if(%s!=null&&%s.length){", ref, ref); // !== undefined && !== null

            // Packed repeated
            if (field.packed && types.packed[type] !== undefined) { gen

        ("w.uint32(%i).fork()", (field.id << 3 | 2) >>> 0)
        ("for(var i=0;i<%s.length;++i)", ref)
            ("w.%s(%s[i])", type, ref)
        ("w.ldelim()");

            // Non-packed
            } else { gen

        ("for(var i=0;i<%s.length;++i)", ref);
                if (wireType === undefined)
            genTypePartial(gen, field, index, ref + "[i]");
                else gen
            ("w.uint32(%i).%s(%s[i])", (field.id << 3 | wireType) >>> 0, type, ref);

            } gen
    ("}");

        // Non-repeated
        } else {
            if (field.optional) gen
    ("if(%s!=null&&m.hasOwnProperty(%j))", ref, field.name); // !== undefined && !== null

            if (wireType === undefined)
        genTypePartial(gen, field, index, ref);
            else gen
        ("w.uint32(%i).%s(%s)", (field.id << 3 | wireType) >>> 0, type, ref);

        }
    }

    return gen
    ("return w");
    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */
}
},{"./enum":16,"./types":37,"./util":38}],16:[function(require,module,exports){
"use strict";
module.exports = Enum;

// extends ReflectionObject
var ReflectionObject = require("./object");
((Enum.prototype = Object.create(ReflectionObject.prototype)).constructor = Enum).className = "Enum";

var Namespace = require("./namespace"),
    util = require("./util");

/**
 * Constructs a new enum instance.
 * @classdesc Reflected enum.
 * @extends ReflectionObject
 * @constructor
 * @param {string} name Unique name within its namespace
 * @param {Object.<string,number>} [values] Enum values as an object, by name
 * @param {Object.<string,*>} [options] Declared options
 * @param {string} [comment] The comment for this enum
 * @param {Object.<string,string>} [comments] The value comments for this enum
 */
function Enum(name, values, options, comment, comments) {
    ReflectionObject.call(this, name, options);

    if (values && typeof values !== "object")
        throw TypeError("values must be an object");

    /**
     * Enum values by id.
     * @type {Object.<number,string>}
     */
    this.valuesById = {};

    /**
     * Enum values by name.
     * @type {Object.<string,number>}
     */
    this.values = Object.create(this.valuesById); // toJSON, marker

    /**
     * Enum comment text.
     * @type {string|null}
     */
    this.comment = comment;

    /**
     * Value comment texts, if any.
     * @type {Object.<string,string>}
     */
    this.comments = comments || {};

    /**
     * Reserved ranges, if any.
     * @type {Array.<number[]|string>}
     */
    this.reserved = undefined; // toJSON

    // Note that values inherit valuesById on their prototype which makes them a TypeScript-
    // compatible enum. This is used by pbts to write actual enum definitions that work for
    // static and reflection code alike instead of emitting generic object definitions.

    if (values)
        for (var keys = Object.keys(values), i = 0; i < keys.length; ++i)
            if (typeof values[keys[i]] === "number") // use forward entries only
                this.valuesById[ this.values[keys[i]] = values[keys[i]] ] = keys[i];
}

/**
 * Enum descriptor.
 * @interface IEnum
 * @property {Object.<string,number>} values Enum values
 * @property {Object.<string,*>} [options] Enum options
 */

/**
 * Constructs an enum from an enum descriptor.
 * @param {string} name Enum name
 * @param {IEnum} json Enum descriptor
 * @returns {Enum} Created enum
 * @throws {TypeError} If arguments are invalid
 */
Enum.fromJSON = function fromJSON(name, json) {
    var enm = new Enum(name, json.values, json.options, json.comment, json.comments);
    enm.reserved = json.reserved;
    return enm;
};

/**
 * Converts this enum to an enum descriptor.
 * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
 * @returns {IEnum} Enum descriptor
 */
Enum.prototype.toJSON = function toJSON(toJSONOptions) {
    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
    return util.toObject([
        "options"  , this.options,
        "values"   , this.values,
        "reserved" , this.reserved && this.reserved.length ? this.reserved : undefined,
        "comment"  , keepComments ? this.comment : undefined,
        "comments" , keepComments ? this.comments : undefined
    ]);
};

/**
 * Adds a value to this enum.
 * @param {string} name Value name
 * @param {number} id Value id
 * @param {string} [comment] Comment, if any
 * @returns {Enum} `this`
 * @throws {TypeError} If arguments are invalid
 * @throws {Error} If there is already a value with this name or id
 */
Enum.prototype.add = function add(name, id, comment) {
    // utilized by the parser but not by .fromJSON

    if (!util.isString(name))
        throw TypeError("name must be a string");

    if (!util.isInteger(id))
        throw TypeError("id must be an integer");

    if (this.values[name] !== undefined)
        throw Error("duplicate name '" + name + "' in " + this);

    if (this.isReservedId(id))
        throw Error("id " + id + " is reserved in " + this);

    if (this.isReservedName(name))
        throw Error("name '" + name + "' is reserved in " + this);

    if (this.valuesById[id] !== undefined) {
        if (!(this.options && this.options.allow_alias))
            throw Error("duplicate id " + id + " in " + this);
        this.values[name] = id;
    } else
        this.valuesById[this.values[name] = id] = name;

    this.comments[name] = comment || null;
    return this;
};

/**
 * Removes a value from this enum
 * @param {string} name Value name
 * @returns {Enum} `this`
 * @throws {TypeError} If arguments are invalid
 * @throws {Error} If `name` is not a name of this enum
 */
Enum.prototype.remove = function remove(name) {

    if (!util.isString(name))
        throw TypeError("name must be a string");

    var val = this.values[name];
    if (val == null)
        throw Error("name '" + name + "' does not exist in " + this);

    delete this.valuesById[val];
    delete this.values[name];
    delete this.comments[name];

    return this;
};

/**
 * Tests if the specified id is reserved.
 * @param {number} id Id to test
 * @returns {boolean} `true` if reserved, otherwise `false`
 */
Enum.prototype.isReservedId = function isReservedId(id) {
    return Namespace.isReservedId(this.reserved, id);
};

/**
 * Tests if the specified name is reserved.
 * @param {string} name Name to test
 * @returns {boolean} `true` if reserved, otherwise `false`
 */
Enum.prototype.isReservedName = function isReservedName(name) {
    return Namespace.isReservedName(this.reserved, name);
};

},{"./namespace":24,"./object":25,"./util":38}],17:[function(require,module,exports){
"use strict";
module.exports = Field;

// extends ReflectionObject
var ReflectionObject = require("./object");
((Field.prototype = Object.create(ReflectionObject.prototype)).constructor = Field).className = "Field";

var Enum  = require("./enum"),
    types = require("./types"),
    util  = require("./util");

var Type; // cyclic

var ruleRe = /^required|optional|repeated$/;

/**
 * Constructs a new message field instance. Note that {@link MapField|map fields} have their own class.
 * @name Field
 * @classdesc Reflected message field.
 * @extends FieldBase
 * @constructor
 * @param {string} name Unique name within its namespace
 * @param {number} id Unique id within its namespace
 * @param {string} type Value type
 * @param {string|Object.<string,*>} [rule="optional"] Field rule
 * @param {string|Object.<string,*>} [extend] Extended type if different from parent
 * @param {Object.<string,*>} [options] Declared options
 */

/**
 * Constructs a field from a field descriptor.
 * @param {string} name Field name
 * @param {IField} json Field descriptor
 * @returns {Field} Created field
 * @throws {TypeError} If arguments are invalid
 */
Field.fromJSON = function fromJSON(name, json) {
    return new Field(name, json.id, json.type, json.rule, json.extend, json.options, json.comment);
};

/**
 * Not an actual constructor. Use {@link Field} instead.
 * @classdesc Base class of all reflected message fields. This is not an actual class but here for the sake of having consistent type definitions.
 * @exports FieldBase
 * @extends ReflectionObject
 * @constructor
 * @param {string} name Unique name within its namespace
 * @param {number} id Unique id within its namespace
 * @param {string} type Value type
 * @param {string|Object.<string,*>} [rule="optional"] Field rule
 * @param {string|Object.<string,*>} [extend] Extended type if different from parent
 * @param {Object.<string,*>} [options] Declared options
 * @param {string} [comment] Comment associated with this field
 */
function Field(name, id, type, rule, extend, options, comment) {

    if (util.isObject(rule)) {
        comment = extend;
        options = rule;
        rule = extend = undefined;
    } else if (util.isObject(extend)) {
        comment = options;
        options = extend;
        extend = undefined;
    }

    ReflectionObject.call(this, name, options);

    if (!util.isInteger(id) || id < 0)
        throw TypeError("id must be a non-negative integer");

    if (!util.isString(type))
        throw TypeError("type must be a string");

    if (rule !== undefined && !ruleRe.test(rule = rule.toString().toLowerCase()))
        throw TypeError("rule must be a string rule");

    if (extend !== undefined && !util.isString(extend))
        throw TypeError("extend must be a string");

    /**
     * Field rule, if any.
     * @type {string|undefined}
     */
    this.rule = rule && rule !== "optional" ? rule : undefined; // toJSON

    /**
     * Field type.
     * @type {string}
     */
    this.type = type; // toJSON

    /**
     * Unique field id.
     * @type {number}
     */
    this.id = id; // toJSON, marker

    /**
     * Extended type if different from parent.
     * @type {string|undefined}
     */
    this.extend = extend || undefined; // toJSON

    /**
     * Whether this field is required.
     * @type {boolean}
     */
    this.required = rule === "required";

    /**
     * Whether this field is optional.
     * @type {boolean}
     */
    this.optional = !this.required;

    /**
     * Whether this field is repeated.
     * @type {boolean}
     */
    this.repeated = rule === "repeated";

    /**
     * Whether this field is a map or not.
     * @type {boolean}
     */
    this.map = false;

    /**
     * Message this field belongs to.
     * @type {Type|null}
     */
    this.message = null;

    /**
     * OneOf this field belongs to, if any,
     * @type {OneOf|null}
     */
    this.partOf = null;

    /**
     * The field type's default value.
     * @type {*}
     */
    this.typeDefault = null;

    /**
     * The field's default value on prototypes.
     * @type {*}
     */
    this.defaultValue = null;

    /**
     * Whether this field's value should be treated as a long.
     * @type {boolean}
     */
    this.long = util.Long ? types.long[type] !== undefined : /* istanbul ignore next */ false;

    /**
     * Whether this field's value is a buffer.
     * @type {boolean}
     */
    this.bytes = type === "bytes";

    /**
     * Resolved type if not a basic type.
     * @type {Type|Enum|null}
     */
    this.resolvedType = null;

    /**
     * Sister-field within the extended type if a declaring extension field.
     * @type {Field|null}
     */
    this.extensionField = null;

    /**
     * Sister-field within the declaring namespace if an extended field.
     * @type {Field|null}
     */
    this.declaringField = null;

    /**
     * Internally remembers whether this field is packed.
     * @type {boolean|null}
     * @private
     */
    this._packed = null;

    /**
     * Comment for this field.
     * @type {string|null}
     */
    this.comment = comment;
}

/**
 * Determines whether this field is packed. Only relevant when repeated and working with proto2.
 * @name Field#packed
 * @type {boolean}
 * @readonly
 */
Object.defineProperty(Field.prototype, "packed", {
    get: function() {
        // defaults to packed=true if not explicity set to false
        if (this._packed === null)
            this._packed = this.getOption("packed") !== false;
        return this._packed;
    }
});

/**
 * @override
 */
Field.prototype.setOption = function setOption(name, value, ifNotSet) {
    if (name === "packed") // clear cached before setting
        this._packed = null;
    return ReflectionObject.prototype.setOption.call(this, name, value, ifNotSet);
};

/**
 * Field descriptor.
 * @interface IField
 * @property {string} [rule="optional"] Field rule
 * @property {string} type Field type
 * @property {number} id Field id
 * @property {Object.<string,*>} [options] Field options
 */

/**
 * Extension field descriptor.
 * @interface IExtensionField
 * @extends IField
 * @property {string} extend Extended type
 */

/**
 * Converts this field to a field descriptor.
 * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
 * @returns {IField} Field descriptor
 */
Field.prototype.toJSON = function toJSON(toJSONOptions) {
    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
    return util.toObject([
        "rule"    , this.rule !== "optional" && this.rule || undefined,
        "type"    , this.type,
        "id"      , this.id,
        "extend"  , this.extend,
        "options" , this.options,
        "comment" , keepComments ? this.comment : undefined
    ]);
};

/**
 * Resolves this field's type references.
 * @returns {Field} `this`
 * @throws {Error} If any reference cannot be resolved
 */
Field.prototype.resolve = function resolve() {

    if (this.resolved)
        return this;

    if ((this.typeDefault = types.defaults[this.type]) === undefined) { // if not a basic type, resolve it
        this.resolvedType = (this.declaringField ? this.declaringField.parent : this.parent).lookupTypeOrEnum(this.type);
        if (this.resolvedType instanceof Type)
            this.typeDefault = null;
        else // instanceof Enum
            this.typeDefault = this.resolvedType.values[Object.keys(this.resolvedType.values)[0]]; // first defined
    }

    // use explicitly set default value if present
    if (this.options && this.options["default"] != null) {
        this.typeDefault = this.options["default"];
        if (this.resolvedType instanceof Enum && typeof this.typeDefault === "string")
            this.typeDefault = this.resolvedType.values[this.typeDefault];
    }

    // remove unnecessary options
    if (this.options) {
        if (this.options.packed === true || this.options.packed !== undefined && this.resolvedType && !(this.resolvedType instanceof Enum))
            delete this.options.packed;
        if (!Object.keys(this.options).length)
            this.options = undefined;
    }

    // convert to internal data type if necesssary
    if (this.long) {
        this.typeDefault = util.Long.fromNumber(this.typeDefault, this.type.charAt(0) === "u");

        /* istanbul ignore else */
        if (Object.freeze)
            Object.freeze(this.typeDefault); // long instances are meant to be immutable anyway (i.e. use small int cache that even requires it)

    } else if (this.bytes && typeof this.typeDefault === "string") {
        var buf;
        if (util.base64.test(this.typeDefault))
            util.base64.decode(this.typeDefault, buf = util.newBuffer(util.base64.length(this.typeDefault)), 0);
        else
            util.utf8.write(this.typeDefault, buf = util.newBuffer(util.utf8.length(this.typeDefault)), 0);
        this.typeDefault = buf;
    }

    // take special care of maps and repeated fields
    if (this.map)
        this.defaultValue = util.emptyObject;
    else if (this.repeated)
        this.defaultValue = util.emptyArray;
    else
        this.defaultValue = this.typeDefault;

    // ensure proper value on prototype
    if (this.parent instanceof Type)
        this.parent.ctor.prototype[this.name] = this.defaultValue;

    return ReflectionObject.prototype.resolve.call(this);
};

/**
 * Decorator function as returned by {@link Field.d} and {@link MapField.d} (TypeScript).
 * @typedef FieldDecorator
 * @type {function}
 * @param {Object} prototype Target prototype
 * @param {string} fieldName Field name
 * @returns {undefined}
 */

/**
 * Field decorator (TypeScript).
 * @name Field.d
 * @function
 * @param {number} fieldId Field id
 * @param {"double"|"float"|"int32"|"uint32"|"sint32"|"fixed32"|"sfixed32"|"int64"|"uint64"|"sint64"|"fixed64"|"sfixed64"|"string"|"bool"|"bytes"|Object} fieldType Field type
 * @param {"optional"|"required"|"repeated"} [fieldRule="optional"] Field rule
 * @param {T} [defaultValue] Default value
 * @returns {FieldDecorator} Decorator function
 * @template T extends number | number[] | Long | Long[] | string | string[] | boolean | boolean[] | Uint8Array | Uint8Array[] | Buffer | Buffer[]
 */
Field.d = function decorateField(fieldId, fieldType, fieldRule, defaultValue) {

    // submessage: decorate the submessage and use its name as the type
    if (typeof fieldType === "function")
        fieldType = util.decorateType(fieldType).name;

    // enum reference: create a reflected copy of the enum and keep reuseing it
    else if (fieldType && typeof fieldType === "object")
        fieldType = util.decorateEnum(fieldType).name;

    return function fieldDecorator(prototype, fieldName) {
        util.decorateType(prototype.constructor)
            .add(new Field(fieldName, fieldId, fieldType, fieldRule, { "default": defaultValue }));
    };
};

/**
 * Field decorator (TypeScript).
 * @name Field.d
 * @function
 * @param {number} fieldId Field id
 * @param {Constructor<T>|string} fieldType Field type
 * @param {"optional"|"required"|"repeated"} [fieldRule="optional"] Field rule
 * @returns {FieldDecorator} Decorator function
 * @template T extends Message<T>
 * @variation 2
 */
// like Field.d but without a default value

// Sets up cyclic dependencies (called in index-light)
Field._configure = function configure(Type_) {
    Type = Type_;
};

},{"./enum":16,"./object":25,"./types":37,"./util":38}],18:[function(require,module,exports){
"use strict";
var protobuf = module.exports = require("./index-minimal");

protobuf.build = "light";

/**
 * A node-style callback as used by {@link load} and {@link Root#load}.
 * @typedef LoadCallback
 * @type {function}
 * @param {Error|null} error Error, if any, otherwise `null`
 * @param {Root} [root] Root, if there hasn't been an error
 * @returns {undefined}
 */

/**
 * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.
 * @param {string|string[]} filename One or multiple files to load
 * @param {Root} root Root namespace, defaults to create a new one if omitted.
 * @param {LoadCallback} callback Callback function
 * @returns {undefined}
 * @see {@link Root#load}
 */
function load(filename, root, callback) {
    if (typeof root === "function") {
        callback = root;
        root = new protobuf.Root();
    } else if (!root)
        root = new protobuf.Root();
    return root.load(filename, callback);
}

/**
 * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.
 * @name load
 * @function
 * @param {string|string[]} filename One or multiple files to load
 * @param {LoadCallback} callback Callback function
 * @returns {undefined}
 * @see {@link Root#load}
 * @variation 2
 */
// function load(filename:string, callback:LoadCallback):undefined

/**
 * Loads one or multiple .proto or preprocessed .json files into a common root namespace and returns a promise.
 * @name load
 * @function
 * @param {string|string[]} filename One or multiple files to load
 * @param {Root} [root] Root namespace, defaults to create a new one if omitted.
 * @returns {Promise<Root>} Promise
 * @see {@link Root#load}
 * @variation 3
 */
// function load(filename:string, [root:Root]):Promise<Root>

protobuf.load = load;

/**
 * Synchronously loads one or multiple .proto or preprocessed .json files into a common root namespace (node only).
 * @param {string|string[]} filename One or multiple files to load
 * @param {Root} [root] Root namespace, defaults to create a new one if omitted.
 * @returns {Root} Root namespace
 * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid
 * @see {@link Root#loadSync}
 */
function loadSync(filename, root) {
    if (!root)
        root = new protobuf.Root();
    return root.loadSync(filename);
}

protobuf.loadSync = loadSync;

// Serialization
protobuf.encoder          = require("./encoder");
protobuf.decoder          = require("./decoder");
protobuf.verifier         = require("./verifier");
protobuf.converter        = require("./converter");

// Reflection
protobuf.ReflectionObject = require("./object");
protobuf.Namespace        = require("./namespace");
protobuf.Root             = require("./root");
protobuf.Enum             = require("./enum");
protobuf.Type             = require("./type");
protobuf.Field            = require("./field");
protobuf.OneOf            = require("./oneof");
protobuf.MapField         = require("./mapfield");
protobuf.Service          = require("./service");
protobuf.Method           = require("./method");

// Runtime
protobuf.Message          = require("./message");
protobuf.wrappers         = require("./wrappers");

// Utility
protobuf.types            = require("./types");
protobuf.util             = require("./util");

// Set up possibly cyclic reflection dependencies
protobuf.ReflectionObject._configure(protobuf.Root);
protobuf.Namespace._configure(protobuf.Type, protobuf.Service, protobuf.Enum);
protobuf.Root._configure(protobuf.Type);
protobuf.Field._configure(protobuf.Type);

},{"./converter":13,"./decoder":14,"./encoder":15,"./enum":16,"./field":17,"./index-minimal":19,"./mapfield":21,"./message":22,"./method":23,"./namespace":24,"./object":25,"./oneof":26,"./root":30,"./service":34,"./type":36,"./types":37,"./util":38,"./verifier":41,"./wrappers":42}],19:[function(require,module,exports){
"use strict";
var protobuf = exports;

/**
 * Build type, one of `"full"`, `"light"` or `"minimal"`.
 * @name build
 * @type {string}
 * @const
 */
protobuf.build = "minimal";

// Serialization
protobuf.Writer       = require("./writer");
protobuf.BufferWriter = require("./writer_buffer");
protobuf.Reader       = require("./reader");
protobuf.BufferReader = require("./reader_buffer");

// Utility
protobuf.util         = require("./util/minimal");
protobuf.rpc          = require("./rpc");
protobuf.roots        = require("./roots");
protobuf.configure    = configure;

/* istanbul ignore next */
/**
 * Reconfigures the library according to the environment.
 * @returns {undefined}
 */
function configure() {
    protobuf.Reader._configure(protobuf.BufferReader);
    protobuf.util._configure();
}

// Set up buffer utility according to the environment
protobuf.Writer._configure(protobuf.BufferWriter);
configure();

},{"./reader":28,"./reader_buffer":29,"./roots":31,"./rpc":32,"./util/minimal":40,"./writer":43,"./writer_buffer":44}],20:[function(require,module,exports){
"use strict";
var protobuf = module.exports = require("./index-light");

protobuf.build = "full";

// Parser
protobuf.tokenize         = require("./tokenize");
protobuf.parse            = require("./parse");
protobuf.common           = require("./common");

// Configure parser
protobuf.Root._configure(protobuf.Type, protobuf.parse, protobuf.common);

},{"./common":12,"./index-light":18,"./parse":27,"./tokenize":35}],21:[function(require,module,exports){
"use strict";
module.exports = MapField;

// extends Field
var Field = require("./field");
((MapField.prototype = Object.create(Field.prototype)).constructor = MapField).className = "MapField";

var types   = require("./types"),
    util    = require("./util");

/**
 * Constructs a new map field instance.
 * @classdesc Reflected map field.
 * @extends FieldBase
 * @constructor
 * @param {string} name Unique name within its namespace
 * @param {number} id Unique id within its namespace
 * @param {string} keyType Key type
 * @param {string} type Value type
 * @param {Object.<string,*>} [options] Declared options
 * @param {string} [comment] Comment associated with this field
 */
function MapField(name, id, keyType, type, options, comment) {
    Field.call(this, name, id, type, undefined, undefined, options, comment);

    /* istanbul ignore if */
    if (!util.isString(keyType))
        throw TypeError("keyType must be a string");

    /**
     * Key type.
     * @type {string}
     */
    this.keyType = keyType; // toJSON, marker

    /**
     * Resolved key type if not a basic type.
     * @type {ReflectionObject|null}
     */
    this.resolvedKeyType = null;

    // Overrides Field#map
    this.map = true;
}

/**
 * Map field descriptor.
 * @interface IMapField
 * @extends {IField}
 * @property {string} keyType Key type
 */

/**
 * Extension map field descriptor.
 * @interface IExtensionMapField
 * @extends IMapField
 * @property {string} extend Extended type
 */

/**
 * Constructs a map field from a map field descriptor.
 * @param {string} name Field name
 * @param {IMapField} json Map field descriptor
 * @returns {MapField} Created map field
 * @throws {TypeError} If arguments are invalid
 */
MapField.fromJSON = function fromJSON(name, json) {
    return new MapField(name, json.id, json.keyType, json.type, json.options, json.comment);
};

/**
 * Converts this map field to a map field descriptor.
 * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
 * @returns {IMapField} Map field descriptor
 */
MapField.prototype.toJSON = function toJSON(toJSONOptions) {
    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
    return util.toObject([
        "keyType" , this.keyType,
        "type"    , this.type,
        "id"      , this.id,
        "extend"  , this.extend,
        "options" , this.options,
        "comment" , keepComments ? this.comment : undefined
    ]);
};

/**
 * @override
 */
MapField.prototype.resolve = function resolve() {
    if (this.resolved)
        return this;

    // Besides a value type, map fields have a key type that may be "any scalar type except for floating point types and bytes"
    if (types.mapKey[this.keyType] === undefined)
        throw Error("invalid key type: " + this.keyType);

    return Field.prototype.resolve.call(this);
};

/**
 * Map field decorator (TypeScript).
 * @name MapField.d
 * @function
 * @param {number} fieldId Field id
 * @param {"int32"|"uint32"|"sint32"|"fixed32"|"sfixed32"|"int64"|"uint64"|"sint64"|"fixed64"|"sfixed64"|"bool"|"string"} fieldKeyType Field key type
 * @param {"double"|"float"|"int32"|"uint32"|"sint32"|"fixed32"|"sfixed32"|"int64"|"uint64"|"sint64"|"fixed64"|"sfixed64"|"bool"|"string"|"bytes"|Object|Constructor<{}>} fieldValueType Field value type
 * @returns {FieldDecorator} Decorator function
 * @template T extends { [key: string]: number | Long | string | boolean | Uint8Array | Buffer | number[] | Message<{}> }
 */
MapField.d = function decorateMapField(fieldId, fieldKeyType, fieldValueType) {

    // submessage value: decorate the submessage and use its name as the type
    if (typeof fieldValueType === "function")
        fieldValueType = util.decorateType(fieldValueType).name;

    // enum reference value: create a reflected copy of the enum and keep reuseing it
    else if (fieldValueType && typeof fieldValueType === "object")
        fieldValueType = util.decorateEnum(fieldValueType).name;

    return function mapFieldDecorator(prototype, fieldName) {
        util.decorateType(prototype.constructor)
            .add(new MapField(fieldName, fieldId, fieldKeyType, fieldValueType));
    };
};

},{"./field":17,"./types":37,"./util":38}],22:[function(require,module,exports){
"use strict";
module.exports = Message;

var util = require("./util/minimal");

/**
 * Constructs a new message instance.
 * @classdesc Abstract runtime message.
 * @constructor
 * @param {Properties<T>} [properties] Properties to set
 * @template T extends object = object
 */
function Message(properties) {
    // not used internally
    if (properties)
        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
            this[keys[i]] = properties[keys[i]];
}

/**
 * Reference to the reflected type.
 * @name Message.$type
 * @type {Type}
 * @readonly
 */

/**
 * Reference to the reflected type.
 * @name Message#$type
 * @type {Type}
 * @readonly
 */

/*eslint-disable valid-jsdoc*/

/**
 * Creates a new message of this type using the specified properties.
 * @param {Object.<string,*>} [properties] Properties to set
 * @returns {Message<T>} Message instance
 * @template T extends Message<T>
 * @this Constructor<T>
 */
Message.create = function create(properties) {
    return this.$type.create(properties);
};

/**
 * Encodes a message of this type.
 * @param {T|Object.<string,*>} message Message to encode
 * @param {Writer} [writer] Writer to use
 * @returns {Writer} Writer
 * @template T extends Message<T>
 * @this Constructor<T>
 */
Message.encode = function encode(message, writer) {
    return this.$type.encode(message, writer);
};

/**
 * Encodes a message of this type preceeded by its length as a varint.
 * @param {T|Object.<string,*>} message Message to encode
 * @param {Writer} [writer] Writer to use
 * @returns {Writer} Writer
 * @template T extends Message<T>
 * @this Constructor<T>
 */
Message.encodeDelimited = function encodeDelimited(message, writer) {
    return this.$type.encodeDelimited(message, writer);
};

/**
 * Decodes a message of this type.
 * @name Message.decode
 * @function
 * @param {Reader|Uint8Array} reader Reader or buffer to decode
 * @returns {T} Decoded message
 * @template T extends Message<T>
 * @this Constructor<T>
 */
Message.decode = function decode(reader) {
    return this.$type.decode(reader);
};

/**
 * Decodes a message of this type preceeded by its length as a varint.
 * @name Message.decodeDelimited
 * @function
 * @param {Reader|Uint8Array} reader Reader or buffer to decode
 * @returns {T} Decoded message
 * @template T extends Message<T>
 * @this Constructor<T>
 */
Message.decodeDelimited = function decodeDelimited(reader) {
    return this.$type.decodeDelimited(reader);
};

/**
 * Verifies a message of this type.
 * @name Message.verify
 * @function
 * @param {Object.<string,*>} message Plain object to verify
 * @returns {string|null} `null` if valid, otherwise the reason why it is not
 */
Message.verify = function verify(message) {
    return this.$type.verify(message);
};

/**
 * Creates a new message of this type from a plain object. Also converts values to their respective internal types.
 * @param {Object.<string,*>} object Plain object
 * @returns {T} Message instance
 * @template T extends Message<T>
 * @this Constructor<T>
 */
Message.fromObject = function fromObject(object) {
    return this.$type.fromObject(object);
};

/**
 * Creates a plain object from a message of this type. Also converts values to other types if specified.
 * @param {T} message Message instance
 * @param {IConversionOptions} [options] Conversion options
 * @returns {Object.<string,*>} Plain object
 * @template T extends Message<T>
 * @this Constructor<T>
 */
Message.toObject = function toObject(message, options) {
    return this.$type.toObject(message, options);
};

/**
 * Converts this message to JSON.
 * @returns {Object.<string,*>} JSON object
 */
Message.prototype.toJSON = function toJSON() {
    return this.$type.toObject(this, util.toJSONOptions);
};

/*eslint-enable valid-jsdoc*/
},{"./util/minimal":40}],23:[function(require,module,exports){
"use strict";
module.exports = Method;

// extends ReflectionObject
var ReflectionObject = require("./object");
((Method.prototype = Object.create(ReflectionObject.prototype)).constructor = Method).className = "Method";

var util = require("./util");

/**
 * Constructs a new service method instance.
 * @classdesc Reflected service method.
 * @extends ReflectionObject
 * @constructor
 * @param {string} name Method name
 * @param {string|undefined} type Method type, usually `"rpc"`
 * @param {string} requestType Request message type
 * @param {string} responseType Response message type
 * @param {boolean|Object.<string,*>} [requestStream] Whether the request is streamed
 * @param {boolean|Object.<string,*>} [responseStream] Whether the response is streamed
 * @param {Object.<string,*>} [options] Declared options
 * @param {string} [comment] The comment for this method
 */
function Method(name, type, requestType, responseType, requestStream, responseStream, options, comment) {

    /* istanbul ignore next */
    if (util.isObject(requestStream)) {
        options = requestStream;
        requestStream = responseStream = undefined;
    } else if (util.isObject(responseStream)) {
        options = responseStream;
        responseStream = undefined;
    }

    /* istanbul ignore if */
    if (!(type === undefined || util.isString(type)))
        throw TypeError("type must be a string");

    /* istanbul ignore if */
    if (!util.isString(requestType))
        throw TypeError("requestType must be a string");

    /* istanbul ignore if */
    if (!util.isString(responseType))
        throw TypeError("responseType must be a string");

    ReflectionObject.call(this, name, options);

    /**
     * Method type.
     * @type {string}
     */
    this.type = type || "rpc"; // toJSON

    /**
     * Request type.
     * @type {string}
     */
    this.requestType = requestType; // toJSON, marker

    /**
     * Whether requests are streamed or not.
     * @type {boolean|undefined}
     */
    this.requestStream = requestStream ? true : undefined; // toJSON

    /**
     * Response type.
     * @type {string}
     */
    this.responseType = responseType; // toJSON

    /**
     * Whether responses are streamed or not.
     * @type {boolean|undefined}
     */
    this.responseStream = responseStream ? true : undefined; // toJSON

    /**
     * Resolved request type.
     * @type {Type|null}
     */
    this.resolvedRequestType = null;

    /**
     * Resolved response type.
     * @type {Type|null}
     */
    this.resolvedResponseType = null;

    /**
     * Comment for this method
     * @type {string|null}
     */
    this.comment = comment;
}

/**
 * Method descriptor.
 * @interface IMethod
 * @property {string} [type="rpc"] Method type
 * @property {string} requestType Request type
 * @property {string} responseType Response type
 * @property {boolean} [requestStream=false] Whether requests are streamed
 * @property {boolean} [responseStream=false] Whether responses are streamed
 * @property {Object.<string,*>} [options] Method options
 */

/**
 * Constructs a method from a method descriptor.
 * @param {string} name Method name
 * @param {IMethod} json Method descriptor
 * @returns {Method} Created method
 * @throws {TypeError} If arguments are invalid
 */
Method.fromJSON = function fromJSON(name, json) {
    return new Method(name, json.type, json.requestType, json.responseType, json.requestStream, json.responseStream, json.options, json.comment);
};

/**
 * Converts this method to a method descriptor.
 * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
 * @returns {IMethod} Method descriptor
 */
Method.prototype.toJSON = function toJSON(toJSONOptions) {
    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
    return util.toObject([
        "type"           , this.type !== "rpc" && /* istanbul ignore next */ this.type || undefined,
        "requestType"    , this.requestType,
        "requestStream"  , this.requestStream,
        "responseType"   , this.responseType,
        "responseStream" , this.responseStream,
        "options"        , this.options,
        "comment"        , keepComments ? this.comment : undefined
    ]);
};

/**
 * @override
 */
Method.prototype.resolve = function resolve() {

    /* istanbul ignore if */
    if (this.resolved)
        return this;

    this.resolvedRequestType = this.parent.lookupType(this.requestType);
    this.resolvedResponseType = this.parent.lookupType(this.responseType);

    return ReflectionObject.prototype.resolve.call(this);
};

},{"./object":25,"./util":38}],24:[function(require,module,exports){
"use strict";
module.exports = Namespace;

// extends ReflectionObject
var ReflectionObject = require("./object");
((Namespace.prototype = Object.create(ReflectionObject.prototype)).constructor = Namespace).className = "Namespace";

var Field    = require("./field"),
    util     = require("./util");

var Type,    // cyclic
    Service,
    Enum;

/**
 * Constructs a new namespace instance.
 * @name Namespace
 * @classdesc Reflected namespace.
 * @extends NamespaceBase
 * @constructor
 * @param {string} name Namespace name
 * @param {Object.<string,*>} [options] Declared options
 */

/**
 * Constructs a namespace from JSON.
 * @memberof Namespace
 * @function
 * @param {string} name Namespace name
 * @param {Object.<string,*>} json JSON object
 * @returns {Namespace} Created namespace
 * @throws {TypeError} If arguments are invalid
 */
Namespace.fromJSON = function fromJSON(name, json) {
    return new Namespace(name, json.options).addJSON(json.nested);
};

/**
 * Converts an array of reflection objects to JSON.
 * @memberof Namespace
 * @param {ReflectionObject[]} array Object array
 * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
 * @returns {Object.<string,*>|undefined} JSON object or `undefined` when array is empty
 */
function arrayToJSON(array, toJSONOptions) {
    if (!(array && array.length))
        return undefined;
    var obj = {};
    for (var i = 0; i < array.length; ++i)
        obj[array[i].name] = array[i].toJSON(toJSONOptions);
    return obj;
}

Namespace.arrayToJSON = arrayToJSON;

/**
 * Tests if the specified id is reserved.
 * @param {Array.<number[]|string>|undefined} reserved Array of reserved ranges and names
 * @param {number} id Id to test
 * @returns {boolean} `true` if reserved, otherwise `false`
 */
Namespace.isReservedId = function isReservedId(reserved, id) {
    if (reserved)
        for (var i = 0; i < reserved.length; ++i)
            if (typeof reserved[i] !== "string" && reserved[i][0] <= id && reserved[i][1] >= id)
                return true;
    return false;
};

/**
 * Tests if the specified name is reserved.
 * @param {Array.<number[]|string>|undefined} reserved Array of reserved ranges and names
 * @param {string} name Name to test
 * @returns {boolean} `true` if reserved, otherwise `false`
 */
Namespace.isReservedName = function isReservedName(reserved, name) {
    if (reserved)
        for (var i = 0; i < reserved.length; ++i)
            if (reserved[i] === name)
                return true;
    return false;
};

/**
 * Not an actual constructor. Use {@link Namespace} instead.
 * @classdesc Base class of all reflection objects containing nested objects. This is not an actual class but here for the sake of having consistent type definitions.
 * @exports NamespaceBase
 * @extends ReflectionObject
 * @abstract
 * @constructor
 * @param {string} name Namespace name
 * @param {Object.<string,*>} [options] Declared options
 * @see {@link Namespace}
 */
function Namespace(name, options) {
    ReflectionObject.call(this, name, options);

    /**
     * Nested objects by name.
     * @type {Object.<string,ReflectionObject>|undefined}
     */
    this.nested = undefined; // toJSON

    /**
     * Cached nested objects as an array.
     * @type {ReflectionObject[]|null}
     * @private
     */
    this._nestedArray = null;
}

function clearCache(namespace) {
    namespace._nestedArray = null;
    return namespace;
}

/**
 * Nested objects of this namespace as an array for iteration.
 * @name NamespaceBase#nestedArray
 * @type {ReflectionObject[]}
 * @readonly
 */
Object.defineProperty(Namespace.prototype, "nestedArray", {
    get: function() {
        return this._nestedArray || (this._nestedArray = util.toArray(this.nested));
    }
});

/**
 * Namespace descriptor.
 * @interface INamespace
 * @property {Object.<string,*>} [options] Namespace options
 * @property {Object.<string,AnyNestedObject>} [nested] Nested object descriptors
 */

/**
 * Any extension field descriptor.
 * @typedef AnyExtensionField
 * @type {IExtensionField|IExtensionMapField}
 */

/**
 * Any nested object descriptor.
 * @typedef AnyNestedObject
 * @type {IEnum|IType|IService|AnyExtensionField|INamespace}
 */
// ^ BEWARE: VSCode hangs forever when using more than 5 types (that's why AnyExtensionField exists in the first place)

/**
 * Converts this namespace to a namespace descriptor.
 * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
 * @returns {INamespace} Namespace descriptor
 */
Namespace.prototype.toJSON = function toJSON(toJSONOptions) {
    return util.toObject([
        "options" , this.options,
        "nested"  , arrayToJSON(this.nestedArray, toJSONOptions)
    ]);
};

/**
 * Adds nested objects to this namespace from nested object descriptors.
 * @param {Object.<string,AnyNestedObject>} nestedJson Any nested object descriptors
 * @returns {Namespace} `this`
 */
Namespace.prototype.addJSON = function addJSON(nestedJson) {
    var ns = this;
    /* istanbul ignore else */
    if (nestedJson) {
        for (var names = Object.keys(nestedJson), i = 0, nested; i < names.length; ++i) {
            nested = nestedJson[names[i]];
            ns.add( // most to least likely
                ( nested.fields !== undefined
                ? Type.fromJSON
                : nested.values !== undefined
                ? Enum.fromJSON
                : nested.methods !== undefined
                ? Service.fromJSON
                : nested.id !== undefined
                ? Field.fromJSON
                : Namespace.fromJSON )(names[i], nested)
            );
        }
    }
    return this;
};

/**
 * Gets the nested object of the specified name.
 * @param {string} name Nested object name
 * @returns {ReflectionObject|null} The reflection object or `null` if it doesn't exist
 */
Namespace.prototype.get = function get(name) {
    return this.nested && this.nested[name]
        || null;
};

/**
 * Gets the values of the nested {@link Enum|enum} of the specified name.
 * This methods differs from {@link Namespace#get|get} in that it returns an enum's values directly and throws instead of returning `null`.
 * @param {string} name Nested enum name
 * @returns {Object.<string,number>} Enum values
 * @throws {Error} If there is no such enum
 */
Namespace.prototype.getEnum = function getEnum(name) {
    if (this.nested && this.nested[name] instanceof Enum)
        return this.nested[name].values;
    throw Error("no such enum: " + name);
};

/**
 * Adds a nested object to this namespace.
 * @param {ReflectionObject} object Nested object to add
 * @returns {Namespace} `this`
 * @throws {TypeError} If arguments are invalid
 * @throws {Error} If there is already a nested object with this name
 */
Namespace.prototype.add = function add(object) {

    if (!(object instanceof Field && object.extend !== undefined || object instanceof Type || object instanceof Enum || object instanceof Service || object instanceof Namespace))
        throw TypeError("object must be a valid nested object");

    if (!this.nested)
        this.nested = {};
    else {
        var prev = this.get(object.name);
        if (prev) {
            if (prev instanceof Namespace && object instanceof Namespace && !(prev instanceof Type || prev instanceof Service)) {
                // replace plain namespace but keep existing nested elements and options
                var nested = prev.nestedArray;
                for (var i = 0; i < nested.length; ++i)
                    object.add(nested[i]);
                this.remove(prev);
                if (!this.nested)
                    this.nested = {};
                object.setOptions(prev.options, true);

            } else
                throw Error("duplicate name '" + object.name + "' in " + this);
        }
    }
    this.nested[object.name] = object;
    object.onAdd(this);
    return clearCache(this);
};

/**
 * Removes a nested object from this namespace.
 * @param {ReflectionObject} object Nested object to remove
 * @returns {Namespace} `this`
 * @throws {TypeError} If arguments are invalid
 * @throws {Error} If `object` is not a member of this namespace
 */
Namespace.prototype.remove = function remove(object) {

    if (!(object instanceof ReflectionObject))
        throw TypeError("object must be a ReflectionObject");
    if (object.parent !== this)
        throw Error(object + " is not a member of " + this);

    delete this.nested[object.name];
    if (!Object.keys(this.nested).length)
        this.nested = undefined;

    object.onRemove(this);
    return clearCache(this);
};

/**
 * Defines additial namespaces within this one if not yet existing.
 * @param {string|string[]} path Path to create
 * @param {*} [json] Nested types to create from JSON
 * @returns {Namespace} Pointer to the last namespace created or `this` if path is empty
 */
Namespace.prototype.define = function define(path, json) {

    if (util.isString(path))
        path = path.split(".");
    else if (!Array.isArray(path))
        throw TypeError("illegal path");
    if (path && path.length && path[0] === "")
        throw Error("path must be relative");

    var ptr = this;
    while (path.length > 0) {
        var part = path.shift();
        if (ptr.nested && ptr.nested[part]) {
            ptr = ptr.nested[part];
            if (!(ptr instanceof Namespace))
                throw Error("path conflicts with non-namespace objects");
        } else
            ptr.add(ptr = new Namespace(part));
    }
    if (json)
        ptr.addJSON(json);
    return ptr;
};

/**
 * Resolves this namespace's and all its nested objects' type references. Useful to validate a reflection tree, but comes at a cost.
 * @returns {Namespace} `this`
 */
Namespace.prototype.resolveAll = function resolveAll() {
    var nested = this.nestedArray, i = 0;
    while (i < nested.length)
        if (nested[i] instanceof Namespace)
            nested[i++].resolveAll();
        else
            nested[i++].resolve();
    return this.resolve();
};

/**
 * Recursively looks up the reflection object matching the specified path in the scope of this namespace.
 * @param {string|string[]} path Path to look up
 * @param {*|Array.<*>} filterTypes Filter types, any combination of the constructors of `protobuf.Type`, `protobuf.Enum`, `protobuf.Service` etc.
 * @param {boolean} [parentAlreadyChecked=false] If known, whether the parent has already been checked
 * @returns {ReflectionObject|null} Looked up object or `null` if none could be found
 */
Namespace.prototype.lookup = function lookup(path, filterTypes, parentAlreadyChecked) {

    /* istanbul ignore next */
    if (typeof filterTypes === "boolean") {
        parentAlreadyChecked = filterTypes;
        filterTypes = undefined;
    } else if (filterTypes && !Array.isArray(filterTypes))
        filterTypes = [ filterTypes ];

    if (util.isString(path) && path.length) {
        if (path === ".")
            return this.root;
        path = path.split(".");
    } else if (!path.length)
        return this;

    // Start at root if path is absolute
    if (path[0] === "")
        return this.root.lookup(path.slice(1), filterTypes);

    // Test if the first part matches any nested object, and if so, traverse if path contains more
    var found = this.get(path[0]);
    if (found) {
        if (path.length === 1) {
            if (!filterTypes || filterTypes.indexOf(found.constructor) > -1)
                return found;
        } else if (found instanceof Namespace && (found = found.lookup(path.slice(1), filterTypes, true)))
            return found;

    // Otherwise try each nested namespace
    } else
        for (var i = 0; i < this.nestedArray.length; ++i)
            if (this._nestedArray[i] instanceof Namespace && (found = this._nestedArray[i].lookup(path, filterTypes, true)))
                return found;

    // If there hasn't been a match, try again at the parent
    if (this.parent === null || parentAlreadyChecked)
        return null;
    return this.parent.lookup(path, filterTypes);
};

/**
 * Looks up the reflection object at the specified path, relative to this namespace.
 * @name NamespaceBase#lookup
 * @function
 * @param {string|string[]} path Path to look up
 * @param {boolean} [parentAlreadyChecked=false] Whether the parent has already been checked
 * @returns {ReflectionObject|null} Looked up object or `null` if none could be found
 * @variation 2
 */
// lookup(path: string, [parentAlreadyChecked: boolean])

/**
 * Looks up the {@link Type|type} at the specified path, relative to this namespace.
 * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.
 * @param {string|string[]} path Path to look up
 * @returns {Type} Looked up type
 * @throws {Error} If `path` does not point to a type
 */
Namespace.prototype.lookupType = function lookupType(path) {
    var found = this.lookup(path, [ Type ]);
    if (!found)
        throw Error("no such type: " + path);
    return found;
};

/**
 * Looks up the values of the {@link Enum|enum} at the specified path, relative to this namespace.
 * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.
 * @param {string|string[]} path Path to look up
 * @returns {Enum} Looked up enum
 * @throws {Error} If `path` does not point to an enum
 */
Namespace.prototype.lookupEnum = function lookupEnum(path) {
    var found = this.lookup(path, [ Enum ]);
    if (!found)
        throw Error("no such Enum '" + path + "' in " + this);
    return found;
};

/**
 * Looks up the {@link Type|type} or {@link Enum|enum} at the specified path, relative to this namespace.
 * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.
 * @param {string|string[]} path Path to look up
 * @returns {Type} Looked up type or enum
 * @throws {Error} If `path` does not point to a type or enum
 */
Namespace.prototype.lookupTypeOrEnum = function lookupTypeOrEnum(path) {
    var found = this.lookup(path, [ Type, Enum ]);
    if (!found)
        throw Error("no such Type or Enum '" + path + "' in " + this);
    return found;
};

/**
 * Looks up the {@link Service|service} at the specified path, relative to this namespace.
 * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.
 * @param {string|string[]} path Path to look up
 * @returns {Service} Looked up service
 * @throws {Error} If `path` does not point to a service
 */
Namespace.prototype.lookupService = function lookupService(path) {
    var found = this.lookup(path, [ Service ]);
    if (!found)
        throw Error("no such Service '" + path + "' in " + this);
    return found;
};

// Sets up cyclic dependencies (called in index-light)
Namespace._configure = function(Type_, Service_, Enum_) {
    Type    = Type_;
    Service = Service_;
    Enum    = Enum_;
};

},{"./field":17,"./object":25,"./util":38}],25:[function(require,module,exports){
"use strict";
module.exports = ReflectionObject;

ReflectionObject.className = "ReflectionObject";

var util = require("./util");

var Root; // cyclic

/**
 * Constructs a new reflection object instance.
 * @classdesc Base class of all reflection objects.
 * @constructor
 * @param {string} name Object name
 * @param {Object.<string,*>} [options] Declared options
 * @abstract
 */
function ReflectionObject(name, options) {

    if (!util.isString(name))
        throw TypeError("name must be a string");

    if (options && !util.isObject(options))
        throw TypeError("options must be an object");

    /**
     * Options.
     * @type {Object.<string,*>|undefined}
     */
    this.options = options; // toJSON

    /**
     * Unique name within its namespace.
     * @type {string}
     */
    this.name = name;

    /**
     * Parent namespace.
     * @type {Namespace|null}
     */
    this.parent = null;

    /**
     * Whether already resolved or not.
     * @type {boolean}
     */
    this.resolved = false;

    /**
     * Comment text, if any.
     * @type {string|null}
     */
    this.comment = null;

    /**
     * Defining file name.
     * @type {string|null}
     */
    this.filename = null;
}

Object.defineProperties(ReflectionObject.prototype, {

    /**
     * Reference to the root namespace.
     * @name ReflectionObject#root
     * @type {Root}
     * @readonly
     */
    root: {
        get: function() {
            var ptr = this;
            while (ptr.parent !== null)
                ptr = ptr.parent;
            return ptr;
        }
    },

    /**
     * Full name including leading dot.
     * @name ReflectionObject#fullName
     * @type {string}
     * @readonly
     */
    fullName: {
        get: function() {
            var path = [ this.name ],
                ptr = this.parent;
            while (ptr) {
                path.unshift(ptr.name);
                ptr = ptr.parent;
            }
            return path.join(".");
        }
    }
});

/**
 * Converts this reflection object to its descriptor representation.
 * @returns {Object.<string,*>} Descriptor
 * @abstract
 */
ReflectionObject.prototype.toJSON = /* istanbul ignore next */ function toJSON() {
    throw Error(); // not implemented, shouldn't happen
};

/**
 * Called when this object is added to a parent.
 * @param {ReflectionObject} parent Parent added to
 * @returns {undefined}
 */
ReflectionObject.prototype.onAdd = function onAdd(parent) {
    if (this.parent && this.parent !== parent)
        this.parent.remove(this);
    this.parent = parent;
    this.resolved = false;
    var root = parent.root;
    if (root instanceof Root)
        root._handleAdd(this);
};

/**
 * Called when this object is removed from a parent.
 * @param {ReflectionObject} parent Parent removed from
 * @returns {undefined}
 */
ReflectionObject.prototype.onRemove = function onRemove(parent) {
    var root = parent.root;
    if (root instanceof Root)
        root._handleRemove(this);
    this.parent = null;
    this.resolved = false;
};

/**
 * Resolves this objects type references.
 * @returns {ReflectionObject} `this`
 */
ReflectionObject.prototype.resolve = function resolve() {
    if (this.resolved)
        return this;
    if (this.root instanceof Root)
        this.resolved = true; // only if part of a root
    return this;
};

/**
 * Gets an option value.
 * @param {string} name Option name
 * @returns {*} Option value or `undefined` if not set
 */
ReflectionObject.prototype.getOption = function getOption(name) {
    if (this.options)
        return this.options[name];
    return undefined;
};

/**
 * Sets an option.
 * @param {string} name Option name
 * @param {*} value Option value
 * @param {boolean} [ifNotSet] Sets the option only if it isn't currently set
 * @returns {ReflectionObject} `this`
 */
ReflectionObject.prototype.setOption = function setOption(name, value, ifNotSet) {
    if (!ifNotSet || !this.options || this.options[name] === undefined)
        (this.options || (this.options = {}))[name] = value;
    return this;
};

/**
 * Sets multiple options.
 * @param {Object.<string,*>} options Options to set
 * @param {boolean} [ifNotSet] Sets an option only if it isn't currently set
 * @returns {ReflectionObject} `this`
 */
ReflectionObject.prototype.setOptions = function setOptions(options, ifNotSet) {
    if (options)
        for (var keys = Object.keys(options), i = 0; i < keys.length; ++i)
            this.setOption(keys[i], options[keys[i]], ifNotSet);
    return this;
};

/**
 * Converts this instance to its string representation.
 * @returns {string} Class name[, space, full name]
 */
ReflectionObject.prototype.toString = function toString() {
    var className = this.constructor.className,
        fullName  = this.fullName;
    if (fullName.length)
        return className + " " + fullName;
    return className;
};

// Sets up cyclic dependencies (called in index-light)
ReflectionObject._configure = function(Root_) {
    Root = Root_;
};

},{"./util":38}],26:[function(require,module,exports){
"use strict";
module.exports = OneOf;

// extends ReflectionObject
var ReflectionObject = require("./object");
((OneOf.prototype = Object.create(ReflectionObject.prototype)).constructor = OneOf).className = "OneOf";

var Field = require("./field"),
    util  = require("./util");

/**
 * Constructs a new oneof instance.
 * @classdesc Reflected oneof.
 * @extends ReflectionObject
 * @constructor
 * @param {string} name Oneof name
 * @param {string[]|Object.<string,*>} [fieldNames] Field names
 * @param {Object.<string,*>} [options] Declared options
 * @param {string} [comment] Comment associated with this field
 */
function OneOf(name, fieldNames, options, comment) {
    if (!Array.isArray(fieldNames)) {
        options = fieldNames;
        fieldNames = undefined;
    }
    ReflectionObject.call(this, name, options);

    /* istanbul ignore if */
    if (!(fieldNames === undefined || Array.isArray(fieldNames)))
        throw TypeError("fieldNames must be an Array");

    /**
     * Field names that belong to this oneof.
     * @type {string[]}
     */
    this.oneof = fieldNames || []; // toJSON, marker

    /**
     * Fields that belong to this oneof as an array for iteration.
     * @type {Field[]}
     * @readonly
     */
    this.fieldsArray = []; // declared readonly for conformance, possibly not yet added to parent

    /**
     * Comment for this field.
     * @type {string|null}
     */
    this.comment = comment;
}

/**
 * Oneof descriptor.
 * @interface IOneOf
 * @property {Array.<string>} oneof Oneof field names
 * @property {Object.<string,*>} [options] Oneof options
 */

/**
 * Constructs a oneof from a oneof descriptor.
 * @param {string} name Oneof name
 * @param {IOneOf} json Oneof descriptor
 * @returns {OneOf} Created oneof
 * @throws {TypeError} If arguments are invalid
 */
OneOf.fromJSON = function fromJSON(name, json) {
    return new OneOf(name, json.oneof, json.options, json.comment);
};

/**
 * Converts this oneof to a oneof descriptor.
 * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
 * @returns {IOneOf} Oneof descriptor
 */
OneOf.prototype.toJSON = function toJSON(toJSONOptions) {
    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
    return util.toObject([
        "options" , this.options,
        "oneof"   , this.oneof,
        "comment" , keepComments ? this.comment : undefined
    ]);
};

/**
 * Adds the fields of the specified oneof to the parent if not already done so.
 * @param {OneOf} oneof The oneof
 * @returns {undefined}
 * @inner
 * @ignore
 */
function addFieldsToParent(oneof) {
    if (oneof.parent)
        for (var i = 0; i < oneof.fieldsArray.length; ++i)
            if (!oneof.fieldsArray[i].parent)
                oneof.parent.add(oneof.fieldsArray[i]);
}

/**
 * Adds a field to this oneof and removes it from its current parent, if any.
 * @param {Field} field Field to add
 * @returns {OneOf} `this`
 */
OneOf.prototype.add = function add(field) {

    /* istanbul ignore if */
    if (!(field instanceof Field))
        throw TypeError("field must be a Field");

    if (field.parent && field.parent !== this.parent)
        field.parent.remove(field);
    this.oneof.push(field.name);
    this.fieldsArray.push(field);
    field.partOf = this; // field.parent remains null
    addFieldsToParent(this);
    return this;
};

/**
 * Removes a field from this oneof and puts it back to the oneof's parent.
 * @param {Field} field Field to remove
 * @returns {OneOf} `this`
 */
OneOf.prototype.remove = function remove(field) {

    /* istanbul ignore if */
    if (!(field instanceof Field))
        throw TypeError("field must be a Field");

    var index = this.fieldsArray.indexOf(field);

    /* istanbul ignore if */
    if (index < 0)
        throw Error(field + " is not a member of " + this);

    this.fieldsArray.splice(index, 1);
    index = this.oneof.indexOf(field.name);

    /* istanbul ignore else */
    if (index > -1) // theoretical
        this.oneof.splice(index, 1);

    field.partOf = null;
    return this;
};

/**
 * @override
 */
OneOf.prototype.onAdd = function onAdd(parent) {
    ReflectionObject.prototype.onAdd.call(this, parent);
    var self = this;
    // Collect present fields
    for (var i = 0; i < this.oneof.length; ++i) {
        var field = parent.get(this.oneof[i]);
        if (field && !field.partOf) {
            field.partOf = self;
            self.fieldsArray.push(field);
        }
    }
    // Add not yet present fields
    addFieldsToParent(this);
};

/**
 * @override
 */
OneOf.prototype.onRemove = function onRemove(parent) {
    for (var i = 0, field; i < this.fieldsArray.length; ++i)
        if ((field = this.fieldsArray[i]).parent)
            field.parent.remove(field);
    ReflectionObject.prototype.onRemove.call(this, parent);
};

/**
 * Decorator function as returned by {@link OneOf.d} (TypeScript).
 * @typedef OneOfDecorator
 * @type {function}
 * @param {Object} prototype Target prototype
 * @param {string} oneofName OneOf name
 * @returns {undefined}
 */

/**
 * OneOf decorator (TypeScript).
 * @function
 * @param {...string} fieldNames Field names
 * @returns {OneOfDecorator} Decorator function
 * @template T extends string
 */
OneOf.d = function decorateOneOf() {
    var fieldNames = new Array(arguments.length),
        index = 0;
    while (index < arguments.length)
        fieldNames[index] = arguments[index++];
    return function oneOfDecorator(prototype, oneofName) {
        util.decorateType(prototype.constructor)
            .add(new OneOf(oneofName, fieldNames));
        Object.defineProperty(prototype, oneofName, {
            get: util.oneOfGetter(fieldNames),
            set: util.oneOfSetter(fieldNames)
        });
    };
};

},{"./field":17,"./object":25,"./util":38}],27:[function(require,module,exports){
"use strict";
module.exports = parse;

parse.filename = null;
parse.defaults = { keepCase: false };

var tokenize  = require("./tokenize"),
    Root      = require("./root"),
    Type      = require("./type"),
    Field     = require("./field"),
    MapField  = require("./mapfield"),
    OneOf     = require("./oneof"),
    Enum      = require("./enum"),
    Service   = require("./service"),
    Method    = require("./method"),
    types     = require("./types"),
    util      = require("./util");

var base10Re    = /^[1-9][0-9]*$/,
    base10NegRe = /^-?[1-9][0-9]*$/,
    base16Re    = /^0[x][0-9a-fA-F]+$/,
    base16NegRe = /^-?0[x][0-9a-fA-F]+$/,
    base8Re     = /^0[0-7]+$/,
    base8NegRe  = /^-?0[0-7]+$/,
    numberRe    = /^(?![eE])[0-9]*(?:\.[0-9]*)?(?:[eE][+-]?[0-9]+)?$/,
    nameRe      = /^[a-zA-Z_][a-zA-Z_0-9]*$/,
    typeRefRe   = /^(?:\.?[a-zA-Z_][a-zA-Z_0-9]*)(?:\.[a-zA-Z_][a-zA-Z_0-9]*)*$/,
    fqTypeRefRe = /^(?:\.[a-zA-Z_][a-zA-Z_0-9]*)+$/;

/**
 * Result object returned from {@link parse}.
 * @interface IParserResult
 * @property {string|undefined} package Package name, if declared
 * @property {string[]|undefined} imports Imports, if any
 * @property {string[]|undefined} weakImports Weak imports, if any
 * @property {string|undefined} syntax Syntax, if specified (either `"proto2"` or `"proto3"`)
 * @property {Root} root Populated root instance
 */

/**
 * Options modifying the behavior of {@link parse}.
 * @interface IParseOptions
 * @property {boolean} [keepCase=false] Keeps field casing instead of converting to camel case
 * @property {boolean} [alternateCommentMode=false] Recognize double-slash comments in addition to doc-block comments.
 */

/**
 * Options modifying the behavior of JSON serialization.
 * @interface IToJSONOptions
 * @property {boolean} [keepComments=false] Serializes comments.
 */

/**
 * Parses the given .proto source and returns an object with the parsed contents.
 * @param {string} source Source contents
 * @param {Root} root Root to populate
 * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.
 * @returns {IParserResult} Parser result
 * @property {string} filename=null Currently processing file name for error reporting, if known
 * @property {IParseOptions} defaults Default {@link IParseOptions}
 */
function parse(source, root, options) {
    /* eslint-disable callback-return */
    if (!(root instanceof Root)) {
        options = root;
        root = new Root();
    }
    if (!options)
        options = parse.defaults;

    var tn = tokenize(source, options.alternateCommentMode || false),
        next = tn.next,
        push = tn.push,
        peek = tn.peek,
        skip = tn.skip,
        cmnt = tn.cmnt;

    var head = true,
        pkg,
        imports,
        weakImports,
        syntax,
        isProto3 = false;

    var ptr = root;

    var applyCase = options.keepCase ? function(name) { return name; } : util.camelCase;

    /* istanbul ignore next */
    function illegal(token, name, insideTryCatch) {
        var filename = parse.filename;
        if (!insideTryCatch)
            parse.filename = null;
        return Error("illegal " + (name || "token") + " '" + token + "' (" + (filename ? filename + ", " : "") + "line " + tn.line + ")");
    }

    function readString() {
        var values = [],
            token;
        do {
            /* istanbul ignore if */
            if ((token = next()) !== "\"" && token !== "'")
                throw illegal(token);

            values.push(next());
            skip(token);
            token = peek();
        } while (token === "\"" || token === "'");
        return values.join("");
    }

    function readValue(acceptTypeRef) {
        var token = next();
        switch (token) {
            case "'":
            case "\"":
                push(token);
                return readString();
            case "true": case "TRUE":
                return true;
            case "false": case "FALSE":
                return false;
        }
        try {
            return parseNumber(token, /* insideTryCatch */ true);
        } catch (e) {

            /* istanbul ignore else */
            if (acceptTypeRef && typeRefRe.test(token))
                return token;

            /* istanbul ignore next */
            throw illegal(token, "value");
        }
    }

    function readRanges(target, acceptStrings) {
        var token, start;
        do {
            if (acceptStrings && ((token = peek()) === "\"" || token === "'"))
                target.push(readString());
            else
                target.push([ start = parseId(next()), skip("to", true) ? parseId(next()) : start ]);
        } while (skip(",", true));
        skip(";");
    }

    function parseNumber(token, insideTryCatch) {
        var sign = 1;
        if (token.charAt(0) === "-") {
            sign = -1;
            token = token.substring(1);
        }
        switch (token) {
            case "inf": case "INF": case "Inf":
                return sign * Infinity;
            case "nan": case "NAN": case "Nan": case "NaN":
                return NaN;
            case "0":
                return 0;
        }
        if (base10Re.test(token))
            return sign * parseInt(token, 10);
        if (base16Re.test(token))
            return sign * parseInt(token, 16);
        if (base8Re.test(token))
            return sign * parseInt(token, 8);

        /* istanbul ignore else */
        if (numberRe.test(token))
            return sign * parseFloat(token);

        /* istanbul ignore next */
        throw illegal(token, "number", insideTryCatch);
    }

    function parseId(token, acceptNegative) {
        switch (token) {
            case "max": case "MAX": case "Max":
                return 536870911;
            case "0":
                return 0;
        }

        /* istanbul ignore if */
        if (!acceptNegative && token.charAt(0) === "-")
            throw illegal(token, "id");

        if (base10NegRe.test(token))
            return parseInt(token, 10);
        if (base16NegRe.test(token))
            return parseInt(token, 16);

        /* istanbul ignore else */
        if (base8NegRe.test(token))
            return parseInt(token, 8);

        /* istanbul ignore next */
        throw illegal(token, "id");
    }

    function parsePackage() {

        /* istanbul ignore if */
        if (pkg !== undefined)
            throw illegal("package");

        pkg = next();

        /* istanbul ignore if */
        if (!typeRefRe.test(pkg))
            throw illegal(pkg, "name");

        ptr = ptr.define(pkg);
        skip(";");
    }

    function parseImport() {
        var token = peek();
        var whichImports;
        switch (token) {
            case "weak":
                whichImports = weakImports || (weakImports = []);
                next();
                break;
            case "public":
                next();
                // eslint-disable-line no-fallthrough
            default:
                whichImports = imports || (imports = []);
                break;
        }
        token = readString();
        skip(";");
        whichImports.push(token);
    }

    function parseSyntax() {
        skip("=");
        syntax = readString();
        isProto3 = syntax === "proto3";

        /* istanbul ignore if */
        if (!isProto3 && syntax !== "proto2")
            throw illegal(syntax, "syntax");

        skip(";");
    }

    function parseCommon(parent, token) {
        switch (token) {

            case "option":
                parseOption(parent, token);
                skip(";");
                return true;

            case "message":
                parseType(parent, token);
                return true;

            case "enum":
                parseEnum(parent, token);
                return true;

            case "service":
                parseService(parent, token);
                return true;

            case "extend":
                parseExtension(parent, token);
                return true;
        }
        return false;
    }

    function ifBlock(obj, fnIf, fnElse) {
        var trailingLine = tn.line;
        if (obj) {
            obj.comment = cmnt(); // try block-type comment
            obj.filename = parse.filename;
        }
        if (skip("{", true)) {
            var token;
            while ((token = next()) !== "}")
                fnIf(token);
            skip(";", true);
        } else {
            if (fnElse)
                fnElse();
            skip(";");
            if (obj && typeof obj.comment !== "string")
                obj.comment = cmnt(trailingLine); // try line-type comment if no block
        }
    }

    function parseType(parent, token) {

        /* istanbul ignore if */
        if (!nameRe.test(token = next()))
            throw illegal(token, "type name");

        var type = new Type(token);
        ifBlock(type, function parseType_block(token) {
            if (parseCommon(type, token))
                return;

            switch (token) {

                case "map":
                    parseMapField(type, token);
                    break;

                case "required":
                case "optional":
                case "repeated":
                    parseField(type, token);
                    break;

                case "oneof":
                    parseOneOf(type, token);
                    break;

                case "extensions":
                    readRanges(type.extensions || (type.extensions = []));
                    break;

                case "reserved":
                    readRanges(type.reserved || (type.reserved = []), true);
                    break;

                default:
                    /* istanbul ignore if */
                    if (!isProto3 || !typeRefRe.test(token))
                        throw illegal(token);

                    push(token);
                    parseField(type, "optional");
                    break;
            }
        });
        parent.add(type);
    }

    function parseField(parent, rule, extend) {
        var type = next();
        if (type === "group") {
            parseGroup(parent, rule);
            return;
        }

        /* istanbul ignore if */
        if (!typeRefRe.test(type))
            throw illegal(type, "type");

        var name = next();

        /* istanbul ignore if */
        if (!nameRe.test(name))
            throw illegal(name, "name");

        name = applyCase(name);
        skip("=");

        var field = new Field(name, parseId(next()), type, rule, extend);
        ifBlock(field, function parseField_block(token) {

            /* istanbul ignore else */
            if (token === "option") {
                parseOption(field, token);
                skip(";");
            } else
                throw illegal(token);

        }, function parseField_line() {
            parseInlineOptions(field);
        });
        parent.add(field);

        // JSON defaults to packed=true if not set so we have to set packed=false explicity when
        // parsing proto2 descriptors without the option, where applicable. This must be done for
        // all known packable types and anything that could be an enum (= is not a basic type).
        if (!isProto3 && field.repeated && (types.packed[type] !== undefined || types.basic[type] === undefined))
            field.setOption("packed", false, /* ifNotSet */ true);
    }

    function parseGroup(parent, rule) {
        var name = next();

        /* istanbul ignore if */
        if (!nameRe.test(name))
            throw illegal(name, "name");

        var fieldName = util.lcFirst(name);
        if (name === fieldName)
            name = util.ucFirst(name);
        skip("=");
        var id = parseId(next());
        var type = new Type(name);
        type.group = true;
        var field = new Field(fieldName, id, name, rule);
        field.filename = parse.filename;
        ifBlock(type, function parseGroup_block(token) {
            switch (token) {

                case "option":
                    parseOption(type, token);
                    skip(";");
                    break;

                case "required":
                case "optional":
                case "repeated":
                    parseField(type, token);
                    break;

                /* istanbul ignore next */
                default:
                    throw illegal(token); // there are no groups with proto3 semantics
            }
        });
        parent.add(type)
              .add(field);
    }

    function parseMapField(parent) {
        skip("<");
        var keyType = next();

        /* istanbul ignore if */
        if (types.mapKey[keyType] === undefined)
            throw illegal(keyType, "type");

        skip(",");
        var valueType = next();

        /* istanbul ignore if */
        if (!typeRefRe.test(valueType))
            throw illegal(valueType, "type");

        skip(">");
        var name = next();

        /* istanbul ignore if */
        if (!nameRe.test(name))
            throw illegal(name, "name");

        skip("=");
        var field = new MapField(applyCase(name), parseId(next()), keyType, valueType);
        ifBlock(field, function parseMapField_block(token) {

            /* istanbul ignore else */
            if (token === "option") {
                parseOption(field, token);
                skip(";");
            } else
                throw illegal(token);

        }, function parseMapField_line() {
            parseInlineOptions(field);
        });
        parent.add(field);
    }

    function parseOneOf(parent, token) {

        /* istanbul ignore if */
        if (!nameRe.test(token = next()))
            throw illegal(token, "name");

        var oneof = new OneOf(applyCase(token));
        ifBlock(oneof, function parseOneOf_block(token) {
            if (token === "option") {
                parseOption(oneof, token);
                skip(";");
            } else {
                push(token);
                parseField(oneof, "optional");
            }
        });
        parent.add(oneof);
    }

    function parseEnum(parent, token) {

        /* istanbul ignore if */
        if (!nameRe.test(token = next()))
            throw illegal(token, "name");

        var enm = new Enum(token);
        ifBlock(enm, function parseEnum_block(token) {
          switch(token) {
            case "option":
              parseOption(enm, token);
              skip(";");
              break;

            case "reserved":
              readRanges(enm.reserved || (enm.reserved = []), true);
              break;

            default:
              parseEnumValue(enm, token);
          }
        });
        parent.add(enm);
    }

    function parseEnumValue(parent, token) {

        /* istanbul ignore if */
        if (!nameRe.test(token))
            throw illegal(token, "name");

        skip("=");
        var value = parseId(next(), true),
            dummy = {};
        ifBlock(dummy, function parseEnumValue_block(token) {

            /* istanbul ignore else */
            if (token === "option") {
                parseOption(dummy, token); // skip
                skip(";");
            } else
                throw illegal(token);

        }, function parseEnumValue_line() {
            parseInlineOptions(dummy); // skip
        });
        parent.add(token, value, dummy.comment);
    }

    function parseOption(parent, token) {
        var isCustom = skip("(", true);

        /* istanbul ignore if */
        if (!typeRefRe.test(token = next()))
            throw illegal(token, "name");

        var name = token;
        if (isCustom) {
            skip(")");
            name = "(" + name + ")";
            token = peek();
            if (fqTypeRefRe.test(token)) {
                name += token;
                next();
            }
        }
        skip("=");
        parseOptionValue(parent, name);
    }

    function parseOptionValue(parent, name) {
        if (skip("{", true)) { // { a: "foo" b { c: "bar" } }
            do {
                /* istanbul ignore if */
                if (!nameRe.test(token = next()))
                    throw illegal(token, "name");

                if (peek() === "{")
                    parseOptionValue(parent, name + "." + token);
                else {
                    skip(":");
                    if (peek() === "{")
                        parseOptionValue(parent, name + "." + token);
                    else
                        setOption(parent, name + "." + token, readValue(true));
                }
                skip(",", true);
            } while (!skip("}", true));
        } else
            setOption(parent, name, readValue(true));
        // Does not enforce a delimiter to be universal
    }

    function setOption(parent, name, value) {
        if (parent.setOption)
            parent.setOption(name, value);
    }

    function parseInlineOptions(parent) {
        if (skip("[", true)) {
            do {
                parseOption(parent, "option");
            } while (skip(",", true));
            skip("]");
        }
        return parent;
    }

    function parseService(parent, token) {

        /* istanbul ignore if */
        if (!nameRe.test(token = next()))
            throw illegal(token, "service name");

        var service = new Service(token);
        ifBlock(service, function parseService_block(token) {
            if (parseCommon(service, token))
                return;

            /* istanbul ignore else */
            if (token === "rpc")
                parseMethod(service, token);
            else
                throw illegal(token);
        });
        parent.add(service);
    }

    function parseMethod(parent, token) {
        var type = token;

        /* istanbul ignore if */
        if (!nameRe.test(token = next()))
            throw illegal(token, "name");

        var name = token,
            requestType, requestStream,
            responseType, responseStream;

        skip("(");
        if (skip("stream", true))
            requestStream = true;

        /* istanbul ignore if */
        if (!typeRefRe.test(token = next()))
            throw illegal(token);

        requestType = token;
        skip(")"); skip("returns"); skip("(");
        if (skip("stream", true))
            responseStream = true;

        /* istanbul ignore if */
        if (!typeRefRe.test(token = next()))
            throw illegal(token);

        responseType = token;
        skip(")");

        var method = new Method(name, type, requestType, responseType, requestStream, responseStream);
        ifBlock(method, function parseMethod_block(token) {

            /* istanbul ignore else */
            if (token === "option") {
                parseOption(method, token);
                skip(";");
            } else
                throw illegal(token);

        });
        parent.add(method);
    }

    function parseExtension(parent, token) {

        /* istanbul ignore if */
        if (!typeRefRe.test(token = next()))
            throw illegal(token, "reference");

        var reference = token;
        ifBlock(null, function parseExtension_block(token) {
            switch (token) {

                case "required":
                case "repeated":
                case "optional":
                    parseField(parent, token, reference);
                    break;

                default:
                    /* istanbul ignore if */
                    if (!isProto3 || !typeRefRe.test(token))
                        throw illegal(token);
                    push(token);
                    parseField(parent, "optional", reference);
                    break;
            }
        });
    }

    var token;
    while ((token = next()) !== null) {
        switch (token) {

            case "package":

                /* istanbul ignore if */
                if (!head)
                    throw illegal(token);

                parsePackage();
                break;

            case "import":

                /* istanbul ignore if */
                if (!head)
                    throw illegal(token);

                parseImport();
                break;

            case "syntax":

                /* istanbul ignore if */
                if (!head)
                    throw illegal(token);

                parseSyntax();
                break;

            case "option":

                /* istanbul ignore if */
                if (!head)
                    throw illegal(token);

                parseOption(ptr, token);
                skip(";");
                break;

            default:

                /* istanbul ignore else */
                if (parseCommon(ptr, token)) {
                    head = false;
                    continue;
                }

                /* istanbul ignore next */
                throw illegal(token);
        }
    }

    parse.filename = null;
    return {
        "package"     : pkg,
        "imports"     : imports,
         weakImports  : weakImports,
         syntax       : syntax,
         root         : root
    };
}

/**
 * Parses the given .proto source and returns an object with the parsed contents.
 * @name parse
 * @function
 * @param {string} source Source contents
 * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.
 * @returns {IParserResult} Parser result
 * @property {string} filename=null Currently processing file name for error reporting, if known
 * @property {IParseOptions} defaults Default {@link IParseOptions}
 * @variation 2
 */

},{"./enum":16,"./field":17,"./mapfield":21,"./method":23,"./oneof":26,"./root":30,"./service":34,"./tokenize":35,"./type":36,"./types":37,"./util":38}],28:[function(require,module,exports){
"use strict";
module.exports = Reader;

var util      = require("./util/minimal");

var BufferReader; // cyclic

var LongBits  = util.LongBits,
    utf8      = util.utf8;

/* istanbul ignore next */
function indexOutOfRange(reader, writeLength) {
    return RangeError("index out of range: " + reader.pos + " + " + (writeLength || 1) + " > " + reader.len);
}

/**
 * Constructs a new reader instance using the specified buffer.
 * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.
 * @constructor
 * @param {Uint8Array} buffer Buffer to read from
 */
function Reader(buffer) {

    /**
     * Read buffer.
     * @type {Uint8Array}
     */
    this.buf = buffer;

    /**
     * Read buffer position.
     * @type {number}
     */
    this.pos = 0;

    /**
     * Read buffer length.
     * @type {number}
     */
    this.len = buffer.length;
}

var create_array = typeof Uint8Array !== "undefined"
    ? function create_typed_array(buffer) {
        if (buffer instanceof Uint8Array || Array.isArray(buffer))
            return new Reader(buffer);
        throw Error("illegal buffer");
    }
    /* istanbul ignore next */
    : function create_array(buffer) {
        if (Array.isArray(buffer))
            return new Reader(buffer);
        throw Error("illegal buffer");
    };

/**
 * Creates a new reader using the specified buffer.
 * @function
 * @param {Uint8Array|Buffer} buffer Buffer to read from
 * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}
 * @throws {Error} If `buffer` is not a valid buffer
 */
Reader.create = util.Buffer
    ? function create_buffer_setup(buffer) {
        return (Reader.create = function create_buffer(buffer) {
            return util.Buffer.isBuffer(buffer)
                ? new BufferReader(buffer)
                /* istanbul ignore next */
                : create_array(buffer);
        })(buffer);
    }
    /* istanbul ignore next */
    : create_array;

Reader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;

/**
 * Reads a varint as an unsigned 32 bit value.
 * @function
 * @returns {number} Value read
 */
Reader.prototype.uint32 = (function read_uint32_setup() {
    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)
    return function read_uint32() {
        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;
        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;
        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;
        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;
        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;

        /* istanbul ignore if */
        if ((this.pos += 5) > this.len) {
            this.pos = this.len;
            throw indexOutOfRange(this, 10);
        }
        return value;
    };
})();

/**
 * Reads a varint as a signed 32 bit value.
 * @returns {number} Value read
 */
Reader.prototype.int32 = function read_int32() {
    return this.uint32() | 0;
};

/**
 * Reads a zig-zag encoded varint as a signed 32 bit value.
 * @returns {number} Value read
 */
Reader.prototype.sint32 = function read_sint32() {
    var value = this.uint32();
    return value >>> 1 ^ -(value & 1) | 0;
};

/* eslint-disable no-invalid-this */

function readLongVarint() {
    // tends to deopt with local vars for octet etc.
    var bits = new LongBits(0, 0);
    var i = 0;
    if (this.len - this.pos > 4) { // fast route (lo)
        for (; i < 4; ++i) {
            // 1st..4th
            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;
            if (this.buf[this.pos++] < 128)
                return bits;
        }
        // 5th
        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;
        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;
        if (this.buf[this.pos++] < 128)
            return bits;
        i = 0;
    } else {
        for (; i < 3; ++i) {
            /* istanbul ignore if */
            if (this.pos >= this.len)
                throw indexOutOfRange(this);
            // 1st..3th
            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;
            if (this.buf[this.pos++] < 128)
                return bits;
        }
        // 4th
        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;
        return bits;
    }
    if (this.len - this.pos > 4) { // fast route (hi)
        for (; i < 5; ++i) {
            // 6th..10th
            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;
            if (this.buf[this.pos++] < 128)
                return bits;
        }
    } else {
        for (; i < 5; ++i) {
            /* istanbul ignore if */
            if (this.pos >= this.len)
                throw indexOutOfRange(this);
            // 6th..10th
            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;
            if (this.buf[this.pos++] < 128)
                return bits;
        }
    }
    /* istanbul ignore next */
    throw Error("invalid varint encoding");
}

/* eslint-enable no-invalid-this */

/**
 * Reads a varint as a signed 64 bit value.
 * @name Reader#int64
 * @function
 * @returns {Long} Value read
 */

/**
 * Reads a varint as an unsigned 64 bit value.
 * @name Reader#uint64
 * @function
 * @returns {Long} Value read
 */

/**
 * Reads a zig-zag encoded varint as a signed 64 bit value.
 * @name Reader#sint64
 * @function
 * @returns {Long} Value read
 */

/**
 * Reads a varint as a boolean.
 * @returns {boolean} Value read
 */
Reader.prototype.bool = function read_bool() {
    return this.uint32() !== 0;
};

function readFixed32_end(buf, end) { // note that this uses `end`, not `pos`
    return (buf[end - 4]
          | buf[end - 3] << 8
          | buf[end - 2] << 16
          | buf[end - 1] << 24) >>> 0;
}

/**
 * Reads fixed 32 bits as an unsigned 32 bit integer.
 * @returns {number} Value read
 */
Reader.prototype.fixed32 = function read_fixed32() {

    /* istanbul ignore if */
    if (this.pos + 4 > this.len)
        throw indexOutOfRange(this, 4);

    return readFixed32_end(this.buf, this.pos += 4);
};

/**
 * Reads fixed 32 bits as a signed 32 bit integer.
 * @returns {number} Value read
 */
Reader.prototype.sfixed32 = function read_sfixed32() {

    /* istanbul ignore if */
    if (this.pos + 4 > this.len)
        throw indexOutOfRange(this, 4);

    return readFixed32_end(this.buf, this.pos += 4) | 0;
};

/* eslint-disable no-invalid-this */

function readFixed64(/* this: Reader */) {

    /* istanbul ignore if */
    if (this.pos + 8 > this.len)
        throw indexOutOfRange(this, 8);

    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));
}

/* eslint-enable no-invalid-this */

/**
 * Reads fixed 64 bits.
 * @name Reader#fixed64
 * @function
 * @returns {Long} Value read
 */

/**
 * Reads zig-zag encoded fixed 64 bits.
 * @name Reader#sfixed64
 * @function
 * @returns {Long} Value read
 */

/**
 * Reads a float (32 bit) as a number.
 * @function
 * @returns {number} Value read
 */
Reader.prototype.float = function read_float() {

    /* istanbul ignore if */
    if (this.pos + 4 > this.len)
        throw indexOutOfRange(this, 4);

    var value = util.float.readFloatLE(this.buf, this.pos);
    this.pos += 4;
    return value;
};

/**
 * Reads a double (64 bit float) as a number.
 * @function
 * @returns {number} Value read
 */
Reader.prototype.double = function read_double() {

    /* istanbul ignore if */
    if (this.pos + 8 > this.len)
        throw indexOutOfRange(this, 4);

    var value = util.float.readDoubleLE(this.buf, this.pos);
    this.pos += 8;
    return value;
};

/**
 * Reads a sequence of bytes preceeded by its length as a varint.
 * @returns {Uint8Array} Value read
 */
Reader.prototype.bytes = function read_bytes() {
    var length = this.uint32(),
        start  = this.pos,
        end    = this.pos + length;

    /* istanbul ignore if */
    if (end > this.len)
        throw indexOutOfRange(this, length);

    this.pos += length;
    if (Array.isArray(this.buf)) // plain array
        return this.buf.slice(start, end);
    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1
        ? new this.buf.constructor(0)
        : this._slice.call(this.buf, start, end);
};

/**
 * Reads a string preceeded by its byte length as a varint.
 * @returns {string} Value read
 */
Reader.prototype.string = function read_string() {
    var bytes = this.bytes();
    return utf8.read(bytes, 0, bytes.length);
};

/**
 * Skips the specified number of bytes if specified, otherwise skips a varint.
 * @param {number} [length] Length if known, otherwise a varint is assumed
 * @returns {Reader} `this`
 */
Reader.prototype.skip = function skip(length) {
    if (typeof length === "number") {
        /* istanbul ignore if */
        if (this.pos + length > this.len)
            throw indexOutOfRange(this, length);
        this.pos += length;
    } else {
        do {
            /* istanbul ignore if */
            if (this.pos >= this.len)
                throw indexOutOfRange(this);
        } while (this.buf[this.pos++] & 128);
    }
    return this;
};

/**
 * Skips the next element of the specified wire type.
 * @param {number} wireType Wire type received
 * @returns {Reader} `this`
 */
Reader.prototype.skipType = function(wireType) {
    switch (wireType) {
        case 0:
            this.skip();
            break;
        case 1:
            this.skip(8);
            break;
        case 2:
            this.skip(this.uint32());
            break;
        case 3:
            while ((wireType = this.uint32() & 7) !== 4) {
                this.skipType(wireType);
            }
            break;
        case 5:
            this.skip(4);
            break;

        /* istanbul ignore next */
        default:
            throw Error("invalid wire type " + wireType + " at offset " + this.pos);
    }
    return this;
};

Reader._configure = function(BufferReader_) {
    BufferReader = BufferReader_;

    var fn = util.Long ? "toLong" : /* istanbul ignore next */ "toNumber";
    util.merge(Reader.prototype, {

        int64: function read_int64() {
            return readLongVarint.call(this)[fn](false);
        },

        uint64: function read_uint64() {
            return readLongVarint.call(this)[fn](true);
        },

        sint64: function read_sint64() {
            return readLongVarint.call(this).zzDecode()[fn](false);
        },

        fixed64: function read_fixed64() {
            return readFixed64.call(this)[fn](true);
        },

        sfixed64: function read_sfixed64() {
            return readFixed64.call(this)[fn](false);
        }

    });
};

},{"./util/minimal":40}],29:[function(require,module,exports){
"use strict";
module.exports = BufferReader;

// extends Reader
var Reader = require("./reader");
(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;

var util = require("./util/minimal");

/**
 * Constructs a new buffer reader instance.
 * @classdesc Wire format reader using node buffers.
 * @extends Reader
 * @constructor
 * @param {Buffer} buffer Buffer to read from
 */
function BufferReader(buffer) {
    Reader.call(this, buffer);

    /**
     * Read buffer.
     * @name BufferReader#buf
     * @type {Buffer}
     */
}

/* istanbul ignore else */
if (util.Buffer)
    BufferReader.prototype._slice = util.Buffer.prototype.slice;

/**
 * @override
 */
BufferReader.prototype.string = function read_string_buffer() {
    var len = this.uint32(); // modifies pos
    return this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len));
};

/**
 * Reads a sequence of bytes preceeded by its length as a varint.
 * @name BufferReader#bytes
 * @function
 * @returns {Buffer} Value read
 */

},{"./reader":28,"./util/minimal":40}],30:[function(require,module,exports){
"use strict";
module.exports = Root;

// extends Namespace
var Namespace = require("./namespace");
((Root.prototype = Object.create(Namespace.prototype)).constructor = Root).className = "Root";

var Field   = require("./field"),
    Enum    = require("./enum"),
    OneOf   = require("./oneof"),
    util    = require("./util");

var Type,   // cyclic
    parse,  // might be excluded
    common; // "

/**
 * Constructs a new root namespace instance.
 * @classdesc Root namespace wrapping all types, enums, services, sub-namespaces etc. that belong together.
 * @extends NamespaceBase
 * @constructor
 * @param {Object.<string,*>} [options] Top level options
 */
function Root(options) {
    Namespace.call(this, "", options);

    /**
     * Deferred extension fields.
     * @type {Field[]}
     */
    this.deferred = [];

    /**
     * Resolved file names of loaded files.
     * @type {string[]}
     */
    this.files = [];
}

/**
 * Loads a namespace descriptor into a root namespace.
 * @param {INamespace} json Nameespace descriptor
 * @param {Root} [root] Root namespace, defaults to create a new one if omitted
 * @returns {Root} Root namespace
 */
Root.fromJSON = function fromJSON(json, root) {
    if (!root)
        root = new Root();
    if (json.options)
        root.setOptions(json.options);
    return root.addJSON(json.nested);
};

/**
 * Resolves the path of an imported file, relative to the importing origin.
 * This method exists so you can override it with your own logic in case your imports are scattered over multiple directories.
 * @function
 * @param {string} origin The file name of the importing file
 * @param {string} target The file name being imported
 * @returns {string|null} Resolved path to `target` or `null` to skip the file
 */
Root.prototype.resolvePath = util.path.resolve;

// A symbol-like function to safely signal synchronous loading
/* istanbul ignore next */
function SYNC() {} // eslint-disable-line no-empty-function

/**
 * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.
 * @param {string|string[]} filename Names of one or multiple files to load
 * @param {IParseOptions} options Parse options
 * @param {LoadCallback} callback Callback function
 * @returns {undefined}
 */
Root.prototype.load = function load(filename, options, callback) {
    if (typeof options === "function") {
        callback = options;
        options = undefined;
    }
    var self = this;
    if (!callback)
        return util.asPromise(load, self, filename, options);

    var sync = callback === SYNC; // undocumented

    // Finishes loading by calling the callback (exactly once)
    function finish(err, root) {
        /* istanbul ignore if */
        if (!callback)
            return;
        var cb = callback;
        callback = null;
        if (sync)
            throw err;
        cb(err, root);
    }

    // Processes a single file
    function process(filename, source) {
        try {
            if (util.isString(source) && source.charAt(0) === "{")
                source = JSON.parse(source);
            if (!util.isString(source))
                self.setOptions(source.options).addJSON(source.nested);
            else {
                parse.filename = filename;
                var parsed = parse(source, self, options),
                    resolved,
                    i = 0;
                if (parsed.imports)
                    for (; i < parsed.imports.length; ++i)
                        if (resolved = self.resolvePath(filename, parsed.imports[i]))
                            fetch(resolved);
                if (parsed.weakImports)
                    for (i = 0; i < parsed.weakImports.length; ++i)
                        if (resolved = self.resolvePath(filename, parsed.weakImports[i]))
                            fetch(resolved, true);
            }
        } catch (err) {
            finish(err);
        }
        if (!sync && !queued)
            finish(null, self); // only once anyway
    }

    // Fetches a single file
    function fetch(filename, weak) {

        // Strip path if this file references a bundled definition
        var idx = filename.lastIndexOf("google/protobuf/");
        if (idx > -1) {
            var altname = filename.substring(idx);
            if (altname in common)
                filename = altname;
        }

        // Skip if already loaded / attempted
        if (self.files.indexOf(filename) > -1)
            return;
        self.files.push(filename);

        // Shortcut bundled definitions
        if (filename in common) {
            if (sync)
                process(filename, common[filename]);
            else {
                ++queued;
                setTimeout(function() {
                    --queued;
                    process(filename, common[filename]);
                });
            }
            return;
        }

        // Otherwise fetch from disk or network
        if (sync) {
            var source;
            try {
                source = util.fs.readFileSync(filename).toString("utf8");
            } catch (err) {
                if (!weak)
                    finish(err);
                return;
            }
            process(filename, source);
        } else {
            ++queued;
            util.fetch(filename, function(err, source) {
                --queued;
                /* istanbul ignore if */
                if (!callback)
                    return; // terminated meanwhile
                if (err) {
                    /* istanbul ignore else */
                    if (!weak)
                        finish(err);
                    else if (!queued) // can't be covered reliably
                        finish(null, self);
                    return;
                }
                process(filename, source);
            });
        }
    }
    var queued = 0;

    // Assembling the root namespace doesn't require working type
    // references anymore, so we can load everything in parallel
    if (util.isString(filename))
        filename = [ filename ];
    for (var i = 0, resolved; i < filename.length; ++i)
        if (resolved = self.resolvePath("", filename[i]))
            fetch(resolved);

    if (sync)
        return self;
    if (!queued)
        finish(null, self);
    return undefined;
};
// function load(filename:string, options:IParseOptions, callback:LoadCallback):undefined

/**
 * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.
 * @function Root#load
 * @param {string|string[]} filename Names of one or multiple files to load
 * @param {LoadCallback} callback Callback function
 * @returns {undefined}
 * @variation 2
 */
// function load(filename:string, callback:LoadCallback):undefined

/**
 * Loads one or multiple .proto or preprocessed .json files into this root namespace and returns a promise.
 * @function Root#load
 * @param {string|string[]} filename Names of one or multiple files to load
 * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.
 * @returns {Promise<Root>} Promise
 * @variation 3
 */
// function load(filename:string, [options:IParseOptions]):Promise<Root>

/**
 * Synchronously loads one or multiple .proto or preprocessed .json files into this root namespace (node only).
 * @function Root#loadSync
 * @param {string|string[]} filename Names of one or multiple files to load
 * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.
 * @returns {Root} Root namespace
 * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid
 */
Root.prototype.loadSync = function loadSync(filename, options) {
    if (!util.isNode)
        throw Error("not supported");
    return this.load(filename, options, SYNC);
};

/**
 * @override
 */
Root.prototype.resolveAll = function resolveAll() {
    if (this.deferred.length)
        throw Error("unresolvable extensions: " + this.deferred.map(function(field) {
            return "'extend " + field.extend + "' in " + field.parent.fullName;
        }).join(", "));
    return Namespace.prototype.resolveAll.call(this);
};

// only uppercased (and thus conflict-free) children are exposed, see below
var exposeRe = /^[A-Z]/;

/**
 * Handles a deferred declaring extension field by creating a sister field to represent it within its extended type.
 * @param {Root} root Root instance
 * @param {Field} field Declaring extension field witin the declaring type
 * @returns {boolean} `true` if successfully added to the extended type, `false` otherwise
 * @inner
 * @ignore
 */
function tryHandleExtension(root, field) {
    var extendedType = field.parent.lookup(field.extend);
    if (extendedType) {
        var sisterField = new Field(field.fullName, field.id, field.type, field.rule, undefined, field.options);
        sisterField.declaringField = field;
        field.extensionField = sisterField;
        extendedType.add(sisterField);
        return true;
    }
    return false;
}

/**
 * Called when any object is added to this root or its sub-namespaces.
 * @param {ReflectionObject} object Object added
 * @returns {undefined}
 * @private
 */
Root.prototype._handleAdd = function _handleAdd(object) {
    if (object instanceof Field) {

        if (/* an extension field (implies not part of a oneof) */ object.extend !== undefined && /* not already handled */ !object.extensionField)
            if (!tryHandleExtension(this, object))
                this.deferred.push(object);

    } else if (object instanceof Enum) {

        if (exposeRe.test(object.name))
            object.parent[object.name] = object.values; // expose enum values as property of its parent

    } else if (!(object instanceof OneOf)) /* everything else is a namespace */ {

        if (object instanceof Type) // Try to handle any deferred extensions
            for (var i = 0; i < this.deferred.length;)
                if (tryHandleExtension(this, this.deferred[i]))
                    this.deferred.splice(i, 1);
                else
                    ++i;
        for (var j = 0; j < /* initializes */ object.nestedArray.length; ++j) // recurse into the namespace
            this._handleAdd(object._nestedArray[j]);
        if (exposeRe.test(object.name))
            object.parent[object.name] = object; // expose namespace as property of its parent
    }

    // The above also adds uppercased (and thus conflict-free) nested types, services and enums as
    // properties of namespaces just like static code does. This allows using a .d.ts generated for
    // a static module with reflection-based solutions where the condition is met.
};

/**
 * Called when any object is removed from this root or its sub-namespaces.
 * @param {ReflectionObject} object Object removed
 * @returns {undefined}
 * @private
 */
Root.prototype._handleRemove = function _handleRemove(object) {
    if (object instanceof Field) {

        if (/* an extension field */ object.extend !== undefined) {
            if (/* already handled */ object.extensionField) { // remove its sister field
                object.extensionField.parent.remove(object.extensionField);
                object.extensionField = null;
            } else { // cancel the extension
                var index = this.deferred.indexOf(object);
                /* istanbul ignore else */
                if (index > -1)
                    this.deferred.splice(index, 1);
            }
        }

    } else if (object instanceof Enum) {

        if (exposeRe.test(object.name))
            delete object.parent[object.name]; // unexpose enum values

    } else if (object instanceof Namespace) {

        for (var i = 0; i < /* initializes */ object.nestedArray.length; ++i) // recurse into the namespace
            this._handleRemove(object._nestedArray[i]);

        if (exposeRe.test(object.name))
            delete object.parent[object.name]; // unexpose namespaces

    }
};

// Sets up cyclic dependencies (called in index-light)
Root._configure = function(Type_, parse_, common_) {
    Type   = Type_;
    parse  = parse_;
    common = common_;
};

},{"./enum":16,"./field":17,"./namespace":24,"./oneof":26,"./util":38}],31:[function(require,module,exports){
"use strict";
module.exports = {};

/**
 * Named roots.
 * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).
 * Can also be used manually to make roots available accross modules.
 * @name roots
 * @type {Object.<string,Root>}
 * @example
 * // pbjs -r myroot -o compiled.js ...
 *
 * // in another module:
 * require("./compiled.js");
 *
 * // in any subsequent module:
 * var root = protobuf.roots["myroot"];
 */

},{}],32:[function(require,module,exports){
"use strict";

/**
 * Streaming RPC helpers.
 * @namespace
 */
var rpc = exports;

/**
 * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.
 * @typedef RPCImpl
 * @type {function}
 * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called
 * @param {Uint8Array} requestData Request data
 * @param {RPCImplCallback} callback Callback function
 * @returns {undefined}
 * @example
 * function rpcImpl(method, requestData, callback) {
 *     if (protobuf.util.lcFirst(method.name) !== "myMethod") // compatible with static code
 *         throw Error("no such method");
 *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {
 *         callback(err, responseData);
 *     });
 * }
 */

/**
 * Node-style callback as used by {@link RPCImpl}.
 * @typedef RPCImplCallback
 * @type {function}
 * @param {Error|null} error Error, if any, otherwise `null`
 * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error
 * @returns {undefined}
 */

rpc.Service = require("./rpc/service");

},{"./rpc/service":33}],33:[function(require,module,exports){
"use strict";
module.exports = Service;

var util = require("../util/minimal");

// Extends EventEmitter
(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;

/**
 * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.
 *
 * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.
 * @typedef rpc.ServiceMethodCallback
 * @template TRes extends Message<TRes>
 * @type {function}
 * @param {Error|null} error Error, if any
 * @param {TRes} [response] Response message
 * @returns {undefined}
 */

/**
 * A service method part of a {@link rpc.Service} as created by {@link Service.create}.
 * @typedef rpc.ServiceMethod
 * @template TReq extends Message<TReq>
 * @template TRes extends Message<TRes>
 * @type {function}
 * @param {TReq|Properties<TReq>} request Request message or plain object
 * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message
 * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`
 */

/**
 * Constructs a new RPC service instance.
 * @classdesc An RPC service as returned by {@link Service#create}.
 * @exports rpc.Service
 * @extends util.EventEmitter
 * @constructor
 * @param {RPCImpl} rpcImpl RPC implementation
 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
 */
function Service(rpcImpl, requestDelimited, responseDelimited) {

    if (typeof rpcImpl !== "function")
        throw TypeError("rpcImpl must be a function");

    util.EventEmitter.call(this);

    /**
     * RPC implementation. Becomes `null` once the service is ended.
     * @type {RPCImpl|null}
     */
    this.rpcImpl = rpcImpl;

    /**
     * Whether requests are length-delimited.
     * @type {boolean}
     */
    this.requestDelimited = Boolean(requestDelimited);

    /**
     * Whether responses are length-delimited.
     * @type {boolean}
     */
    this.responseDelimited = Boolean(responseDelimited);
}

/**
 * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.
 * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method
 * @param {Constructor<TReq>} requestCtor Request constructor
 * @param {Constructor<TRes>} responseCtor Response constructor
 * @param {TReq|Properties<TReq>} request Request message or plain object
 * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback
 * @returns {undefined}
 * @template TReq extends Message<TReq>
 * @template TRes extends Message<TRes>
 */
Service.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {

    if (!request)
        throw TypeError("request must be specified");

    var self = this;
    if (!callback)
        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);

    if (!self.rpcImpl) {
        setTimeout(function() { callback(Error("already ended")); }, 0);
        return undefined;
    }

    try {
        return self.rpcImpl(
            method,
            requestCtor[self.requestDelimited ? "encodeDelimited" : "encode"](request).finish(),
            function rpcCallback(err, response) {

                if (err) {
                    self.emit("error", err, method);
                    return callback(err);
                }

                if (response === null) {
                    self.end(/* endedByRPC */ true);
                    return undefined;
                }

                if (!(response instanceof responseCtor)) {
                    try {
                        response = responseCtor[self.responseDelimited ? "decodeDelimited" : "decode"](response);
                    } catch (err) {
                        self.emit("error", err, method);
                        return callback(err);
                    }
                }

                self.emit("data", response, method);
                return callback(null, response);
            }
        );
    } catch (err) {
        self.emit("error", err, method);
        setTimeout(function() { callback(err); }, 0);
        return undefined;
    }
};

/**
 * Ends this service and emits the `end` event.
 * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.
 * @returns {rpc.Service} `this`
 */
Service.prototype.end = function end(endedByRPC) {
    if (this.rpcImpl) {
        if (!endedByRPC) // signal end to rpcImpl
            this.rpcImpl(null, null, null);
        this.rpcImpl = null;
        this.emit("end").off();
    }
    return this;
};

},{"../util/minimal":40}],34:[function(require,module,exports){
"use strict";
module.exports = Service;

// extends Namespace
var Namespace = require("./namespace");
((Service.prototype = Object.create(Namespace.prototype)).constructor = Service).className = "Service";

var Method = require("./method"),
    util   = require("./util"),
    rpc    = require("./rpc");

/**
 * Constructs a new service instance.
 * @classdesc Reflected service.
 * @extends NamespaceBase
 * @constructor
 * @param {string} name Service name
 * @param {Object.<string,*>} [options] Service options
 * @throws {TypeError} If arguments are invalid
 */
function Service(name, options) {
    Namespace.call(this, name, options);

    /**
     * Service methods.
     * @type {Object.<string,Method>}
     */
    this.methods = {}; // toJSON, marker

    /**
     * Cached methods as an array.
     * @type {Method[]|null}
     * @private
     */
    this._methodsArray = null;
}

/**
 * Service descriptor.
 * @interface IService
 * @extends INamespace
 * @property {Object.<string,IMethod>} methods Method descriptors
 */

/**
 * Constructs a service from a service descriptor.
 * @param {string} name Service name
 * @param {IService} json Service descriptor
 * @returns {Service} Created service
 * @throws {TypeError} If arguments are invalid
 */
Service.fromJSON = function fromJSON(name, json) {
    var service = new Service(name, json.options);
    /* istanbul ignore else */
    if (json.methods)
        for (var names = Object.keys(json.methods), i = 0; i < names.length; ++i)
            service.add(Method.fromJSON(names[i], json.methods[names[i]]));
    if (json.nested)
        service.addJSON(json.nested);
    service.comment = json.comment;
    return service;
};

/**
 * Converts this service to a service descriptor.
 * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
 * @returns {IService} Service descriptor
 */
Service.prototype.toJSON = function toJSON(toJSONOptions) {
    var inherited = Namespace.prototype.toJSON.call(this, toJSONOptions);
    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
    return util.toObject([
        "options" , inherited && inherited.options || undefined,
        "methods" , Namespace.arrayToJSON(this.methodsArray, toJSONOptions) || /* istanbul ignore next */ {},
        "nested"  , inherited && inherited.nested || undefined,
        "comment" , keepComments ? this.comment : undefined
    ]);
};

/**
 * Methods of this service as an array for iteration.
 * @name Service#methodsArray
 * @type {Method[]}
 * @readonly
 */
Object.defineProperty(Service.prototype, "methodsArray", {
    get: function() {
        return this._methodsArray || (this._methodsArray = util.toArray(this.methods));
    }
});

function clearCache(service) {
    service._methodsArray = null;
    return service;
}

/**
 * @override
 */
Service.prototype.get = function get(name) {
    return this.methods[name]
        || Namespace.prototype.get.call(this, name);
};

/**
 * @override
 */
Service.prototype.resolveAll = function resolveAll() {
    var methods = this.methodsArray;
    for (var i = 0; i < methods.length; ++i)
        methods[i].resolve();
    return Namespace.prototype.resolve.call(this);
};

/**
 * @override
 */
Service.prototype.add = function add(object) {

    /* istanbul ignore if */
    if (this.get(object.name))
        throw Error("duplicate name '" + object.name + "' in " + this);

    if (object instanceof Method) {
        this.methods[object.name] = object;
        object.parent = this;
        return clearCache(this);
    }
    return Namespace.prototype.add.call(this, object);
};

/**
 * @override
 */
Service.prototype.remove = function remove(object) {
    if (object instanceof Method) {

        /* istanbul ignore if */
        if (this.methods[object.name] !== object)
            throw Error(object + " is not a member of " + this);

        delete this.methods[object.name];
        object.parent = null;
        return clearCache(this);
    }
    return Namespace.prototype.remove.call(this, object);
};

/**
 * Creates a runtime service using the specified rpc implementation.
 * @param {RPCImpl} rpcImpl RPC implementation
 * @param {boolean} [requestDelimited=false] Whether requests are length-delimited
 * @param {boolean} [responseDelimited=false] Whether responses are length-delimited
 * @returns {rpc.Service} RPC service. Useful where requests and/or responses are streamed.
 */
Service.prototype.create = function create(rpcImpl, requestDelimited, responseDelimited) {
    var rpcService = new rpc.Service(rpcImpl, requestDelimited, responseDelimited);
    for (var i = 0, method; i < /* initializes */ this.methodsArray.length; ++i) {
        var methodName = util.lcFirst((method = this._methodsArray[i]).resolve().name).replace(/[^$\w_]/g, "");
        rpcService[methodName] = util.codegen(["r","c"], util.isReserved(methodName) ? methodName + "_" : methodName)("return this.rpcCall(m,q,s,r,c)")({
            m: method,
            q: method.resolvedRequestType.ctor,
            s: method.resolvedResponseType.ctor
        });
    }
    return rpcService;
};

},{"./method":23,"./namespace":24,"./rpc":32,"./util":38}],35:[function(require,module,exports){
"use strict";
module.exports = tokenize;

var delimRe        = /[\s{}=;:[\],'"()<>]/g,
    stringDoubleRe = /(?:"([^"\\]*(?:\\.[^"\\]*)*)")/g,
    stringSingleRe = /(?:'([^'\\]*(?:\\.[^'\\]*)*)')/g;

var setCommentRe = /^ *[*/]+ */,
    setCommentAltRe = /^\s*\*?\/*/,
    setCommentSplitRe = /\n/g,
    whitespaceRe = /\s/,
    unescapeRe = /\\(.?)/g;

var unescapeMap = {
    "0": "\0",
    "r": "\r",
    "n": "\n",
    "t": "\t"
};

/**
 * Unescapes a string.
 * @param {string} str String to unescape
 * @returns {string} Unescaped string
 * @property {Object.<string,string>} map Special characters map
 * @memberof tokenize
 */
function unescape(str) {
    return str.replace(unescapeRe, function($0, $1) {
        switch ($1) {
            case "\\":
            case "":
                return $1;
            default:
                return unescapeMap[$1] || "";
        }
    });
}

tokenize.unescape = unescape;

/**
 * Gets the next token and advances.
 * @typedef TokenizerHandleNext
 * @type {function}
 * @returns {string|null} Next token or `null` on eof
 */

/**
 * Peeks for the next token.
 * @typedef TokenizerHandlePeek
 * @type {function}
 * @returns {string|null} Next token or `null` on eof
 */

/**
 * Pushes a token back to the stack.
 * @typedef TokenizerHandlePush
 * @type {function}
 * @param {string} token Token
 * @returns {undefined}
 */

/**
 * Skips the next token.
 * @typedef TokenizerHandleSkip
 * @type {function}
 * @param {string} expected Expected token
 * @param {boolean} [optional=false] If optional
 * @returns {boolean} Whether the token matched
 * @throws {Error} If the token didn't match and is not optional
 */

/**
 * Gets the comment on the previous line or, alternatively, the line comment on the specified line.
 * @typedef TokenizerHandleCmnt
 * @type {function}
 * @param {number} [line] Line number
 * @returns {string|null} Comment text or `null` if none
 */

/**
 * Handle object returned from {@link tokenize}.
 * @interface ITokenizerHandle
 * @property {TokenizerHandleNext} next Gets the next token and advances (`null` on eof)
 * @property {TokenizerHandlePeek} peek Peeks for the next token (`null` on eof)
 * @property {TokenizerHandlePush} push Pushes a token back to the stack
 * @property {TokenizerHandleSkip} skip Skips a token, returns its presence and advances or, if non-optional and not present, throws
 * @property {TokenizerHandleCmnt} cmnt Gets the comment on the previous line or the line comment on the specified line, if any
 * @property {number} line Current line number
 */

/**
 * Tokenizes the given .proto source and returns an object with useful utility functions.
 * @param {string} source Source contents
 * @param {boolean} alternateCommentMode Whether we should activate alternate comment parsing mode.
 * @returns {ITokenizerHandle} Tokenizer handle
 */
function tokenize(source, alternateCommentMode) {
    /* eslint-disable callback-return */
    source = source.toString();

    var offset = 0,
        length = source.length,
        line = 1,
        commentType = null,
        commentText = null,
        commentLine = 0,
        commentLineEmpty = false;

    var stack = [];

    var stringDelim = null;

    /* istanbul ignore next */
    /**
     * Creates an error for illegal syntax.
     * @param {string} subject Subject
     * @returns {Error} Error created
     * @inner
     */
    function illegal(subject) {
        return Error("illegal " + subject + " (line " + line + ")");
    }

    /**
     * Reads a string till its end.
     * @returns {string} String read
     * @inner
     */
    function readString() {
        var re = stringDelim === "'" ? stringSingleRe : stringDoubleRe;
        re.lastIndex = offset - 1;
        var match = re.exec(source);
        if (!match)
            throw illegal("string");
        offset = re.lastIndex;
        push(stringDelim);
        stringDelim = null;
        return unescape(match[1]);
    }

    /**
     * Gets the character at `pos` within the source.
     * @param {number} pos Position
     * @returns {string} Character
     * @inner
     */
    function charAt(pos) {
        return source.charAt(pos);
    }

    /**
     * Sets the current comment text.
     * @param {number} start Start offset
     * @param {number} end End offset
     * @returns {undefined}
     * @inner
     */
    function setComment(start, end) {
        commentType = source.charAt(start++);
        commentLine = line;
        commentLineEmpty = false;
        var lookback;
        if (alternateCommentMode) {
            lookback = 2;  // alternate comment parsing: "//" or "/*"
        } else {
            lookback = 3;  // "///" or "/**"
        }
        var commentOffset = start - lookback,
            c;
        do {
            if (--commentOffset < 0 ||
                    (c = source.charAt(commentOffset)) === "\n") {
                commentLineEmpty = true;
                break;
            }
        } while (c === " " || c === "\t");
        var lines = source
            .substring(start, end)
            .split(setCommentSplitRe);
        for (var i = 0; i < lines.length; ++i)
            lines[i] = lines[i]
                .replace(alternateCommentMode ? setCommentAltRe : setCommentRe, "")
                .trim();
        commentText = lines
            .join("\n")
            .trim();
    }

    function isDoubleSlashCommentLine(startOffset) {
        var endOffset = findEndOfLine(startOffset);

        // see if remaining line matches comment pattern
        var lineText = source.substring(startOffset, endOffset);
        // look for 1 or 2 slashes since startOffset would already point past
        // the first slash that started the comment.
        var isComment = /^\s*\/{1,2}/.test(lineText);
        return isComment;
    }

    function findEndOfLine(cursor) {
        // find end of cursor's line
        var endOffset = cursor;
        while (endOffset < length && charAt(endOffset) !== "\n") {
            endOffset++;
        }
        return endOffset;
    }

    /**
     * Obtains the next token.
     * @returns {string|null} Next token or `null` on eof
     * @inner
     */
    function next() {
        if (stack.length > 0)
            return stack.shift();
        if (stringDelim)
            return readString();
        var repeat,
            prev,
            curr,
            start,
            isDoc;
        do {
            if (offset === length)
                return null;
            repeat = false;
            while (whitespaceRe.test(curr = charAt(offset))) {
                if (curr === "\n")
                    ++line;
                if (++offset === length)
                    return null;
            }

            if (charAt(offset) === "/") {
                if (++offset === length) {
                    throw illegal("comment");
                }
                if (charAt(offset) === "/") { // Line
                    if (!alternateCommentMode) {
                        // check for triple-slash comment
                        isDoc = charAt(start = offset + 1) === "/";

                        while (charAt(++offset) !== "\n") {
                            if (offset === length) {
                                return null;
                            }
                        }
                        ++offset;
                        if (isDoc) {
                            setComment(start, offset - 1);
                        }
                        ++line;
                        repeat = true;
                    } else {
                        // check for double-slash comments, consolidating consecutive lines
                        start = offset;
                        isDoc = false;
                        if (isDoubleSlashCommentLine(offset)) {
                            isDoc = true;
                            do {
                                offset = findEndOfLine(offset);
                                if (offset === length) {
                                    break;
                                }
                                offset++;
                            } while (isDoubleSlashCommentLine(offset));
                        } else {
                            offset = Math.min(length, findEndOfLine(offset) + 1);
                        }
                        if (isDoc) {
                            setComment(start, offset);
                        }
                        line++;
                        repeat = true;
                    }
                } else if ((curr = charAt(offset)) === "*") { /* Block */
                    // check for /** (regular comment mode) or /* (alternate comment mode)
                    start = offset + 1;
                    isDoc = alternateCommentMode || charAt(start) === "*";
                    do {
                        if (curr === "\n") {
                            ++line;
                        }
                        if (++offset === length) {
                            throw illegal("comment");
                        }
                        prev = curr;
                        curr = charAt(offset);
                    } while (prev !== "*" || curr !== "/");
                    ++offset;
                    if (isDoc) {
                        setComment(start, offset - 2);
                    }
                    repeat = true;
                } else {
                    return "/";
                }
            }
        } while (repeat);

        // offset !== length if we got here

        var end = offset;
        delimRe.lastIndex = 0;
        var delim = delimRe.test(charAt(end++));
        if (!delim)
            while (end < length && !delimRe.test(charAt(end)))
                ++end;
        var token = source.substring(offset, offset = end);
        if (token === "\"" || token === "'")
            stringDelim = token;
        return token;
    }

    /**
     * Pushes a token back to the stack.
     * @param {string} token Token
     * @returns {undefined}
     * @inner
     */
    function push(token) {
        stack.push(token);
    }

    /**
     * Peeks for the next token.
     * @returns {string|null} Token or `null` on eof
     * @inner
     */
    function peek() {
        if (!stack.length) {
            var token = next();
            if (token === null)
                return null;
            push(token);
        }
        return stack[0];
    }

    /**
     * Skips a token.
     * @param {string} expected Expected token
     * @param {boolean} [optional=false] Whether the token is optional
     * @returns {boolean} `true` when skipped, `false` if not
     * @throws {Error} When a required token is not present
     * @inner
     */
    function skip(expected, optional) {
        var actual = peek(),
            equals = actual === expected;
        if (equals) {
            next();
            return true;
        }
        if (!optional)
            throw illegal("token '" + actual + "', '" + expected + "' expected");
        return false;
    }

    /**
     * Gets a comment.
     * @param {number} [trailingLine] Line number if looking for a trailing comment
     * @returns {string|null} Comment text
     * @inner
     */
    function cmnt(trailingLine) {
        var ret = null;
        if (trailingLine === undefined) {
            if (commentLine === line - 1 && (alternateCommentMode || commentType === "*" || commentLineEmpty)) {
                ret = commentText;
            }
        } else {
            /* istanbul ignore else */
            if (commentLine < trailingLine) {
                peek();
            }
            if (commentLine === trailingLine && !commentLineEmpty && (alternateCommentMode || commentType === "/")) {
                ret = commentText;
            }
        }
        return ret;
    }

    return Object.defineProperty({
        next: next,
        peek: peek,
        push: push,
        skip: skip,
        cmnt: cmnt
    }, "line", {
        get: function() { return line; }
    });
    /* eslint-enable callback-return */
}

},{}],36:[function(require,module,exports){
"use strict";
module.exports = Type;

// extends Namespace
var Namespace = require("./namespace");
((Type.prototype = Object.create(Namespace.prototype)).constructor = Type).className = "Type";

var Enum      = require("./enum"),
    OneOf     = require("./oneof"),
    Field     = require("./field"),
    MapField  = require("./mapfield"),
    Service   = require("./service"),
    Message   = require("./message"),
    Reader    = require("./reader"),
    Writer    = require("./writer"),
    util      = require("./util"),
    encoder   = require("./encoder"),
    decoder   = require("./decoder"),
    verifier  = require("./verifier"),
    converter = require("./converter"),
    wrappers  = require("./wrappers");

/**
 * Constructs a new reflected message type instance.
 * @classdesc Reflected message type.
 * @extends NamespaceBase
 * @constructor
 * @param {string} name Message name
 * @param {Object.<string,*>} [options] Declared options
 */
function Type(name, options) {
    Namespace.call(this, name, options);

    /**
     * Message fields.
     * @type {Object.<string,Field>}
     */
    this.fields = {};  // toJSON, marker

    /**
     * Oneofs declared within this namespace, if any.
     * @type {Object.<string,OneOf>}
     */
    this.oneofs = undefined; // toJSON

    /**
     * Extension ranges, if any.
     * @type {number[][]}
     */
    this.extensions = undefined; // toJSON

    /**
     * Reserved ranges, if any.
     * @type {Array.<number[]|string>}
     */
    this.reserved = undefined; // toJSON

    /*?
     * Whether this type is a legacy group.
     * @type {boolean|undefined}
     */
    this.group = undefined; // toJSON

    /**
     * Cached fields by id.
     * @type {Object.<number,Field>|null}
     * @private
     */
    this._fieldsById = null;

    /**
     * Cached fields as an array.
     * @type {Field[]|null}
     * @private
     */
    this._fieldsArray = null;

    /**
     * Cached oneofs as an array.
     * @type {OneOf[]|null}
     * @private
     */
    this._oneofsArray = null;

    /**
     * Cached constructor.
     * @type {Constructor<{}>}
     * @private
     */
    this._ctor = null;
}

Object.defineProperties(Type.prototype, {

    /**
     * Message fields by id.
     * @name Type#fieldsById
     * @type {Object.<number,Field>}
     * @readonly
     */
    fieldsById: {
        get: function() {

            /* istanbul ignore if */
            if (this._fieldsById)
                return this._fieldsById;

            this._fieldsById = {};
            for (var names = Object.keys(this.fields), i = 0; i < names.length; ++i) {
                var field = this.fields[names[i]],
                    id = field.id;

                /* istanbul ignore if */
                if (this._fieldsById[id])
                    throw Error("duplicate id " + id + " in " + this);

                this._fieldsById[id] = field;
            }
            return this._fieldsById;
        }
    },

    /**
     * Fields of this message as an array for iteration.
     * @name Type#fieldsArray
     * @type {Field[]}
     * @readonly
     */
    fieldsArray: {
        get: function() {
            return this._fieldsArray || (this._fieldsArray = util.toArray(this.fields));
        }
    },

    /**
     * Oneofs of this message as an array for iteration.
     * @name Type#oneofsArray
     * @type {OneOf[]}
     * @readonly
     */
    oneofsArray: {
        get: function() {
            return this._oneofsArray || (this._oneofsArray = util.toArray(this.oneofs));
        }
    },

    /**
     * The registered constructor, if any registered, otherwise a generic constructor.
     * Assigning a function replaces the internal constructor. If the function does not extend {@link Message} yet, its prototype will be setup accordingly and static methods will be populated. If it already extends {@link Message}, it will just replace the internal constructor.
     * @name Type#ctor
     * @type {Constructor<{}>}
     */
    ctor: {
        get: function() {
            return this._ctor || (this.ctor = Type.generateConstructor(this)());
        },
        set: function(ctor) {

            // Ensure proper prototype
            var prototype = ctor.prototype;
            if (!(prototype instanceof Message)) {
                (ctor.prototype = new Message()).constructor = ctor;
                util.merge(ctor.prototype, prototype);
            }

            // Classes and messages reference their reflected type
            ctor.$type = ctor.prototype.$type = this;

            // Mix in static methods
            util.merge(ctor, Message, true);

            this._ctor = ctor;

            // Messages have non-enumerable default values on their prototype
            var i = 0;
            for (; i < /* initializes */ this.fieldsArray.length; ++i)
                this._fieldsArray[i].resolve(); // ensures a proper value

            // Messages have non-enumerable getters and setters for each virtual oneof field
            var ctorProperties = {};
            for (i = 0; i < /* initializes */ this.oneofsArray.length; ++i)
                ctorProperties[this._oneofsArray[i].resolve().name] = {
                    get: util.oneOfGetter(this._oneofsArray[i].oneof),
                    set: util.oneOfSetter(this._oneofsArray[i].oneof)
                };
            if (i)
                Object.defineProperties(ctor.prototype, ctorProperties);
        }
    }
});

/**
 * Generates a constructor function for the specified type.
 * @param {Type} mtype Message type
 * @returns {Codegen} Codegen instance
 */
Type.generateConstructor = function generateConstructor(mtype) {
    /* eslint-disable no-unexpected-multiline */
    var gen = util.codegen(["p"], mtype.name);
    // explicitly initialize mutable object/array fields so that these aren't just inherited from the prototype
    for (var i = 0, field; i < mtype.fieldsArray.length; ++i)
        if ((field = mtype._fieldsArray[i]).map) gen
            ("this%s={}", util.safeProp(field.name));
        else if (field.repeated) gen
            ("this%s=[]", util.safeProp(field.name));
    return gen
    ("if(p)for(var ks=Object.keys(p),i=0;i<ks.length;++i)if(p[ks[i]]!=null)") // omit undefined or null
        ("this[ks[i]]=p[ks[i]]");
    /* eslint-enable no-unexpected-multiline */
};

function clearCache(type) {
    type._fieldsById = type._fieldsArray = type._oneofsArray = null;
    delete type.encode;
    delete type.decode;
    delete type.verify;
    return type;
}

/**
 * Message type descriptor.
 * @interface IType
 * @extends INamespace
 * @property {Object.<string,IOneOf>} [oneofs] Oneof descriptors
 * @property {Object.<string,IField>} fields Field descriptors
 * @property {number[][]} [extensions] Extension ranges
 * @property {number[][]} [reserved] Reserved ranges
 * @property {boolean} [group=false] Whether a legacy group or not
 */

/**
 * Creates a message type from a message type descriptor.
 * @param {string} name Message name
 * @param {IType} json Message type descriptor
 * @returns {Type} Created message type
 */
Type.fromJSON = function fromJSON(name, json) {
    var type = new Type(name, json.options);
    type.extensions = json.extensions;
    type.reserved = json.reserved;
    var names = Object.keys(json.fields),
        i = 0;
    for (; i < names.length; ++i)
        type.add(
            ( typeof json.fields[names[i]].keyType !== "undefined"
            ? MapField.fromJSON
            : Field.fromJSON )(names[i], json.fields[names[i]])
        );
    if (json.oneofs)
        for (names = Object.keys(json.oneofs), i = 0; i < names.length; ++i)
            type.add(OneOf.fromJSON(names[i], json.oneofs[names[i]]));
    if (json.nested)
        for (names = Object.keys(json.nested), i = 0; i < names.length; ++i) {
            var nested = json.nested[names[i]];
            type.add( // most to least likely
                ( nested.id !== undefined
                ? Field.fromJSON
                : nested.fields !== undefined
                ? Type.fromJSON
                : nested.values !== undefined
                ? Enum.fromJSON
                : nested.methods !== undefined
                ? Service.fromJSON
                : Namespace.fromJSON )(names[i], nested)
            );
        }
    if (json.extensions && json.extensions.length)
        type.extensions = json.extensions;
    if (json.reserved && json.reserved.length)
        type.reserved = json.reserved;
    if (json.group)
        type.group = true;
    if (json.comment)
        type.comment = json.comment;
    return type;
};

/**
 * Converts this message type to a message type descriptor.
 * @param {IToJSONOptions} [toJSONOptions] JSON conversion options
 * @returns {IType} Message type descriptor
 */
Type.prototype.toJSON = function toJSON(toJSONOptions) {
    var inherited = Namespace.prototype.toJSON.call(this, toJSONOptions);
    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
    return util.toObject([
        "options"    , inherited && inherited.options || undefined,
        "oneofs"     , Namespace.arrayToJSON(this.oneofsArray, toJSONOptions),
        "fields"     , Namespace.arrayToJSON(this.fieldsArray.filter(function(obj) { return !obj.declaringField; }), toJSONOptions) || {},
        "extensions" , this.extensions && this.extensions.length ? this.extensions : undefined,
        "reserved"   , this.reserved && this.reserved.length ? this.reserved : undefined,
        "group"      , this.group || undefined,
        "nested"     , inherited && inherited.nested || undefined,
        "comment"    , keepComments ? this.comment : undefined
    ]);
};

/**
 * @override
 */
Type.prototype.resolveAll = function resolveAll() {
    var fields = this.fieldsArray, i = 0;
    while (i < fields.length)
        fields[i++].resolve();
    var oneofs = this.oneofsArray; i = 0;
    while (i < oneofs.length)
        oneofs[i++].resolve();
    return Namespace.prototype.resolveAll.call(this);
};

/**
 * @override
 */
Type.prototype.get = function get(name) {
    return this.fields[name]
        || this.oneofs && this.oneofs[name]
        || this.nested && this.nested[name]
        || null;
};

/**
 * Adds a nested object to this type.
 * @param {ReflectionObject} object Nested object to add
 * @returns {Type} `this`
 * @throws {TypeError} If arguments are invalid
 * @throws {Error} If there is already a nested object with this name or, if a field, when there is already a field with this id
 */
Type.prototype.add = function add(object) {

    if (this.get(object.name))
        throw Error("duplicate name '" + object.name + "' in " + this);

    if (object instanceof Field && object.extend === undefined) {
        // NOTE: Extension fields aren't actual fields on the declaring type, but nested objects.
        // The root object takes care of adding distinct sister-fields to the respective extended
        // type instead.

        // avoids calling the getter if not absolutely necessary because it's called quite frequently
        if (this._fieldsById ? /* istanbul ignore next */ this._fieldsById[object.id] : this.fieldsById[object.id])
            throw Error("duplicate id " + object.id + " in " + this);
        if (this.isReservedId(object.id))
            throw Error("id " + object.id + " is reserved in " + this);
        if (this.isReservedName(object.name))
            throw Error("name '" + object.name + "' is reserved in " + this);

        if (object.parent)
            object.parent.remove(object);
        this.fields[object.name] = object;
        object.message = this;
        object.onAdd(this);
        return clearCache(this);
    }
    if (object instanceof OneOf) {
        if (!this.oneofs)
            this.oneofs = {};
        this.oneofs[object.name] = object;
        object.onAdd(this);
        return clearCache(this);
    }
    return Namespace.prototype.add.call(this, object);
};

/**
 * Removes a nested object from this type.
 * @param {ReflectionObject} object Nested object to remove
 * @returns {Type} `this`
 * @throws {TypeError} If arguments are invalid
 * @throws {Error} If `object` is not a member of this type
 */
Type.prototype.remove = function remove(object) {
    if (object instanceof Field && object.extend === undefined) {
        // See Type#add for the reason why extension fields are excluded here.

        /* istanbul ignore if */
        if (!this.fields || this.fields[object.name] !== object)
            throw Error(object + " is not a member of " + this);

        delete this.fields[object.name];
        object.parent = null;
        object.onRemove(this);
        return clearCache(this);
    }
    if (object instanceof OneOf) {

        /* istanbul ignore if */
        if (!this.oneofs || this.oneofs[object.name] !== object)
            throw Error(object + " is not a member of " + this);

        delete this.oneofs[object.name];
        object.parent = null;
        object.onRemove(this);
        return clearCache(this);
    }
    return Namespace.prototype.remove.call(this, object);
};

/**
 * Tests if the specified id is reserved.
 * @param {number} id Id to test
 * @returns {boolean} `true` if reserved, otherwise `false`
 */
Type.prototype.isReservedId = function isReservedId(id) {
    return Namespace.isReservedId(this.reserved, id);
};

/**
 * Tests if the specified name is reserved.
 * @param {string} name Name to test
 * @returns {boolean} `true` if reserved, otherwise `false`
 */
Type.prototype.isReservedName = function isReservedName(name) {
    return Namespace.isReservedName(this.reserved, name);
};

/**
 * Creates a new message of this type using the specified properties.
 * @param {Object.<string,*>} [properties] Properties to set
 * @returns {Message<{}>} Message instance
 */
Type.prototype.create = function create(properties) {
    return new this.ctor(properties);
};

/**
 * Sets up {@link Type#encode|encode}, {@link Type#decode|decode} and {@link Type#verify|verify}.
 * @returns {Type} `this`
 */
Type.prototype.setup = function setup() {
    // Sets up everything at once so that the prototype chain does not have to be re-evaluated
    // multiple times (V8, soft-deopt prototype-check).

    var fullName = this.fullName,
        types    = [];
    for (var i = 0; i < /* initializes */ this.fieldsArray.length; ++i)
        types.push(this._fieldsArray[i].resolve().resolvedType);

    // Replace setup methods with type-specific generated functions
    this.encode = encoder(this)({
        Writer : Writer,
        types  : types,
        util   : util
    });
    this.decode = decoder(this)({
        Reader : Reader,
        types  : types,
        util   : util
    });
    this.verify = verifier(this)({
        types : types,
        util  : util
    });
    this.fromObject = converter.fromObject(this)({
        types : types,
        util  : util
    });
    this.toObject = converter.toObject(this)({
        types : types,
        util  : util
    });

    // Inject custom wrappers for common types
    var wrapper = wrappers[fullName];
    if (wrapper) {
        var originalThis = Object.create(this);
        // if (wrapper.fromObject) {
            originalThis.fromObject = this.fromObject;
            this.fromObject = wrapper.fromObject.bind(originalThis);
        // }
        // if (wrapper.toObject) {
            originalThis.toObject = this.toObject;
            this.toObject = wrapper.toObject.bind(originalThis);
        // }
    }

    return this;
};

/**
 * Encodes a message of this type. Does not implicitly {@link Type#verify|verify} messages.
 * @param {Message<{}>|Object.<string,*>} message Message instance or plain object
 * @param {Writer} [writer] Writer to encode to
 * @returns {Writer} writer
 */
Type.prototype.encode = function encode_setup(message, writer) {
    return this.setup().encode(message, writer); // overrides this method
};

/**
 * Encodes a message of this type preceeded by its byte length as a varint. Does not implicitly {@link Type#verify|verify} messages.
 * @param {Message<{}>|Object.<string,*>} message Message instance or plain object
 * @param {Writer} [writer] Writer to encode to
 * @returns {Writer} writer
 */
Type.prototype.encodeDelimited = function encodeDelimited(message, writer) {
    return this.encode(message, writer && writer.len ? writer.fork() : writer).ldelim();
};

/**
 * Decodes a message of this type.
 * @param {Reader|Uint8Array} reader Reader or buffer to decode from
 * @param {number} [length] Length of the message, if known beforehand
 * @returns {Message<{}>} Decoded message
 * @throws {Error} If the payload is not a reader or valid buffer
 * @throws {util.ProtocolError<{}>} If required fields are missing
 */
Type.prototype.decode = function decode_setup(reader, length) {
    return this.setup().decode(reader, length); // overrides this method
};

/**
 * Decodes a message of this type preceeded by its byte length as a varint.
 * @param {Reader|Uint8Array} reader Reader or buffer to decode from
 * @returns {Message<{}>} Decoded message
 * @throws {Error} If the payload is not a reader or valid buffer
 * @throws {util.ProtocolError} If required fields are missing
 */
Type.prototype.decodeDelimited = function decodeDelimited(reader) {
    if (!(reader instanceof Reader))
        reader = Reader.create(reader);
    return this.decode(reader, reader.uint32());
};

/**
 * Verifies that field values are valid and that required fields are present.
 * @param {Object.<string,*>} message Plain object to verify
 * @returns {null|string} `null` if valid, otherwise the reason why it is not
 */
Type.prototype.verify = function verify_setup(message) {
    return this.setup().verify(message); // overrides this method
};

/**
 * Creates a new message of this type from a plain object. Also converts values to their respective internal types.
 * @param {Object.<string,*>} object Plain object to convert
 * @returns {Message<{}>} Message instance
 */
Type.prototype.fromObject = function fromObject(object) {
    return this.setup().fromObject(object);
};

/**
 * Conversion options as used by {@link Type#toObject} and {@link Message.toObject}.
 * @interface IConversionOptions
 * @property {Function} [longs] Long conversion type.
 * Valid values are `String` and `Number` (the global types).
 * Defaults to copy the present value, which is a possibly unsafe number without and a {@link Long} with a long library.
 * @property {Function} [enums] Enum value conversion type.
 * Only valid value is `String` (the global type).
 * Defaults to copy the present value, which is the numeric id.
 * @property {Function} [bytes] Bytes value conversion type.
 * Valid values are `Array` and (a base64 encoded) `String` (the global types).
 * Defaults to copy the present value, which usually is a Buffer under node and an Uint8Array in the browser.
 * @property {boolean} [defaults=false] Also sets default values on the resulting object
 * @property {boolean} [arrays=false] Sets empty arrays for missing repeated fields even if `defaults=false`
 * @property {boolean} [objects=false] Sets empty objects for missing map fields even if `defaults=false`
 * @property {boolean} [oneofs=false] Includes virtual oneof properties set to the present field's name, if any
 * @property {boolean} [json=false] Performs additional JSON compatibility conversions, i.e. NaN and Infinity to strings
 */

/**
 * Creates a plain object from a message of this type. Also converts values to other types if specified.
 * @param {Message<{}>} message Message instance
 * @param {IConversionOptions} [options] Conversion options
 * @returns {Object.<string,*>} Plain object
 */
Type.prototype.toObject = function toObject(message, options) {
    return this.setup().toObject(message, options);
};

/**
 * Decorator function as returned by {@link Type.d} (TypeScript).
 * @typedef TypeDecorator
 * @type {function}
 * @param {Constructor<T>} target Target constructor
 * @returns {undefined}
 * @template T extends Message<T>
 */

/**
 * Type decorator (TypeScript).
 * @param {string} [typeName] Type name, defaults to the constructor's name
 * @returns {TypeDecorator<T>} Decorator function
 * @template T extends Message<T>
 */
Type.d = function decorateType(typeName) {
    return function typeDecorator(target) {
        util.decorateType(target, typeName);
    };
};

},{"./converter":13,"./decoder":14,"./encoder":15,"./enum":16,"./field":17,"./mapfield":21,"./message":22,"./namespace":24,"./oneof":26,"./reader":28,"./service":34,"./util":38,"./verifier":41,"./wrappers":42,"./writer":43}],37:[function(require,module,exports){
"use strict";

/**
 * Common type constants.
 * @namespace
 */
var types = exports;

var util = require("./util");

var s = [
    "double",   // 0
    "float",    // 1
    "int32",    // 2
    "uint32",   // 3
    "sint32",   // 4
    "fixed32",  // 5
    "sfixed32", // 6
    "int64",    // 7
    "uint64",   // 8
    "sint64",   // 9
    "fixed64",  // 10
    "sfixed64", // 11
    "bool",     // 12
    "string",   // 13
    "bytes"     // 14
];

function bake(values, offset) {
    var i = 0, o = {};
    offset |= 0;
    while (i < values.length) o[s[i + offset]] = values[i++];
    return o;
}

/**
 * Basic type wire types.
 * @type {Object.<string,number>}
 * @const
 * @property {number} double=1 Fixed64 wire type
 * @property {number} float=5 Fixed32 wire type
 * @property {number} int32=0 Varint wire type
 * @property {number} uint32=0 Varint wire type
 * @property {number} sint32=0 Varint wire type
 * @property {number} fixed32=5 Fixed32 wire type
 * @property {number} sfixed32=5 Fixed32 wire type
 * @property {number} int64=0 Varint wire type
 * @property {number} uint64=0 Varint wire type
 * @property {number} sint64=0 Varint wire type
 * @property {number} fixed64=1 Fixed64 wire type
 * @property {number} sfixed64=1 Fixed64 wire type
 * @property {number} bool=0 Varint wire type
 * @property {number} string=2 Ldelim wire type
 * @property {number} bytes=2 Ldelim wire type
 */
types.basic = bake([
    /* double   */ 1,
    /* float    */ 5,
    /* int32    */ 0,
    /* uint32   */ 0,
    /* sint32   */ 0,
    /* fixed32  */ 5,
    /* sfixed32 */ 5,
    /* int64    */ 0,
    /* uint64   */ 0,
    /* sint64   */ 0,
    /* fixed64  */ 1,
    /* sfixed64 */ 1,
    /* bool     */ 0,
    /* string   */ 2,
    /* bytes    */ 2
]);

/**
 * Basic type defaults.
 * @type {Object.<string,*>}
 * @const
 * @property {number} double=0 Double default
 * @property {number} float=0 Float default
 * @property {number} int32=0 Int32 default
 * @property {number} uint32=0 Uint32 default
 * @property {number} sint32=0 Sint32 default
 * @property {number} fixed32=0 Fixed32 default
 * @property {number} sfixed32=0 Sfixed32 default
 * @property {number} int64=0 Int64 default
 * @property {number} uint64=0 Uint64 default
 * @property {number} sint64=0 Sint32 default
 * @property {number} fixed64=0 Fixed64 default
 * @property {number} sfixed64=0 Sfixed64 default
 * @property {boolean} bool=false Bool default
 * @property {string} string="" String default
 * @property {Array.<number>} bytes=Array(0) Bytes default
 * @property {null} message=null Message default
 */
types.defaults = bake([
    /* double   */ 0,
    /* float    */ 0,
    /* int32    */ 0,
    /* uint32   */ 0,
    /* sint32   */ 0,
    /* fixed32  */ 0,
    /* sfixed32 */ 0,
    /* int64    */ 0,
    /* uint64   */ 0,
    /* sint64   */ 0,
    /* fixed64  */ 0,
    /* sfixed64 */ 0,
    /* bool     */ false,
    /* string   */ "",
    /* bytes    */ util.emptyArray,
    /* message  */ null
]);

/**
 * Basic long type wire types.
 * @type {Object.<string,number>}
 * @const
 * @property {number} int64=0 Varint wire type
 * @property {number} uint64=0 Varint wire type
 * @property {number} sint64=0 Varint wire type
 * @property {number} fixed64=1 Fixed64 wire type
 * @property {number} sfixed64=1 Fixed64 wire type
 */
types.long = bake([
    /* int64    */ 0,
    /* uint64   */ 0,
    /* sint64   */ 0,
    /* fixed64  */ 1,
    /* sfixed64 */ 1
], 7);

/**
 * Allowed types for map keys with their associated wire type.
 * @type {Object.<string,number>}
 * @const
 * @property {number} int32=0 Varint wire type
 * @property {number} uint32=0 Varint wire type
 * @property {number} sint32=0 Varint wire type
 * @property {number} fixed32=5 Fixed32 wire type
 * @property {number} sfixed32=5 Fixed32 wire type
 * @property {number} int64=0 Varint wire type
 * @property {number} uint64=0 Varint wire type
 * @property {number} sint64=0 Varint wire type
 * @property {number} fixed64=1 Fixed64 wire type
 * @property {number} sfixed64=1 Fixed64 wire type
 * @property {number} bool=0 Varint wire type
 * @property {number} string=2 Ldelim wire type
 */
types.mapKey = bake([
    /* int32    */ 0,
    /* uint32   */ 0,
    /* sint32   */ 0,
    /* fixed32  */ 5,
    /* sfixed32 */ 5,
    /* int64    */ 0,
    /* uint64   */ 0,
    /* sint64   */ 0,
    /* fixed64  */ 1,
    /* sfixed64 */ 1,
    /* bool     */ 0,
    /* string   */ 2
], 2);

/**
 * Allowed types for packed repeated fields with their associated wire type.
 * @type {Object.<string,number>}
 * @const
 * @property {number} double=1 Fixed64 wire type
 * @property {number} float=5 Fixed32 wire type
 * @property {number} int32=0 Varint wire type
 * @property {number} uint32=0 Varint wire type
 * @property {number} sint32=0 Varint wire type
 * @property {number} fixed32=5 Fixed32 wire type
 * @property {number} sfixed32=5 Fixed32 wire type
 * @property {number} int64=0 Varint wire type
 * @property {number} uint64=0 Varint wire type
 * @property {number} sint64=0 Varint wire type
 * @property {number} fixed64=1 Fixed64 wire type
 * @property {number} sfixed64=1 Fixed64 wire type
 * @property {number} bool=0 Varint wire type
 */
types.packed = bake([
    /* double   */ 1,
    /* float    */ 5,
    /* int32    */ 0,
    /* uint32   */ 0,
    /* sint32   */ 0,
    /* fixed32  */ 5,
    /* sfixed32 */ 5,
    /* int64    */ 0,
    /* uint64   */ 0,
    /* sint64   */ 0,
    /* fixed64  */ 1,
    /* sfixed64 */ 1,
    /* bool     */ 0
]);

},{"./util":38}],38:[function(require,module,exports){
"use strict";

/**
 * Various utility functions.
 * @namespace
 */
var util = module.exports = require("./util/minimal");

var roots = require("./roots");

var Type, // cyclic
    Enum;

util.codegen = require("@protobufjs/codegen");
util.fetch   = require("@protobufjs/fetch");
util.path    = require("@protobufjs/path");

/**
 * Node's fs module if available.
 * @type {Object.<string,*>}
 */
util.fs = util.inquire("fs");

/**
 * Converts an object's values to an array.
 * @param {Object.<string,*>} object Object to convert
 * @returns {Array.<*>} Converted array
 */
util.toArray = function toArray(object) {
    if (object) {
        var keys  = Object.keys(object),
            array = new Array(keys.length),
            index = 0;
        while (index < keys.length)
            array[index] = object[keys[index++]];
        return array;
    }
    return [];
};

/**
 * Converts an array of keys immediately followed by their respective value to an object, omitting undefined values.
 * @param {Array.<*>} array Array to convert
 * @returns {Object.<string,*>} Converted object
 */
util.toObject = function toObject(array) {
    var object = {},
        index  = 0;
    while (index < array.length) {
        var key = array[index++],
            val = array[index++];
        if (val !== undefined)
            object[key] = val;
    }
    return object;
};

var safePropBackslashRe = /\\/g,
    safePropQuoteRe     = /"/g;

/**
 * Tests whether the specified name is a reserved word in JS.
 * @param {string} name Name to test
 * @returns {boolean} `true` if reserved, otherwise `false`
 */
util.isReserved = function isReserved(name) {
    return /^(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$/.test(name);
};

/**
 * Returns a safe property accessor for the specified property name.
 * @param {string} prop Property name
 * @returns {string} Safe accessor
 */
util.safeProp = function safeProp(prop) {
    if (!/^[$\w_]+$/.test(prop) || util.isReserved(prop))
        return "[\"" + prop.replace(safePropBackslashRe, "\\\\").replace(safePropQuoteRe, "\\\"") + "\"]";
    return "." + prop;
};

/**
 * Converts the first character of a string to upper case.
 * @param {string} str String to convert
 * @returns {string} Converted string
 */
util.ucFirst = function ucFirst(str) {
    return str.charAt(0).toUpperCase() + str.substring(1);
};

var camelCaseRe = /_([a-z])/g;

/**
 * Converts a string to camel case.
 * @param {string} str String to convert
 * @returns {string} Converted string
 */
util.camelCase = function camelCase(str) {
    return str.substring(0, 1)
         + str.substring(1)
               .replace(camelCaseRe, function($0, $1) { return $1.toUpperCase(); });
};

/**
 * Compares reflected fields by id.
 * @param {Field} a First field
 * @param {Field} b Second field
 * @returns {number} Comparison value
 */
util.compareFieldsById = function compareFieldsById(a, b) {
    return a.id - b.id;
};

/**
 * Decorator helper for types (TypeScript).
 * @param {Constructor<T>} ctor Constructor function
 * @param {string} [typeName] Type name, defaults to the constructor's name
 * @returns {Type} Reflected type
 * @template T extends Message<T>
 * @property {Root} root Decorators root
 */
util.decorateType = function decorateType(ctor, typeName) {

    /* istanbul ignore if */
    if (ctor.$type) {
        if (typeName && ctor.$type.name !== typeName) {
            util.decorateRoot.remove(ctor.$type);
            ctor.$type.name = typeName;
            util.decorateRoot.add(ctor.$type);
        }
        return ctor.$type;
    }

    /* istanbul ignore next */
    if (!Type)
        Type = require("./type");

    var type = new Type(typeName || ctor.name);
    util.decorateRoot.add(type);
    type.ctor = ctor; // sets up .encode, .decode etc.
    Object.defineProperty(ctor, "$type", { value: type, enumerable: false });
    Object.defineProperty(ctor.prototype, "$type", { value: type, enumerable: false });
    return type;
};

var decorateEnumIndex = 0;

/**
 * Decorator helper for enums (TypeScript).
 * @param {Object} object Enum object
 * @returns {Enum} Reflected enum
 */
util.decorateEnum = function decorateEnum(object) {

    /* istanbul ignore if */
    if (object.$type)
        return object.$type;

    /* istanbul ignore next */
    if (!Enum)
        Enum = require("./enum");

    var enm = new Enum("Enum" + decorateEnumIndex++, object);
    util.decorateRoot.add(enm);
    Object.defineProperty(object, "$type", { value: enm, enumerable: false });
    return enm;
};

/**
 * Decorator root (TypeScript).
 * @name util.decorateRoot
 * @type {Root}
 * @readonly
 */
Object.defineProperty(util, "decorateRoot", {
    get: function() {
        return roots["decorated"] || (roots["decorated"] = new (require("./root"))());
    }
});

},{"./enum":16,"./root":30,"./roots":31,"./type":36,"./util/minimal":40,"@protobufjs/codegen":3,"@protobufjs/fetch":5,"@protobufjs/path":8}],39:[function(require,module,exports){
"use strict";
module.exports = LongBits;

var util = require("../util/minimal");

/**
 * Constructs new long bits.
 * @classdesc Helper class for working with the low and high bits of a 64 bit value.
 * @memberof util
 * @constructor
 * @param {number} lo Low 32 bits, unsigned
 * @param {number} hi High 32 bits, unsigned
 */
function LongBits(lo, hi) {

    // note that the casts below are theoretically unnecessary as of today, but older statically
    // generated converter code might still call the ctor with signed 32bits. kept for compat.

    /**
     * Low bits.
     * @type {number}
     */
    this.lo = lo >>> 0;

    /**
     * High bits.
     * @type {number}
     */
    this.hi = hi >>> 0;
}

/**
 * Zero bits.
 * @memberof util.LongBits
 * @type {util.LongBits}
 */
var zero = LongBits.zero = new LongBits(0, 0);

zero.toNumber = function() { return 0; };
zero.zzEncode = zero.zzDecode = function() { return this; };
zero.length = function() { return 1; };

/**
 * Zero hash.
 * @memberof util.LongBits
 * @type {string}
 */
var zeroHash = LongBits.zeroHash = "\0\0\0\0\0\0\0\0";

/**
 * Constructs new long bits from the specified number.
 * @param {number} value Value
 * @returns {util.LongBits} Instance
 */
LongBits.fromNumber = function fromNumber(value) {
    if (value === 0)
        return zero;
    var sign = value < 0;
    if (sign)
        value = -value;
    var lo = value >>> 0,
        hi = (value - lo) / 4294967296 >>> 0;
    if (sign) {
        hi = ~hi >>> 0;
        lo = ~lo >>> 0;
        if (++lo > 4294967295) {
            lo = 0;
            if (++hi > 4294967295)
                hi = 0;
        }
    }
    return new LongBits(lo, hi);
};

/**
 * Constructs new long bits from a number, long or string.
 * @param {Long|number|string} value Value
 * @returns {util.LongBits} Instance
 */
LongBits.from = function from(value) {
    if (typeof value === "number")
        return LongBits.fromNumber(value);
    if (util.isString(value)) {
        /* istanbul ignore else */
        if (util.Long)
            value = util.Long.fromString(value);
        else
            return LongBits.fromNumber(parseInt(value, 10));
    }
    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;
};

/**
 * Converts this long bits to a possibly unsafe JavaScript number.
 * @param {boolean} [unsigned=false] Whether unsigned or not
 * @returns {number} Possibly unsafe number
 */
LongBits.prototype.toNumber = function toNumber(unsigned) {
    if (!unsigned && this.hi >>> 31) {
        var lo = ~this.lo + 1 >>> 0,
            hi = ~this.hi     >>> 0;
        if (!lo)
            hi = hi + 1 >>> 0;
        return -(lo + hi * 4294967296);
    }
    return this.lo + this.hi * 4294967296;
};

/**
 * Converts this long bits to a long.
 * @param {boolean} [unsigned=false] Whether unsigned or not
 * @returns {Long} Long
 */
LongBits.prototype.toLong = function toLong(unsigned) {
    return util.Long
        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))
        /* istanbul ignore next */
        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };
};

var charCodeAt = String.prototype.charCodeAt;

/**
 * Constructs new long bits from the specified 8 characters long hash.
 * @param {string} hash Hash
 * @returns {util.LongBits} Bits
 */
LongBits.fromHash = function fromHash(hash) {
    if (hash === zeroHash)
        return zero;
    return new LongBits(
        ( charCodeAt.call(hash, 0)
        | charCodeAt.call(hash, 1) << 8
        | charCodeAt.call(hash, 2) << 16
        | charCodeAt.call(hash, 3) << 24) >>> 0
    ,
        ( charCodeAt.call(hash, 4)
        | charCodeAt.call(hash, 5) << 8
        | charCodeAt.call(hash, 6) << 16
        | charCodeAt.call(hash, 7) << 24) >>> 0
    );
};

/**
 * Converts this long bits to a 8 characters long hash.
 * @returns {string} Hash
 */
LongBits.prototype.toHash = function toHash() {
    return String.fromCharCode(
        this.lo        & 255,
        this.lo >>> 8  & 255,
        this.lo >>> 16 & 255,
        this.lo >>> 24      ,
        this.hi        & 255,
        this.hi >>> 8  & 255,
        this.hi >>> 16 & 255,
        this.hi >>> 24
    );
};

/**
 * Zig-zag encodes this long bits.
 * @returns {util.LongBits} `this`
 */
LongBits.prototype.zzEncode = function zzEncode() {
    var mask =   this.hi >> 31;
    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;
    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;
    return this;
};

/**
 * Zig-zag decodes this long bits.
 * @returns {util.LongBits} `this`
 */
LongBits.prototype.zzDecode = function zzDecode() {
    var mask = -(this.lo & 1);
    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;
    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;
    return this;
};

/**
 * Calculates the length of this longbits when encoded as a varint.
 * @returns {number} Length
 */
LongBits.prototype.length = function length() {
    var part0 =  this.lo,
        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,
        part2 =  this.hi >>> 24;
    return part2 === 0
         ? part1 === 0
           ? part0 < 16384
             ? part0 < 128 ? 1 : 2
             : part0 < 2097152 ? 3 : 4
           : part1 < 16384
             ? part1 < 128 ? 5 : 6
             : part1 < 2097152 ? 7 : 8
         : part2 < 128 ? 9 : 10;
};

},{"../util/minimal":40}],40:[function(require,module,exports){
(function (global){
"use strict";
var util = exports;

// used to return a Promise where callback is omitted
util.asPromise = require("@protobufjs/aspromise");

// converts to / from base64 encoded strings
util.base64 = require("@protobufjs/base64");

// base class of rpc.Service
util.EventEmitter = require("@protobufjs/eventemitter");

// float handling accross browsers
util.float = require("@protobufjs/float");

// requires modules optionally and hides the call from bundlers
util.inquire = require("@protobufjs/inquire");

// converts to / from utf8 encoded strings
util.utf8 = require("@protobufjs/utf8");

// provides a node-like buffer pool in the browser
util.pool = require("@protobufjs/pool");

// utility to work with the low and high bits of a 64 bit value
util.LongBits = require("./longbits");

// global object reference
util.global = typeof window !== "undefined" && window
           || typeof global !== "undefined" && global
           || typeof self   !== "undefined" && self
           || this; // eslint-disable-line no-invalid-this

/**
 * An immuable empty array.
 * @memberof util
 * @type {Array.<*>}
 * @const
 */
util.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes

/**
 * An immutable empty object.
 * @type {Object}
 * @const
 */
util.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes

/**
 * Whether running within node or not.
 * @memberof util
 * @type {boolean}
 * @const
 */
util.isNode = Boolean(util.global.process && util.global.process.versions && util.global.process.versions.node);

/**
 * Tests if the specified value is an integer.
 * @function
 * @param {*} value Value to test
 * @returns {boolean} `true` if the value is an integer
 */
util.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {
    return typeof value === "number" && isFinite(value) && Math.floor(value) === value;
};

/**
 * Tests if the specified value is a string.
 * @param {*} value Value to test
 * @returns {boolean} `true` if the value is a string
 */
util.isString = function isString(value) {
    return typeof value === "string" || value instanceof String;
};

/**
 * Tests if the specified value is a non-null object.
 * @param {*} value Value to test
 * @returns {boolean} `true` if the value is a non-null object
 */
util.isObject = function isObject(value) {
    return value && typeof value === "object";
};

/**
 * Checks if a property on a message is considered to be present.
 * This is an alias of {@link util.isSet}.
 * @function
 * @param {Object} obj Plain object or message instance
 * @param {string} prop Property name
 * @returns {boolean} `true` if considered to be present, otherwise `false`
 */
util.isset =

/**
 * Checks if a property on a message is considered to be present.
 * @param {Object} obj Plain object or message instance
 * @param {string} prop Property name
 * @returns {boolean} `true` if considered to be present, otherwise `false`
 */
util.isSet = function isSet(obj, prop) {
    var value = obj[prop];
    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins
        return typeof value !== "object" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;
    return false;
};

/**
 * Any compatible Buffer instance.
 * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.
 * @interface Buffer
 * @extends Uint8Array
 */

/**
 * Node's Buffer class if available.
 * @type {Constructor<Buffer>}
 */
util.Buffer = (function() {
    try {
        var Buffer = util.inquire("buffer").Buffer;
        // refuse to use non-node buffers if not explicitly assigned (perf reasons):
        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;
    } catch (e) {
        /* istanbul ignore next */
        return null;
    }
})();

// Internal alias of or polyfull for Buffer.from.
util._Buffer_from = null;

// Internal alias of or polyfill for Buffer.allocUnsafe.
util._Buffer_allocUnsafe = null;

/**
 * Creates a new buffer of whatever type supported by the environment.
 * @param {number|number[]} [sizeOrArray=0] Buffer size or number array
 * @returns {Uint8Array|Buffer} Buffer
 */
util.newBuffer = function newBuffer(sizeOrArray) {
    /* istanbul ignore next */
    return typeof sizeOrArray === "number"
        ? util.Buffer
            ? util._Buffer_allocUnsafe(sizeOrArray)
            : new util.Array(sizeOrArray)
        : util.Buffer
            ? util._Buffer_from(sizeOrArray)
            : typeof Uint8Array === "undefined"
                ? sizeOrArray
                : new Uint8Array(sizeOrArray);
};

/**
 * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.
 * @type {Constructor<Uint8Array>}
 */
util.Array = typeof Uint8Array !== "undefined" ? Uint8Array /* istanbul ignore next */ : Array;

/**
 * Any compatible Long instance.
 * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.
 * @interface Long
 * @property {number} low Low bits
 * @property {number} high High bits
 * @property {boolean} unsigned Whether unsigned or not
 */

/**
 * Long.js's Long class if available.
 * @type {Constructor<Long>}
 */
util.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long
         || /* istanbul ignore next */ util.global.Long
         || util.inquire("long");

/**
 * Regular expression used to verify 2 bit (`bool`) map keys.
 * @type {RegExp}
 * @const
 */
util.key2Re = /^true|false|0|1$/;

/**
 * Regular expression used to verify 32 bit (`int32` etc.) map keys.
 * @type {RegExp}
 * @const
 */
util.key32Re = /^-?(?:0|[1-9][0-9]*)$/;

/**
 * Regular expression used to verify 64 bit (`int64` etc.) map keys.
 * @type {RegExp}
 * @const
 */
util.key64Re = /^(?:[\\x00-\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;

/**
 * Converts a number or long to an 8 characters long hash string.
 * @param {Long|number} value Value to convert
 * @returns {string} Hash
 */
util.longToHash = function longToHash(value) {
    return value
        ? util.LongBits.from(value).toHash()
        : util.LongBits.zeroHash;
};

/**
 * Converts an 8 characters long hash string to a long or number.
 * @param {string} hash Hash
 * @param {boolean} [unsigned=false] Whether unsigned or not
 * @returns {Long|number} Original value
 */
util.longFromHash = function longFromHash(hash, unsigned) {
    var bits = util.LongBits.fromHash(hash);
    if (util.Long)
        return util.Long.fromBits(bits.lo, bits.hi, unsigned);
    return bits.toNumber(Boolean(unsigned));
};

/**
 * Merges the properties of the source object into the destination object.
 * @memberof util
 * @param {Object.<string,*>} dst Destination object
 * @param {Object.<string,*>} src Source object
 * @param {boolean} [ifNotSet=false] Merges only if the key is not already set
 * @returns {Object.<string,*>} Destination object
 */
function merge(dst, src, ifNotSet) { // used by converters
    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)
        if (dst[keys[i]] === undefined || !ifNotSet)
            dst[keys[i]] = src[keys[i]];
    return dst;
}

util.merge = merge;

/**
 * Converts the first character of a string to lower case.
 * @param {string} str String to convert
 * @returns {string} Converted string
 */
util.lcFirst = function lcFirst(str) {
    return str.charAt(0).toLowerCase() + str.substring(1);
};

/**
 * Creates a custom error constructor.
 * @memberof util
 * @param {string} name Error name
 * @returns {Constructor<Error>} Custom error constructor
 */
function newError(name) {

    function CustomError(message, properties) {

        if (!(this instanceof CustomError))
            return new CustomError(message, properties);

        // Error.call(this, message);
        // ^ just returns a new error instance because the ctor can be called as a function

        Object.defineProperty(this, "message", { get: function() { return message; } });

        /* istanbul ignore next */
        if (Error.captureStackTrace) // node
            Error.captureStackTrace(this, CustomError);
        else
            Object.defineProperty(this, "stack", { value: (new Error()).stack || "" });

        if (properties)
            merge(this, properties);
    }

    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;

    Object.defineProperty(CustomError.prototype, "name", { get: function() { return name; } });

    CustomError.prototype.toString = function toString() {
        return this.name + ": " + this.message;
    };

    return CustomError;
}

util.newError = newError;

/**
 * Constructs a new protocol error.
 * @classdesc Error subclass indicating a protocol specifc error.
 * @memberof util
 * @extends Error
 * @template T extends Message<T>
 * @constructor
 * @param {string} message Error message
 * @param {Object.<string,*>} [properties] Additional properties
 * @example
 * try {
 *     MyMessage.decode(someBuffer); // throws if required fields are missing
 * } catch (e) {
 *     if (e instanceof ProtocolError && e.instance)
 *         console.log("decoded so far: " + JSON.stringify(e.instance));
 * }
 */
util.ProtocolError = newError("ProtocolError");

/**
 * So far decoded message instance.
 * @name util.ProtocolError#instance
 * @type {Message<T>}
 */

/**
 * A OneOf getter as returned by {@link util.oneOfGetter}.
 * @typedef OneOfGetter
 * @type {function}
 * @returns {string|undefined} Set field name, if any
 */

/**
 * Builds a getter for a oneof's present field name.
 * @param {string[]} fieldNames Field names
 * @returns {OneOfGetter} Unbound getter
 */
util.oneOfGetter = function getOneOf(fieldNames) {
    var fieldMap = {};
    for (var i = 0; i < fieldNames.length; ++i)
        fieldMap[fieldNames[i]] = 1;

    /**
     * @returns {string|undefined} Set field name, if any
     * @this Object
     * @ignore
     */
    return function() { // eslint-disable-line consistent-return
        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)
            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)
                return keys[i];
    };
};

/**
 * A OneOf setter as returned by {@link util.oneOfSetter}.
 * @typedef OneOfSetter
 * @type {function}
 * @param {string|undefined} value Field name
 * @returns {undefined}
 */

/**
 * Builds a setter for a oneof's present field name.
 * @param {string[]} fieldNames Field names
 * @returns {OneOfSetter} Unbound setter
 */
util.oneOfSetter = function setOneOf(fieldNames) {

    /**
     * @param {string} name Field name
     * @returns {undefined}
     * @this Object
     * @ignore
     */
    return function(name) {
        for (var i = 0; i < fieldNames.length; ++i)
            if (fieldNames[i] !== name)
                delete this[fieldNames[i]];
    };
};

/**
 * Default conversion options used for {@link Message#toJSON} implementations.
 *
 * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:
 *
 * - Longs become strings
 * - Enums become string keys
 * - Bytes become base64 encoded strings
 * - (Sub-)Messages become plain objects
 * - Maps become plain objects with all string keys
 * - Repeated fields become arrays
 * - NaN and Infinity for float and double fields become strings
 *
 * @type {IConversionOptions}
 * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json
 */
util.toJSONOptions = {
    longs: String,
    enums: String,
    bytes: String,
    json: true
};

// Sets up buffer utility according to the environment (called in index-minimal)
util._configure = function() {
    var Buffer = util.Buffer;
    /* istanbul ignore if */
    if (!Buffer) {
        util._Buffer_from = util._Buffer_allocUnsafe = null;
        return;
    }
    // because node 4.x buffers are incompatible & immutable
    // see: https://github.com/dcodeIO/protobuf.js/pull/665
    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||
        /* istanbul ignore next */
        function Buffer_from(value, encoding) {
            return new Buffer(value, encoding);
        };
    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||
        /* istanbul ignore next */
        function Buffer_allocUnsafe(size) {
            return new Buffer(size);
        };
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./longbits":39,"@protobufjs/aspromise":1,"@protobufjs/base64":2,"@protobufjs/eventemitter":4,"@protobufjs/float":6,"@protobufjs/inquire":7,"@protobufjs/pool":9,"@protobufjs/utf8":10}],41:[function(require,module,exports){
"use strict";
module.exports = verifier;

var Enum      = require("./enum"),
    util      = require("./util");

function invalid(field, expected) {
    return field.name + ": " + expected + (field.repeated && expected !== "array" ? "[]" : field.map && expected !== "object" ? "{k:"+field.keyType+"}" : "") + " expected";
}

/**
 * Generates a partial value verifier.
 * @param {Codegen} gen Codegen instance
 * @param {Field} field Reflected field
 * @param {number} fieldIndex Field index
 * @param {string} ref Variable reference
 * @returns {Codegen} Codegen instance
 * @ignore
 */
function genVerifyValue(gen, field, fieldIndex, ref) {
    /* eslint-disable no-unexpected-multiline */
    if (field.resolvedType) {
        if (field.resolvedType instanceof Enum) { gen
            ("switch(%s){", ref)
                ("default:")
                    ("return%j", invalid(field, "enum value"));
            for (var keys = Object.keys(field.resolvedType.values), j = 0; j < keys.length; ++j) gen
                ("case %i:", field.resolvedType.values[keys[j]]);
            gen
                    ("break")
            ("}");
        } else {
            gen
            ("{")
                ("var e=types[%i].verify(%s);", fieldIndex, ref)
                ("if(e)")
                    ("return%j+e", field.name + ".")
            ("}");
        }
    } else {
        switch (field.type) {
            case "int32":
            case "uint32":
            case "sint32":
            case "fixed32":
            case "sfixed32": gen
                ("if(!util.isInteger(%s))", ref)
                    ("return%j", invalid(field, "integer"));
                break;
            case "int64":
            case "uint64":
            case "sint64":
            case "fixed64":
            case "sfixed64": gen
                ("if(!util.isInteger(%s)&&!(%s&&util.isInteger(%s.low)&&util.isInteger(%s.high)))", ref, ref, ref, ref)
                    ("return%j", invalid(field, "integer|Long"));
                break;
            case "float":
            case "double": gen
                ("if(typeof %s!==\"number\")", ref)
                    ("return%j", invalid(field, "number"));
                break;
            case "bool": gen
                ("if(typeof %s!==\"boolean\")", ref)
                    ("return%j", invalid(field, "boolean"));
                break;
            case "string": gen
                ("if(!util.isString(%s))", ref)
                    ("return%j", invalid(field, "string"));
                break;
            case "bytes": gen
                ("if(!(%s&&typeof %s.length===\"number\"||util.isString(%s)))", ref, ref, ref)
                    ("return%j", invalid(field, "buffer"));
                break;
        }
    }
    return gen;
    /* eslint-enable no-unexpected-multiline */
}

/**
 * Generates a partial key verifier.
 * @param {Codegen} gen Codegen instance
 * @param {Field} field Reflected field
 * @param {string} ref Variable reference
 * @returns {Codegen} Codegen instance
 * @ignore
 */
function genVerifyKey(gen, field, ref) {
    /* eslint-disable no-unexpected-multiline */
    switch (field.keyType) {
        case "int32":
        case "uint32":
        case "sint32":
        case "fixed32":
        case "sfixed32": gen
            ("if(!util.key32Re.test(%s))", ref)
                ("return%j", invalid(field, "integer key"));
            break;
        case "int64":
        case "uint64":
        case "sint64":
        case "fixed64":
        case "sfixed64": gen
            ("if(!util.key64Re.test(%s))", ref) // see comment above: x is ok, d is not
                ("return%j", invalid(field, "integer|Long key"));
            break;
        case "bool": gen
            ("if(!util.key2Re.test(%s))", ref)
                ("return%j", invalid(field, "boolean key"));
            break;
    }
    return gen;
    /* eslint-enable no-unexpected-multiline */
}

/**
 * Generates a verifier specific to the specified message type.
 * @param {Type} mtype Message type
 * @returns {Codegen} Codegen instance
 */
function verifier(mtype) {
    /* eslint-disable no-unexpected-multiline */

    var gen = util.codegen(["m"], mtype.name + "$verify")
    ("if(typeof m!==\"object\"||m===null)")
        ("return%j", "object expected");
    var oneofs = mtype.oneofsArray,
        seenFirstField = {};
    if (oneofs.length) gen
    ("var p={}");

    for (var i = 0; i < /* initializes */ mtype.fieldsArray.length; ++i) {
        var field = mtype._fieldsArray[i].resolve(),
            ref   = "m" + util.safeProp(field.name);

        if (field.optional) gen
        ("if(%s!=null&&m.hasOwnProperty(%j)){", ref, field.name); // !== undefined && !== null

        // map fields
        if (field.map) { gen
            ("if(!util.isObject(%s))", ref)
                ("return%j", invalid(field, "object"))
            ("var k=Object.keys(%s)", ref)
            ("for(var i=0;i<k.length;++i){");
                genVerifyKey(gen, field, "k[i]");
                genVerifyValue(gen, field, i, ref + "[k[i]]")
            ("}");

        // repeated fields
        } else if (field.repeated) { gen
            ("if(!Array.isArray(%s))", ref)
                ("return%j", invalid(field, "array"))
            ("for(var i=0;i<%s.length;++i){", ref);
                genVerifyValue(gen, field, i, ref + "[i]")
            ("}");

        // required or present fields
        } else {
            if (field.partOf) {
                var oneofProp = util.safeProp(field.partOf.name);
                if (seenFirstField[field.partOf.name] === 1) gen
            ("if(p%s===1)", oneofProp)
                ("return%j", field.partOf.name + ": multiple values");
                seenFirstField[field.partOf.name] = 1;
                gen
            ("p%s=1", oneofProp);
            }
            genVerifyValue(gen, field, i, ref);
        }
        if (field.optional) gen
        ("}");
    }
    return gen
    ("return null");
    /* eslint-enable no-unexpected-multiline */
}
},{"./enum":16,"./util":38}],42:[function(require,module,exports){
"use strict";

/**
 * Wrappers for common types.
 * @type {Object.<string,IWrapper>}
 * @const
 */
var wrappers = exports;

var Message = require("./message");

/**
 * From object converter part of an {@link IWrapper}.
 * @typedef WrapperFromObjectConverter
 * @type {function}
 * @param {Object.<string,*>} object Plain object
 * @returns {Message<{}>} Message instance
 * @this Type
 */

/**
 * To object converter part of an {@link IWrapper}.
 * @typedef WrapperToObjectConverter
 * @type {function}
 * @param {Message<{}>} message Message instance
 * @param {IConversionOptions} [options] Conversion options
 * @returns {Object.<string,*>} Plain object
 * @this Type
 */

/**
 * Common type wrapper part of {@link wrappers}.
 * @interface IWrapper
 * @property {WrapperFromObjectConverter} [fromObject] From object converter
 * @property {WrapperToObjectConverter} [toObject] To object converter
 */

// Custom wrapper for Any
wrappers[".google.protobuf.Any"] = {

    fromObject: function(object) {

        // unwrap value type if mapped
        if (object && object["@type"]) {
            var type = this.lookup(object["@type"]);
            /* istanbul ignore else */
            if (type) {
                // type_url does not accept leading "."
                var type_url = object["@type"].charAt(0) === "." ?
                    object["@type"].substr(1) : object["@type"];
                // type_url prefix is optional, but path seperator is required
                return this.create({
                    type_url: "/" + type_url,
                    value: type.encode(type.fromObject(object)).finish()
                });
            }
        }

        return this.fromObject(object);
    },

    toObject: function(message, options) {

        // decode value if requested and unmapped
        if (options && options.json && message.type_url && message.value) {
            // Only use fully qualified type name after the last '/'
            var name = message.type_url.substring(message.type_url.lastIndexOf("/") + 1);
            var type = this.lookup(name);
            /* istanbul ignore else */
            if (type)
                message = type.decode(message.value);
        }

        // wrap value if unmapped
        if (!(message instanceof this.ctor) && message instanceof Message) {
            var object = message.$type.toObject(message, options);
            object["@type"] = message.$type.fullName;
            return object;
        }

        return this.toObject(message, options);
    }
};

},{"./message":22}],43:[function(require,module,exports){
"use strict";
module.exports = Writer;

var util      = require("./util/minimal");

var BufferWriter; // cyclic

var LongBits  = util.LongBits,
    base64    = util.base64,
    utf8      = util.utf8;

/**
 * Constructs a new writer operation instance.
 * @classdesc Scheduled writer operation.
 * @constructor
 * @param {function(*, Uint8Array, number)} fn Function to call
 * @param {number} len Value byte length
 * @param {*} val Value to write
 * @ignore
 */
function Op(fn, len, val) {

    /**
     * Function to call.
     * @type {function(Uint8Array, number, *)}
     */
    this.fn = fn;

    /**
     * Value byte length.
     * @type {number}
     */
    this.len = len;

    /**
     * Next operation.
     * @type {Writer.Op|undefined}
     */
    this.next = undefined;

    /**
     * Value to write.
     * @type {*}
     */
    this.val = val; // type varies
}

/* istanbul ignore next */
function noop() {} // eslint-disable-line no-empty-function

/**
 * Constructs a new writer state instance.
 * @classdesc Copied writer state.
 * @memberof Writer
 * @constructor
 * @param {Writer} writer Writer to copy state from
 * @ignore
 */
function State(writer) {

    /**
     * Current head.
     * @type {Writer.Op}
     */
    this.head = writer.head;

    /**
     * Current tail.
     * @type {Writer.Op}
     */
    this.tail = writer.tail;

    /**
     * Current buffer length.
     * @type {number}
     */
    this.len = writer.len;

    /**
     * Next state.
     * @type {State|null}
     */
    this.next = writer.states;
}

/**
 * Constructs a new writer instance.
 * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.
 * @constructor
 */
function Writer() {

    /**
     * Current length.
     * @type {number}
     */
    this.len = 0;

    /**
     * Operations head.
     * @type {Object}
     */
    this.head = new Op(noop, 0, 0);

    /**
     * Operations tail
     * @type {Object}
     */
    this.tail = this.head;

    /**
     * Linked forked states.
     * @type {Object|null}
     */
    this.states = null;

    // When a value is written, the writer calculates its byte length and puts it into a linked
    // list of operations to perform when finish() is called. This both allows us to allocate
    // buffers of the exact required size and reduces the amount of work we have to do compared
    // to first calculating over objects and then encoding over objects. In our case, the encoding
    // part is just a linked list walk calling operations with already prepared values.
}

/**
 * Creates a new writer.
 * @function
 * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}
 */
Writer.create = util.Buffer
    ? function create_buffer_setup() {
        return (Writer.create = function create_buffer() {
            return new BufferWriter();
        })();
    }
    /* istanbul ignore next */
    : function create_array() {
        return new Writer();
    };

/**
 * Allocates a buffer of the specified size.
 * @param {number} size Buffer size
 * @returns {Uint8Array} Buffer
 */
Writer.alloc = function alloc(size) {
    return new util.Array(size);
};

// Use Uint8Array buffer pool in the browser, just like node does with buffers
/* istanbul ignore else */
if (util.Array !== Array)
    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);

/**
 * Pushes a new operation to the queue.
 * @param {function(Uint8Array, number, *)} fn Function to call
 * @param {number} len Value byte length
 * @param {number} val Value to write
 * @returns {Writer} `this`
 * @private
 */
Writer.prototype._push = function push(fn, len, val) {
    this.tail = this.tail.next = new Op(fn, len, val);
    this.len += len;
    return this;
};

function writeByte(val, buf, pos) {
    buf[pos] = val & 255;
}

function writeVarint32(val, buf, pos) {
    while (val > 127) {
        buf[pos++] = val & 127 | 128;
        val >>>= 7;
    }
    buf[pos] = val;
}

/**
 * Constructs a new varint writer operation instance.
 * @classdesc Scheduled varint writer operation.
 * @extends Op
 * @constructor
 * @param {number} len Value byte length
 * @param {number} val Value to write
 * @ignore
 */
function VarintOp(len, val) {
    this.len = len;
    this.next = undefined;
    this.val = val;
}

VarintOp.prototype = Object.create(Op.prototype);
VarintOp.prototype.fn = writeVarint32;

/**
 * Writes an unsigned 32 bit value as a varint.
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.uint32 = function write_uint32(value) {
    // here, the call to this.push has been inlined and a varint specific Op subclass is used.
    // uint32 is by far the most frequently used operation and benefits significantly from this.
    this.len += (this.tail = this.tail.next = new VarintOp(
        (value = value >>> 0)
                < 128       ? 1
        : value < 16384     ? 2
        : value < 2097152   ? 3
        : value < 268435456 ? 4
        :                     5,
    value)).len;
    return this;
};

/**
 * Writes a signed 32 bit value as a varint.
 * @function
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.int32 = function write_int32(value) {
    return value < 0
        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec
        : this.uint32(value);
};

/**
 * Writes a 32 bit value as a varint, zig-zag encoded.
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.sint32 = function write_sint32(value) {
    return this.uint32((value << 1 ^ value >> 31) >>> 0);
};

function writeVarint64(val, buf, pos) {
    while (val.hi) {
        buf[pos++] = val.lo & 127 | 128;
        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;
        val.hi >>>= 7;
    }
    while (val.lo > 127) {
        buf[pos++] = val.lo & 127 | 128;
        val.lo = val.lo >>> 7;
    }
    buf[pos++] = val.lo;
}

/**
 * Writes an unsigned 64 bit value as a varint.
 * @param {Long|number|string} value Value to write
 * @returns {Writer} `this`
 * @throws {TypeError} If `value` is a string and no long library is present.
 */
Writer.prototype.uint64 = function write_uint64(value) {
    var bits = LongBits.from(value);
    return this._push(writeVarint64, bits.length(), bits);
};

/**
 * Writes a signed 64 bit value as a varint.
 * @function
 * @param {Long|number|string} value Value to write
 * @returns {Writer} `this`
 * @throws {TypeError} If `value` is a string and no long library is present.
 */
Writer.prototype.int64 = Writer.prototype.uint64;

/**
 * Writes a signed 64 bit value as a varint, zig-zag encoded.
 * @param {Long|number|string} value Value to write
 * @returns {Writer} `this`
 * @throws {TypeError} If `value` is a string and no long library is present.
 */
Writer.prototype.sint64 = function write_sint64(value) {
    var bits = LongBits.from(value).zzEncode();
    return this._push(writeVarint64, bits.length(), bits);
};

/**
 * Writes a boolish value as a varint.
 * @param {boolean} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.bool = function write_bool(value) {
    return this._push(writeByte, 1, value ? 1 : 0);
};

function writeFixed32(val, buf, pos) {
    buf[pos    ] =  val         & 255;
    buf[pos + 1] =  val >>> 8   & 255;
    buf[pos + 2] =  val >>> 16  & 255;
    buf[pos + 3] =  val >>> 24;
}

/**
 * Writes an unsigned 32 bit value as fixed 32 bits.
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.fixed32 = function write_fixed32(value) {
    return this._push(writeFixed32, 4, value >>> 0);
};

/**
 * Writes a signed 32 bit value as fixed 32 bits.
 * @function
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.sfixed32 = Writer.prototype.fixed32;

/**
 * Writes an unsigned 64 bit value as fixed 64 bits.
 * @param {Long|number|string} value Value to write
 * @returns {Writer} `this`
 * @throws {TypeError} If `value` is a string and no long library is present.
 */
Writer.prototype.fixed64 = function write_fixed64(value) {
    var bits = LongBits.from(value);
    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);
};

/**
 * Writes a signed 64 bit value as fixed 64 bits.
 * @function
 * @param {Long|number|string} value Value to write
 * @returns {Writer} `this`
 * @throws {TypeError} If `value` is a string and no long library is present.
 */
Writer.prototype.sfixed64 = Writer.prototype.fixed64;

/**
 * Writes a float (32 bit).
 * @function
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.float = function write_float(value) {
    return this._push(util.float.writeFloatLE, 4, value);
};

/**
 * Writes a double (64 bit float).
 * @function
 * @param {number} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.double = function write_double(value) {
    return this._push(util.float.writeDoubleLE, 8, value);
};

var writeBytes = util.Array.prototype.set
    ? function writeBytes_set(val, buf, pos) {
        buf.set(val, pos); // also works for plain array values
    }
    /* istanbul ignore next */
    : function writeBytes_for(val, buf, pos) {
        for (var i = 0; i < val.length; ++i)
            buf[pos + i] = val[i];
    };

/**
 * Writes a sequence of bytes.
 * @param {Uint8Array|string} value Buffer or base64 encoded string to write
 * @returns {Writer} `this`
 */
Writer.prototype.bytes = function write_bytes(value) {
    var len = value.length >>> 0;
    if (!len)
        return this._push(writeByte, 1, 0);
    if (util.isString(value)) {
        var buf = Writer.alloc(len = base64.length(value));
        base64.decode(value, buf, 0);
        value = buf;
    }
    return this.uint32(len)._push(writeBytes, len, value);
};

/**
 * Writes a string.
 * @param {string} value Value to write
 * @returns {Writer} `this`
 */
Writer.prototype.string = function write_string(value) {
    var len = utf8.length(value);
    return len
        ? this.uint32(len)._push(utf8.write, len, value)
        : this._push(writeByte, 1, 0);
};

/**
 * Forks this writer's state by pushing it to a stack.
 * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.
 * @returns {Writer} `this`
 */
Writer.prototype.fork = function fork() {
    this.states = new State(this);
    this.head = this.tail = new Op(noop, 0, 0);
    this.len = 0;
    return this;
};

/**
 * Resets this instance to the last state.
 * @returns {Writer} `this`
 */
Writer.prototype.reset = function reset() {
    if (this.states) {
        this.head   = this.states.head;
        this.tail   = this.states.tail;
        this.len    = this.states.len;
        this.states = this.states.next;
    } else {
        this.head = this.tail = new Op(noop, 0, 0);
        this.len  = 0;
    }
    return this;
};

/**
 * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.
 * @returns {Writer} `this`
 */
Writer.prototype.ldelim = function ldelim() {
    var head = this.head,
        tail = this.tail,
        len  = this.len;
    this.reset().uint32(len);
    if (len) {
        this.tail.next = head.next; // skip noop
        this.tail = tail;
        this.len += len;
    }
    return this;
};

/**
 * Finishes the write operation.
 * @returns {Uint8Array} Finished buffer
 */
Writer.prototype.finish = function finish() {
    var head = this.head.next, // skip noop
        buf  = this.constructor.alloc(this.len),
        pos  = 0;
    while (head) {
        head.fn(head.val, buf, pos);
        pos += head.len;
        head = head.next;
    }
    // this.head = this.tail = null;
    return buf;
};

Writer._configure = function(BufferWriter_) {
    BufferWriter = BufferWriter_;
};

},{"./util/minimal":40}],44:[function(require,module,exports){
"use strict";
module.exports = BufferWriter;

// extends Writer
var Writer = require("./writer");
(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;

var util = require("./util/minimal");

var Buffer = util.Buffer;

/**
 * Constructs a new buffer writer instance.
 * @classdesc Wire format writer using node buffers.
 * @extends Writer
 * @constructor
 */
function BufferWriter() {
    Writer.call(this);
}

/**
 * Allocates a buffer of the specified size.
 * @param {number} size Buffer size
 * @returns {Buffer} Buffer
 */
BufferWriter.alloc = function alloc_buffer(size) {
    return (BufferWriter.alloc = util._Buffer_allocUnsafe)(size);
};

var writeBytesBuffer = Buffer && Buffer.prototype instanceof Uint8Array && Buffer.prototype.set.name === "set"
    ? function writeBytesBuffer_set(val, buf, pos) {
        buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)
                           // also works for plain array values
    }
    /* istanbul ignore next */
    : function writeBytesBuffer_copy(val, buf, pos) {
        if (val.copy) // Buffer values
            val.copy(buf, pos, 0, val.length);
        else for (var i = 0; i < val.length;) // plain array values
            buf[pos++] = val[i++];
    };

/**
 * @override
 */
BufferWriter.prototype.bytes = function write_bytes_buffer(value) {
    if (util.isString(value))
        value = util._Buffer_from(value, "base64");
    var len = value.length >>> 0;
    this.uint32(len);
    if (len)
        this._push(writeBytesBuffer, len, value);
    return this;
};

function writeStringBuffer(val, buf, pos) {
    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)
        util.utf8.write(val, buf, pos);
    else
        buf.utf8Write(val, pos);
}

/**
 * @override
 */
BufferWriter.prototype.string = function write_string_buffer(value) {
    var len = Buffer.byteLength(value);
    this.uint32(len);
    if (len)
        this._push(writeStringBuffer, len, value);
    return this;
};


/**
 * Finishes the write operation.
 * @name BufferWriter#finish
 * @function
 * @returns {Buffer} Finished buffer
 */

},{"./util/minimal":40,"./writer":43}],45:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Config_1 = require("./commonUI/Config");
var Configs_1 = require("./moduleContexts/briefModule/Configs");
var Configs_2 = require("./moduleContexts/assetsModule/views/loading/Configs");
var Configs_3 = require("./moduleContexts/loginModule/Configs");
var Configs_4 = require("./moduleContexts/entryModule/Configs");
var Configs_5 = require("./moduleContexts/roomModule/Configs");
var AssetsConfigs = /** @class */ (function () {
    function AssetsConfigs() {
        var c1 = new Config_1.default();
        var c2 = new Configs_1.default();
        var c3 = new Configs_2.default();
        var c4 = new Configs_3.default();
        // let c5: gmCmdViewConfig = new gmCmdViewConfig();
        var c6 = new Configs_4.default();
        var c7 = new Configs_5.default();
    }
    return AssetsConfigs;
}());
exports.default = AssetsConfigs;
},{"./commonUI/Config":49,"./moduleContexts/assetsModule/views/loading/Configs":173,"./moduleContexts/briefModule/Configs":178,"./moduleContexts/entryModule/Configs":188,"./moduleContexts/loginModule/Configs":208,"./moduleContexts/roomModule/Configs":229}],46:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var AssetsContext_1 = require("./moduleContexts/assetsModule/AssetsContext");
var LoginContext_1 = require("./moduleContexts/loginModule/LoginContext");
var entryContext_1 = require("./moduleContexts/entryModule/entryContext");
var RoomContext_1 = require("./moduleContexts/roomModule/RoomContext");
var FightContext_1 = require("./moduleContexts/fightModule/FightContext");
var PlayerContext_1 = require("./moduleContexts/playerModule/PlayerContext");
var BriefContext_1 = require("./moduleContexts/briefModule/BriefContext");
var SoundContext_1 = require("./moduleContexts/soundModule/SoundContext");
/**
* 捕猎游戏的上下文
*/
var BaseApplicationContext = /** @class */ (function (_super) {
    __extends(BaseApplicationContext, _super);
    function BaseApplicationContext() {
        return _super.call(this) || this;
    }
    BaseApplicationContext.prototype.bindInjections = function () {
        this.customFairyguiGButtonFunction();
        this.customFairyguiGSliderFunction();
    };
    BaseApplicationContext.prototype.bindCommands = function () {
    };
    BaseApplicationContext.prototype.registerModuleContexts = function () {
        // 资源模块
        this.addModuleContext(AssetsContext_1.default);
        // 声音模块
        this.addModuleContext(SoundContext_1.default);
        // 人物模块
        this.addModuleContext(PlayerContext_1.default);
        // 登陆模块
        this.addModuleContext(LoginContext_1.default);
        //大厅模块
        this.addModuleContext(entryContext_1.default);
        // //帮助模块
        // this.addModuleContext(help.HelpContext);
        // // 简要模块
        this.addModuleContext(BriefContext_1.default);
        // // 主场景模块
        // // this.addModuleContext(mainScene.MainSceneContext);
        // 房间模块
        this.addModuleContext(RoomContext_1.default);
        // 战斗模块
        this.addModuleContext(FightContext_1.default);
        // // 菜单模块
        // this.addModuleContext(menu.MenuContext);
        console.log("=====BaseApplicationContext done!=====");
    };
    BaseApplicationContext.prototype.customFairyguiGButtonFunction = function () {
        var oldSetState = fairygui.GButton.prototype["setState"];
        fairygui.GButton.prototype["setState"] = function (val) {
            if (!this.displayObject.getStyle())
                return;
            oldSetState.apply(this, [val]);
            // 作自己的修改
            if (this._downEffect == 2) {
                if (val == /*CLASS CONST:fairygui.GButton.DOWN*/ "down" || val == /*CLASS CONST:fairygui.GButton.SELECTED_OVER*/ "selectedOver" || val == /*CLASS CONST:fairygui.GButton.SELECTED_DISABLED*/ "selectedDisabled") {
                    if (!this._treatedCustom) {
                        var hitW = this.width / (this.width * this.scaleX) * this.width;
                        var hitH = this.height / (this.height * this.scaleY) * this.height;
                        var hitX = (this.width - hitW) * 0.5;
                        var hitY = (this.height - hitH) * 0.5;
                        this.displayObject.hitArea = new Laya.Rectangle(hitX, hitY, hitW, hitH);
                        this._treatedCustom = true;
                    }
                }
                else {
                    if (this._treatedCustom) {
                        this.displayObject.hitArea = null;
                        this._treatedCustom = undefined;
                    }
                }
            }
        };
    };
    BaseApplicationContext.prototype.customFairyguiGSliderFunction = function () {
        var oldSetState = fairygui.GSlider.prototype["updateWidthPercent"];
        fairygui.GSlider.prototype["updateWidthPercent"] = function (percent) {
            // 作自己的修改
            if (percent <= 0) {
                percent = 0.005; //禁止进度条伸缩部分宽度为0
            }
            oldSetState.apply(this, [percent]);
        };
    };
    return BaseApplicationContext;
}(riggerIOC.ApplicationContext));
exports.default = BaseApplicationContext;
},{"./moduleContexts/assetsModule/AssetsContext":165,"./moduleContexts/briefModule/BriefContext":177,"./moduleContexts/entryModule/entryContext":192,"./moduleContexts/fightModule/FightContext":199,"./moduleContexts/loginModule/LoginContext":209,"./moduleContexts/playerModule/PlayerContext":224,"./moduleContexts/roomModule/RoomContext":230,"./moduleContexts/soundModule/SoundContext":267}],47:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var MyApplication_1 = require("./MyApplication");
var AssetsConfigs_1 = require("./AssetsConfigs");
var BaseApplicationContext_1 = require("./BaseApplicationContext");
var Main = /** @class */ (function () {
    function Main() {
        var i = new AssetsConfigs_1.default();
        MyApplication_1.default.instance.start(new rigger.RiggerHandler(this, onAppStart), { "entrance": BaseApplicationContext_1.default });
        function onAppStart() {
            console.log("all service started");
        }
    }
    return Main;
}());
//激活启动类
new Main();
},{"./AssetsConfigs":45,"./BaseApplicationContext":46,"./MyApplication":48}],48:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var MyApplication = /** @class */ (function (_super) {
    __extends(MyApplication, _super);
    function MyApplication() {
        var _this = _super.call(this) || this;
        _this.defaultVolumn = 0.5;
        _this.mNowGameState = GameState.None;
        return _this;
    }
    Object.defineProperty(MyApplication, "instance", {
        /**
         * 应用的单例
         */
        get: function () {
            if (!MyApplication.mInstance)
                MyApplication.mInstance = new MyApplication();
            return MyApplication.mInstance;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MyApplication.prototype, "frameRate", {
        get: function () {
            return Laya.stage.frameRate;
        },
        /**
         * 设置游戏帧率
         */
        set: function (rate) {
            Laya.stage.frameRate = rate;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MyApplication.prototype, "backgroundColor", {
        /**
        * 游戏背景颜色
        */
        set: function (color) {
            Laya.stage.bgColor = color;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MyApplication.prototype, "scaleMode", {
        // public set scaleMode(mode:"noscale" | "exactfit" | "showall" | "noborder" | "full" | "fixedwidth" | "fixedheight")
        /**
         * 设置游戏的缩放模式
         */
        set: function (mode) {
            Laya.stage.scaleMode = mode;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MyApplication.prototype, "designWidth", {
        /**
         * 游戏的设计宽度
         */
        get: function () {
            return Laya.stage.designWidth;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MyApplication.prototype, "designHeight", {
        /**
         * 游戏的设计高度
         */
        get: function () {
            return Laya.stage.designHeight;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MyApplication.prototype, "width", {
        /**
         * 游戏的实际宽度
         */
        get: function () {
            return Laya.Browser.width;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MyApplication.prototype, "height", {
        /**
         * 游戏的实际高度
         */
        get: function () {
            return Laya.Browser.height;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MyApplication.prototype, "nowGameState", {
        get: function () {
            return this.mNowGameState;
        },
        set: function (state) {
            this.mNowGameState = state;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MyApplication.prototype, "inGameLoadingCls", {
        /**
         * 游戏内加载界面类
         */
        get: function () {
            return this._inGameLoadingViewCls;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MyApplication.prototype, "inGameLoadingArgs", {
        /**
         * 游戏内加载界面参数
         */
        get: function () {
            return this._inGameLoadingArgs;
        },
        enumerable: true,
        configurable: true
    });
    MyApplication.prototype.registerInGameLoadingView = function (cls, args) {
        this._inGameLoadingViewCls = cls;
        this._inGameLoadingArgs = args;
    };
    MyApplication.prototype.onAllServicesReady = function (resultHandler) {
        console.log("app start ok");
        resultHandler.success();
    };
    MyApplication.initlized = false;
    return MyApplication;
}(rigger.BaseApplication));
exports.default = MyApplication;
/*
* 应用
*/
var GameState;
(function (GameState) {
    GameState[GameState["None"] = 0] = "None";
    GameState[GameState["ConnectingGameServer"] = 1] = "ConnectingGameServer";
    GameState[GameState["ConnectedGameServer"] = 2] = "ConnectedGameServer";
    GameState[GameState["LoginedGameServer"] = 3] = "LoginedGameServer";
    GameState[GameState["EnteredGame"] = 4] = "EnteredGame";
    GameState[GameState["Closed"] = 5] = "Closed";
    // ReconnectingGameServer = 12, // 重连中
})(GameState = exports.GameState || (exports.GameState = {}));
},{}],49:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var commonUIBinder_1 = require("../fui/commonUI/commonUIBinder");
/**
* 战斗相关界面资源配置
*/
var commonUIConfig = /** @class */ (function () {
    function commonUIConfig() {
        rigger.service.FairyGUIPackagePlugin.packageMap["commonUIBinder"] = commonUIBinder_1.default;
        rigger.service.FairyGUIPackagePlugin.packageMap["commonUI"] = this;
        rigger.service.PackageUrlPlugin.packageMap["commonUI"] = this;
    }
    /**
     * Common包类需要进行的自定义扩展放在这
     */
    commonUIConfig.prototype.bindCustom = function () {
    };
    commonUIConfig.prototype.getPreLoadingAssets = function () {
        return [
        // { url: "res/fui/commonUI/commonUI_atlas0.png", type: Laya.Loader.IMAGE },
        ];
    };
    return commonUIConfig;
}());
exports.default = commonUIConfig;
},{"../fui/commonUI/commonUIBinder":90}],50:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * MaskView
 */
var UIWindow_1 = require("../utils/UIWindow");
var Utils_1 = require("../utils/Utils");
var MaskView = /** @class */ (function (_super) {
    __extends(MaskView, _super);
    function MaskView() {
        var _this = _super.call(this) || this;
        _this._views = [];
        _this._clickEvents = [];
        _this._views = [];
        _this.ignoreCloseOther = true;
        return _this;
    }
    MaskView.prototype.onInit = function () {
        _super.prototype.onInit.call(this);
        this.bringToFontOnClick = false;
        this.layout();
        _super.prototype.onClick.call(this, this, this._onClick);
    };
    MaskView.prototype.dispose = function () {
        _super.prototype.offClick.call(this, this, this._onClick);
        this._clickEvents = [];
        _super.prototype.dispose.call(this);
    };
    MaskView.prototype.onShown = function () {
    };
    /**
     * 激活
     */
    MaskView.prototype.enable = function (layer, ui) {
        if (!ui.needMask)
            return;
        this.sortingOrder = ui.sortingOrder;
        this._views.push(ui);
        layer.addChild(this);
    };
    MaskView.prototype.disable = function (layer, ui) {
        if (!ui.needMask)
            return;
        // 检查该UI是否在列表中
        var index = this._views.length - 1;
        if (ui === this._views[index] || (index = this._views.indexOf(ui)) >= 0) {
            Utils_1.default.removeAtFromArray(this._views, index);
            this._recover();
        }
    };
    MaskView.prototype.onClick = function (thisObj, listener, args) {
        // super.onClick(thisObj, listener, args);
        this._clickEvents.push({ thisObj: thisObj, listener: listener, args: args });
    };
    MaskView.prototype.offClick = function (thisObj, listener) {
        var index = Utils_1.default.findIndexFromArray(this._clickEvents, function (e, idx, arr) {
            return e["thisObj"] === thisObj && e["listener"] === listener;
        });
        if (index >= 0) {
            // console.log("find off click target");
            Utils_1.default.removeAtFromArray(this._clickEvents, index);
        }
    };
    MaskView.prototype.layout = function () {
        var maskGroup = new riggerLayout.Group(this.contentPane);
        maskGroup.width = '100%';
        maskGroup.height = '100%';
        maskGroup.horizontalCenter = 0;
        maskGroup.verticalCenter = 0;
        RiggerLayout.layer.addChild(maskGroup);
    };
    MaskView.prototype.removeLayout = function () {
        RiggerLayout.layer.remove(this.contentPane);
    };
    MaskView.prototype._recover = function () {
        var len = this._views.length;
        if (len <= 0)
            return this.hide();
        var ui = this._views[len - 1];
        if (!ui.parent) {
            Utils_1.default.removeFromArray(this._views, ui);
            return this._recover();
        }
        this.sortingOrder = ui.sortingOrder;
        var root = ui.parent;
        root.addChild(this);
        this.parent.setChildIndex(this, ui.parent.getChildIndex(ui));
    };
    MaskView.prototype._onClick = function () {
        // console.log("clicked");
        // 获取需要响应点击事件的对象
        if (!this.parent)
            return;
        var selfIndex = this.parent.getChildIndex(this);
        if (selfIndex < 0)
            return;
        // 获取其上一层的对象，遮罩层上一层的对象就是要响应点击的对象
        var obj = this.parent.getChildAt(selfIndex + 1);
        if (!obj)
            return;
        // 检查此对象是否注册了点击事件
        var startIndex = 0, eventIndex = Utils_1.default.findIndexFromArray(this._clickEvents, function (e, idx, arr) {
            return e["thisObj"] === obj;
        }, startIndex), eventObj, caller, listener, args;
        while (startIndex < this._clickEvents.length && eventIndex >= 0) {
            eventObj = this._clickEvents[eventIndex];
            caller = eventObj["thisObj"];
            listener = eventObj["listener"];
            args = eventObj["args"];
            if (caller && listener) {
                // console.log("apply mask click handler");
                listener.apply(caller, args);
            }
            // 查找下一个
            startIndex = eventIndex + 1;
            eventIndex = Utils_1.default.findIndexFromArray(this._clickEvents, function (e, idx, arr) {
                return e["thisObj"] === obj;
            }, startIndex);
        }
    };
    return MaskView;
}(UIWindow_1.default));
exports.default = MaskView;
},{"../utils/UIWindow":305,"../utils/Utils":306}],51:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Utils_1 = require("../utils/Utils");
var Avatar_1 = require("../skeleton/Avatar");
var VideoType_1 = require("../definitions/VideoType");
var ScreenMode_1 = require("../definitions/ScreenMode");
/**
 * 动画播放器的资源类
 */
var VideoPlayerViewAssets = /** @class */ (function () {
    function VideoPlayerViewAssets() {
        /**
         * 资源类型，用于LAYA加载相关资源
         */
        this.type = Laya.Loader.IMAGE;
        /**
         * 标识资源是是否已经就绪
         */
        this.ready = false;
    }
    return VideoPlayerViewAssets;
}());
exports.VideoPlayerViewAssets = VideoPlayerViewAssets;
/**
 * VideoPlayer
 */
var VideoPlayerViewParams = /** @class */ (function () {
    function VideoPlayerViewParams() {
        /**
         * 在什么屏幕模式下播放，如果为ＮＯＮＥ则所有屏幕模式下,则表示在所有模式屏幕下都会播放
         */
        this.screenMode = ScreenMode_1.ScreenMode.Portrait;
    }
    return VideoPlayerViewParams;
}());
exports.VideoPlayerViewParams = VideoPlayerViewParams;
var VideoPlayerView = /** @class */ (function (_super) {
    __extends(VideoPlayerView, _super);
    function VideoPlayerView() {
        var _this = _super.call(this) || this;
        _this._playbackRate = 1;
        // public setXY(xv:number, yv:number)
        // {
        //     super.setXY(xv, yv);
        // }
        _this._actionName = undefined;
        _this._loop = true;
        _this._ready = false;
        _this._active = false;
        _this._actionMap = {};
        _this._actionUrlMap = {};
        Laya.stage.on(Laya.Event.RESIZE, _this, _this._onResize);
        return _this;
    }
    Object.defineProperty(VideoPlayerView.prototype, "playbackRate", {
        /**
         * 设置回放速率
         */
        get: function () {
            return this._playbackRate;
        },
        set: function (rate) {
            this._playbackRate = rate;
            if (this._content && this._params.type === VideoType_1.VideoType.Skeleton) {
                this._content.playbackRate = rate;
            }
        },
        enumerable: true,
        configurable: true
    });
    VideoPlayerView.prototype.dispose = function () {
        Laya.stage.on(Laya.Event.RESIZE, this, this._onResize);
        this._disposeContent();
        _super.prototype.dispose.call(this);
    };
    VideoPlayerView.prototype.init = function (params) {
        this._params = params;
        this._disposeContent();
        switch (params.type) {
            case VideoType_1.VideoType.LayaAnimation:
                this._initLayaAni();
                break;
            case VideoType_1.VideoType.GLoader:
                this._initGLoaderAnimation();
                break;
            case VideoType_1.VideoType.Skeleton:
                this._initSkeletonAnimation();
                break;
            default:
                break;
        }
        this._onResize();
    };
    /**
     * 播放
     * @public
     * @method play
     * @param {string} [action = null] 要播放的动作，对于VideoType.GLoader类型的动画，此参数不能空，即必须指定一个有效的动作
     * @param {boolean} [loop = true] 是否循环播放
     * @param {Laya.Handler} [completeHandler = null] 播放完成后的回调，此回调的表现部分取决于内部组件的表现，如VideoType.GLoader类型的动画循环播放时可能不会触发此回调
     */
    VideoPlayerView.prototype.play = function (action, loop, completeHandler) {
        if (action === void 0) { action = null; }
        if (loop === void 0) { loop = true; }
        if (!this._defaultAction)
            this._defaultAction = action;
        if (this._active || !this._actionName) {
            this._actionName = action;
            this._loop = loop;
            this._playCompleteHandler = completeHandler;
        }
        if (!this._active)
            return;
        if (this._ready)
            this._play();
    };
    /**
     * 设置骨骼动画的皮肤，只对骨骼动画有用
     */
    VideoPlayerView.prototype.setSkin = function (skin) {
        if (VideoType_1.VideoType.Skeleton === this._params.type) {
            if (this._content) {
                this._content.changeSkin(skin);
            }
        }
    };
    VideoPlayerView.prototype._onResize = function () {
        this._active = true;
        if (this._params && (this._params.screenMode !== ScreenMode_1.ScreenMode.None)) {
            this._active = this.visible = (this._params.screenMode === Utils_1.default.getScreenMode());
        }
        if (!this._actionName)
            return;
        if (this._active) {
            // this._play();
        }
        else {
            this._actionName = this._defaultAction;
        }
    };
    VideoPlayerView.prototype._play = function () {
        if (!this._params)
            return;
        switch (this._params.type) {
            case VideoType_1.VideoType.LayaAnimation:
                this._playLayaAni();
                break;
            case VideoType_1.VideoType.GLoader:
                this._playGLoaderAni();
                break;
            case VideoType_1.VideoType.Skeleton:
                this._playSkeletonAni();
                break;
            default:
                break;
        }
    };
    VideoPlayerView.prototype._playLayaAni = function () {
        if (!this._ready)
            return;
        if (!this._content)
            return;
        this._content.play(this._actionName, this._loop);
        this._resetPlayPlan();
    };
    VideoPlayerView.prototype._playSkeletonAni = function () {
        if (Utils_1.default.isNullOrEmpty(this._actionName))
            return;
        if (!this._content)
            return;
        this._content.play(this._actionName, this._loop, this._playCompleteHandler);
    };
    VideoPlayerView.prototype._playGLoaderAni = function () {
        var loader = this._content;
        var url = this._checkGLoaderAction();
        if (url) {
            this._content.url = url;
            // 是否要播放
            if (loader.content instanceof fairygui.display.MovieClip) {
                loader.content.setPlaySettings(0, -1, this._loop ? 0 : 1, -1, this._playCompleteHandler);
            }
            // 重置动作
            this._resetPlayPlan();
        }
    };
    VideoPlayerView.prototype._resetPlayPlan = function () {
        this._actionName = this._defaultAction;
        this._loop = true;
        this._playCompleteHandler = undefined;
    };
    VideoPlayerView.prototype._checkGLoaderAction = function () {
        if (this._params.type === VideoType_1.VideoType.GLoader && !this._actionName)
            throw new Error("GLoader Animation Must Have an Valid Action!");
        // 检查动作资源是否准备就绪
        var actionInfo = this._actionMap[this._actionName];
        if (this._params.type === VideoType_1.VideoType.GLoader && !actionInfo)
            throw new Error("GLoader Animation Must Have an Valid Action!");
        if (actionInfo.ready) {
            return actionInfo.extraUrl;
        }
        return null;
    };
    /**
     * 初始化一个LAYA原生动画
     */
    VideoPlayerView.prototype._initLayaAni = function () {
        this._ready = false;
        // this._initGLoaderActions();
        var url = [];
        for (var i = 0, len = this._params.assets.length; i < len; ++i) {
            this._formatAssetsUrl(this._params.assets[i], url);
        }
        // // 加载数据
        if (rigger.service.AssetsService.instance.getAssets(url, rigger.RiggerHandler.create(this, this._onLayaAniAssetsLoaded))) {
            this._onLayaAniAssetsLoaded();
        }
    };
    VideoPlayerView.prototype._initSkeletonAnimation = function () {
        // 检查资源是否就绪
        // if(this._params.assets.length <= 0) throw new Error("Invalid Assets Config For Skeleton Animation!");
        if (Utils_1.default.isNullOrEmpty(this._params.url))
            throw new Error("Invalid Url Config For Skeleton Animation!");
        // let allUrl:{url, type}[] = [];
        // for(var i:number = 0, len:number = this._params.assets.length; i < len; ++i)
        // {
        //     allUrl = allUrl.concat(this._formatAssetsUrl(this._params.assets[i]));
        // }
        this._content = new Avatar_1.default();
        // if(AssetsManager.instance.getAssets(allUrl, Laya.Handler.create(this, this._onSkeletonAssetsLoaded)))
        // {
        this._onSkeletonAssetsLoaded();
        // }
    };
    VideoPlayerView.prototype._onSkeletonAssetsLoaded = function () {
        // 资源已经就绪
        this._content.init(this._params.url, Laya.Handler.create(this, this._onSkeletonInitCompleted));
    };
    VideoPlayerView.prototype._onSkeletonInitCompleted = function () {
        var body = this._content.body;
        this.displayObject.addChild(body);
        this._ready = true;
        this._params && this._params.completeHandler && this._params.completeHandler.run();
        this.playbackRate = this._playbackRate;
        this._play();
    };
    VideoPlayerView.prototype._initGLoaderAnimation = function () {
        this._content = new fairygui.GLoader();
        this.addChild(this._content);
        this._ready = true;
        // 初始化动作
        this._initGLoaderActions();
        // 格式化资源地址
        // let assetsUrl = this._formateAssetsUrl();
        // for(var i:number = 0, len:number = assetsUrl.length; i < len; ++i)
        // {
        //     AssetsManager.instance.getAssets(this._params.assets[i], Laya.Handler.create(this, this._onGLoaderAssetsLoaded, this._params.assets[i]))
        // }
    };
    /**
     * 初始化GLoader类型的动画的动作
     */
    VideoPlayerView.prototype._initGLoaderActions = function () {
        this._actionMap = {};
        this._actionUrlMap = {};
        var assets = this._params.assets;
        if (assets && assets.length > 0) {
            for (var i = 0, len = this._params.assets.length; i < len; ++i) {
                if (this._params.type === VideoType_1.VideoType.GLoader && !assets[i].extraUrl)
                    throw ("GLoader Animation Must Config a valid extraUrl! Please Check Out!");
                if (!assets[i].actionName)
                    continue;
                this._actionMap[assets[i].actionName] = assets[i];
                var url = this._formatAssetsUrl(assets[i]);
                if (this._isAssetsReady(url)) {
                    assets[i].ready = true;
                }
                else {
                    // 加载
                    assets[i].ready = false;
                    rigger.service.AssetsService.instance.getAssets(url, rigger.RiggerHandler.create(this, this._onGLoaderAssetsLoaded, [url[0].url]));
                    if (!Utils_1.default.isNullOrEmpty(url[0].url))
                        this._actionUrlMap[url[0].url] = assets[i].actionName;
                }
            }
        }
    };
    /**
     * 检查资源是否已经就绪
     * @param assetsUrl 资源地址URL
     */
    VideoPlayerView.prototype._isAssetsReady = function (assetsUrl) {
        if (Utils_1.default.isAssetsUrlObject(assetsUrl)) {
            return !!Laya.Loader.getRes(assetsUrl.url);
        }
        else if (Utils_1.default.isArray(assetsUrl)) {
            // 如果是数据，需要检查每一个资源
            for (var i = 0, len = assetsUrl.length; i < len; ++i) {
                if (!this._isAssetsReady(assetsUrl[i])) {
                    return false;
                }
            }
            return true;
        }
        return false;
    };
    /**
     * 对传入的Assets的资源地址进行格式化
     * @param assets
     * @param old 已经收集的资源地址的数组
     */
    VideoPlayerView.prototype._formatAssetsUrl = function (assets, old) {
        if (old === void 0) { old = []; }
        if (Utils_1.default.isString(assets.url)) {
            old.push(assets);
            return old;
        }
        if (Utils_1.default.isArray(assets.url)) {
            // let ret:{url, type}[] = [];
            for (var i = 0, len = assets.url.length; i < len; ++i) {
                old.push({ url: assets.url[i], type: assets.type || Laya.Loader.IMAGE });
            }
            return old;
        }
    };
    /**
     * GLoader形式的动画资源加载完成
     * @param url 资源地址，实际上此参数只是参数列表中的第一个，仅做标记用
     */
    VideoPlayerView.prototype._onGLoaderAssetsLoaded = function (url) {
        // console.log("gloader assets loaded");
        if (this._actionUrlMap[url]) {
            this._actionMap[this._actionUrlMap[url]].ready = true;
        }
        if (this._params.completeHandler && this._isAllLoaded())
            this._params.completeHandler.run();
        // 检查是否需要播放刚加载的资源
        if (this._actionName && this._actionUrlMap[url] === this._actionName) {
            this._play();
        }
    };
    /**
     * 是否所有的资源都已经加载完毕
     */
    VideoPlayerView.prototype._isAllLoaded = function () {
        for (var i = 0, len = this._params.assets.length; i < len; ++i) {
            if (this._params.assets[i].actionName && !this._params.assets[i].ready)
                return false;
        }
        return true;
    };
    VideoPlayerView.prototype._onLayaAniAssetsLoaded = function () {
        this._content = new Laya.Animation();
        this._content.loadAnimation(this._params.url, Laya.Handler.create(this, this._onLayaAniCreated));
    };
    VideoPlayerView.prototype._onLayaAniCreated = function () {
        if (this._isLayaNode(this._content)) {
            this.displayObject.addChild(this._content);
        }
        this._ready = true;
        if (this._actionName !== undefined)
            this._play();
        this._params.completeHandler && this._params.completeHandler.run();
    };
    Object.defineProperty(VideoPlayerView.prototype, "content", {
        get: function () {
            return this._content;
        },
        enumerable: true,
        configurable: true
    });
    VideoPlayerView.prototype._isLayaNode = function (node) {
        return node instanceof Laya.Node;
    };
    VideoPlayerView.prototype._isFairyguiNode = function (node) {
        return node instanceof fairygui.GObject;
    };
    VideoPlayerView.prototype._disposeContent = function () {
        if (this._content && this._isFairyguiNode(this._content)) {
            this._content.dispose();
        }
        else if (this._content && this._isLayaNode(this._content)) {
            this._content.destroy();
        }
        this._content = null;
    };
    return VideoPlayerView;
}(fairygui.GComponent));
exports.default = VideoPlayerView;
},{"../definitions/ScreenMode":68,"../definitions/VideoType":69,"../skeleton/Avatar":300,"../utils/Utils":306}],52:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var UIWindow_1 = require("../../utils/UIWindow");
var UIManager_1 = require("../../manager/UIManager");
var FUIGmBtn_1 = require("../../fui/gmCmd/FUIGmBtn");
var GmCmd_1 = require("../../definitions/GmCmd");
/**
 * GmView
 */
var GmBtnView = /** @class */ (function (_super) {
    __extends(GmBtnView, _super);
    function GmBtnView() {
        var _this = _super.call(this) || this;
        _this._gmCmds = [];
        _this.needMask = false;
        return _this;
    }
    Object.defineProperty(GmBtnView, "instance", {
        get: function () {
            if (!this._instance) {
                this._instance = new GmBtnView();
            }
            return this._instance;
        },
        enumerable: true,
        configurable: true
    });
    GmBtnView.getUrl = function () {
        return FUIGmBtn_1.default.URL;
    };
    GmBtnView.prototype.onInit = function () {
        _super.prototype.onInit.call(this);
        this._loadConfig();
    };
    GmBtnView.prototype.onShown = function () {
        _super.prototype.onShown.call(this);
        this.addEventListener();
    };
    GmBtnView.prototype.onHide = function () {
        _super.prototype.onHide.call(this);
        this.removeEventListener();
    };
    GmBtnView.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
    };
    GmBtnView.prototype.addEventListener = function () {
        this.contentPane.onClick(this, this.onClickGmBtn);
    };
    GmBtnView.prototype.removeEventListener = function () {
        this.contentPane.m_n7.onClick(this, this.onClickGmBtn);
    };
    GmBtnView.prototype.layout = function () {
        var gmBtnGroup = new riggerLayout.Group(this.contentPane);
        gmBtnGroup.top = '3%';
        gmBtnGroup.right = '3%';
        gmBtnGroup.width = [riggerLayout.LayoutSpec.create(1, 1334 / 750, "5%"), riggerLayout.LayoutSpec.create(-1, 750 / 1334, "10%")];
        gmBtnGroup.height = [riggerLayout.LayoutSpec.create(1334 / 750, -1, "10%"), riggerLayout.LayoutSpec.create(750 / 1334, 1, "5%")];
        RiggerLayout.layer.addChild(gmBtnGroup);
    };
    GmBtnView.prototype.removeLayou = function () {
        RiggerLayout.layer.remove(this.contentPane);
    };
    GmBtnView.prototype.onClickGmBtn = function () {
        UIManager_1.default.instance.showGMView();
    };
    GmBtnView.prototype._loadConfig = function () {
        this._resRand = Math.random();
        var configUrls = [
            // { url: "gameConfig.json?" + this._resRand, type: Laya.Loader.JSON },
            { url: "gmCmds.json?" + this._resRand, type: Laya.Loader.JSON },
        ];
        // let configUrls: {} = {url: "gmCmds.json?" + this._resRand, type: Laya.Loader.JSON};
        Laya.loader.load(configUrls, Laya.Handler.create(this, this._onConfigLoaded));
    };
    /**
     * 配置加载成功
     */
    GmBtnView.prototype._onConfigLoaded = function () {
        this._initGMCmds();
    };
    Object.defineProperty(GmBtnView.prototype, "gmCmds", {
        /**
         * 游戏的GM指令列表
         */
        get: function () {
            return this._gmCmds;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 初始化GM指令
     */
    GmBtnView.prototype._initGMCmds = function () {
        // if(this._config.mode === GameMode.Release) 
        // {
        //     this._gmCmds = [];
        //     return;
        // }
        var moneyCmd = new GmCmd_1.default();
        moneyCmd.title = "增加金钱";
        moneyCmd.cmd = "jq";
        moneyCmd.default = 10000;
        var updateLayoutCmd = new GmCmd_1.default();
        updateLayoutCmd.title = "更新布局";
        updateLayoutCmd.cmd = "updateLayout";
        updateLayoutCmd.default = "";
        var clearVoiceAlertCacheCmd = new GmCmd_1.default();
        clearVoiceAlertCacheCmd.title = "清除游戏的本地缓存";
        clearVoiceAlertCacheCmd.cmd = "clearLocalCache";
        clearVoiceAlertCacheCmd.default = "";
        GmBtnView.instance._gmCmds.push(moneyCmd);
        GmBtnView.instance._gmCmds.push(updateLayoutCmd);
        GmBtnView.instance._gmCmds.push(clearVoiceAlertCacheCmd);
        GmBtnView.instance._gmCmds = GmBtnView.instance._gmCmds.concat(Laya.Loader.getRes("gmCmds.json?" + this._resRand));
    };
    return GmBtnView;
}(UIWindow_1.default));
exports.default = GmBtnView;
},{"../../definitions/GmCmd":63,"../../fui/gmCmd/FUIGmBtn":99,"../../manager/UIManager":164,"../../utils/UIWindow":305}],53:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var UIWindow_1 = require("../../utils/UIWindow");
var UIManager_1 = require("../../manager/UIManager");
var Utils_1 = require("../../utils/Utils");
var GmBtnView_1 = require("./GmBtnView");
var CommandCodes_1 = require("../../protocol/CommandCodes");
var FUIGmView_1 = require("../../fui/gmCmd/FUIGmView");
var protocol = require("../../protocol/protocols/protocols");
var NetworkChannelNames_1 = require("../../definitions/NetworkChannelNames");
/**
 * GmView
 */
var GmView = /** @class */ (function (_super) {
    __extends(GmView, _super);
    function GmView() {
        var _this = _super.call(this) || this;
        _this.needMask = true;
        return _this;
    }
    GmView.getUrl = function () {
        return FUIGmView_1.default.URL;
    };
    GmView.prototype.onInit = function () {
        _super.prototype.onInit.call(this);
        this._initGmCmdList();
    };
    GmView.prototype.onShown = function () {
        _super.prototype.onShown.call(this);
        UIManager_1.default.instance.maskView.onClick(this, this._onClickMask);
        this.contentPane.m_content.m_cancelBtn.onClick(this, this._onClickMask);
        this.contentPane.m_content.m_confirmBtn.onClick(this, this._onClickConfirm);
    };
    GmView.prototype.onHide = function () {
        _super.prototype.onHide.call(this);
        UIManager_1.default.instance.maskView.offClick(this, this._onClickMask);
        this.contentPane.m_content.m_cancelBtn.offClick(this, this._onClickMask);
        this.contentPane.m_content.m_confirmBtn.offClick(this, this._onClickConfirm);
    };
    GmView.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
    };
    GmView.prototype.layout = function () {
        // Layout.addScaleFairy(this.contentPane.m_content,[
        // Layout.style.WINDOWS_CENTER_X,
        // Layout.style.WINDOWS_CENTER_Y,
        // Layout.style.ZOOM_WINDOWSWIDTH,
        // Layout.style.ZOOM_WINDOWSHEIGHT+"@2",
        // ]);
    };
    GmView.prototype._initGmCmdList = function () {
        var cmds = GmBtnView_1.default.instance.gmCmds;
        if (!cmds || cmds.length <= 0) {
            this.contentPane.m_content.m_gmList.numItems = 0;
            return;
        }
        this.contentPane.m_content.m_gmList.itemRenderer = Laya.Handler.create(this, this._onGmItemRender, null, false);
        this.contentPane.m_content.m_gmList.on(fairygui.Events.CLICK_ITEM, this, this._onSelectedGmCmd);
        this.contentPane.m_content.m_gmList.numItems = cmds.length;
    };
    GmView.prototype._onGmItemRender = function (idx, item) {
        if (!item)
            return;
        var cmd = GmBtnView_1.default.instance.gmCmds[idx];
        item.m_btn.text = cmd.title;
        item["idx"] = idx;
    };
    GmView.prototype._onClickMask = function () {
        UIManager_1.default.instance.hideWindow(this);
    };
    GmView.prototype._onClickConfirm = function () {
        var gmReq = new protocol.GmReq();
        gmReq.gmStr = this.contentPane.m_content.m_gmInput.text;
        if (gmReq.gmStr === "updateLayout ") {
            //更新布局
            // Layout.updateLayout();
            this._onClickMask();
            return;
        }
        if (gmReq.gmStr === "clearLocalCache ") {
            // 清除掉声音提示界面缓存
            Utils_1.default.clearAudioAlertCache();
            this._onClickMask();
            return;
        }
        if (!Utils_1.default.isNullOrEmpty(gmReq.gmStr)) {
            // NetworkManager.instance.send(CommandCodes.PPGmReq, gmReq);
            rigger.service.NetworkService.instance.send(NetworkChannelNames_1.default.GameChannel, CommandCodes_1.default.PPGmReq, gmReq);
        }
        this._onClickMask();
    };
    GmView.prototype._onSelectedGmCmd = function (obj) {
        var idx = obj["idx"];
        var cmd = GmBtnView_1.default.instance.gmCmds[idx];
        this.contentPane.m_content.m_gmInput.text = this._makeGmCmdStr(cmd);
    };
    GmView.prototype._makeGmCmdStr = function (cmd) {
        if (Utils_1.default.isNullOrEmpty(cmd.cmd))
            return "";
        if (cmd.default instanceof Array) {
            return cmd.cmd + " [" + cmd.default + "]";
        }
        //!add_money 1000
        return "!" + cmd.cmd + " " + cmd.default;
    };
    return GmView;
}(UIWindow_1.default));
exports.default = GmView;
},{"../../definitions/NetworkChannelNames":64,"../../fui/gmCmd/FUIGmView":100,"../../manager/UIManager":164,"../../protocol/CommandCodes":271,"../../protocol/protocols/protocols":272,"../../utils/UIWindow":305,"../../utils/Utils":306,"./GmBtnView":52}],54:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 脚本加载完成事件
 */
exports.EVENT_DYNAMIC_SCRIPT_LOADED = "EVENT_DYNAMIC_SCRIPT_LOADED";
/**
* 脚本加载过程中
*/
exports.EVENT_DYNAMIC_SCRIPT_LOADING = "EVENT_DYNAMIC_SCRIPT_LOADING";
/**
 * 游戏连接发SOCKET
 */
exports.EVENT_GAME_SOCKET_CONNECTED = "EVENT_GAME_SOCKET_CONNECTED";
/**
 * 游戏SOCKET连接出错
 */
exports.EVENT_GAME_SOCKET_ERROR = "EVENT_GAME_SOCKET_ERROR";
/**
 * 游戏SOCKET连接关闭
 */
exports.EVENT_GAME_SOCKET_CLOSE = "EVENT_GAME_SOCKET_CLOSE";
/**
 * 必须资源加载完毕
 *
 */
exports.EVENT_NECESSARY_ASSETS_LOADED = "EVENT_NECESSARY_ASSETS_LOADED";
/**
 * 左右手发生了变化
 */
exports.EVENT_HANDS_MODE_CHANGED = "EVENT_HANDS_MODE_CHANGED";
/**
 * 点击了空白区域
 */
exports.EVENT_CLICKED_BLANK_AREA = "EVENT_CLICKED_BLANK_AREA";
/**
 * 游戏声音状态发生了变化
 */
exports.EVENT_GAME_SOUND_STATUS_UPDATED = "EVENT_GAME_SOUND_STATUS_UPDATED";
/**
 * 按下了键盘
 */
exports.EVENT_KEY_DOWN = "EVENT_KEY_DOWN";
},{}],55:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*
* 服务器配置;
*/
/**
 * 正式的服务器信息
 */
exports.serverInfo = {
    serverName: "",
    serverIp: "",
    serverPort: ""
};
// DEBUG服务器列表
exports.debugServerList = [
    {
        serverName: "45",
        serverIp: "ws://10.0.0.45",
        serverPort: 9490
    },
    {
        serverName: "姚洋",
        serverIp: "ws://10.0.0.31",
        serverPort: 9490
    },
    {
        serverName: "测试1",
        serverIp: "ws://10.0.0.31",
        serverPort: 9490
    },
    {
        serverName: "测试2",
        serverIp: "ws://10.0.0.31",
        serverPort: 9491
    }
];
},{}],56:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 各个UI的名字表,UI的名字必须是UI的类标识符，显示UI时使用或隐藏UI时需要使用
*/
var UINameConstants = /** @class */ (function () {
    function UINameConstants() {
    }
    // static makeUIName = AssetsUtils.makeUIName;
    /**
     * UI包定义
     */
    UINameConstants.FUI_PACKAGE_NAME_LOADING = "loading";
    UINameConstants.FUI_PACKAGE_NAME_COMMON = "Common";
    return UINameConstants;
}());
exports.default = UINameConstants;
},{}],57:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
//%%%%%%%%%%%%% 自动生成配置,请勿手动修改 %%%%%%%%%%%%%
var BrizecurveInfo = /** @class */ (function () {
    function BrizecurveInfo() {
        this.data = {
            1: {
                points: [[-82, 156], [253, 447], [751, -243], [912, 469], [1433, 155]],
                totalTime: 10000,
                times: [1000, 2500, 6500],
                effectLabel: ["linearNone", "linearNone", "linearNone"],
                percent: [0.055, 0.185, 0.759]
            },
            2: {
                points: [[-42, 897], [253, 447], [1124, 589], [1435, 55]],
                totalTime: 12000,
                times: [12000],
                effectLabel: ["linearNone"],
                percent: [1.000]
            },
            3: {
                points: [[1538, 76], [1047, 588], [353, 119], [-143, 647]],
                totalTime: 12000,
                times: [12000],
                effectLabel: ["linearNone"],
                percent: [1.000]
            },
            4: {
                points: [[-166, 369], [646, 699], [1463, 460]],
                totalTime: 12000,
                times: [12000],
                effectLabel: ["linearNone"],
                percent: [1.000]
            },
            5: {
                points: [[1566, 109], [1047, 588], [197, 243], [-274, 32]],
                totalTime: 13000,
                times: [13000],
                effectLabel: ["linearNone"],
                percent: [1.000]
            },
            6: {
                points: [[1550, 618], [1031, 383], [330, 381], [-223, 532]],
                totalTime: 13000,
                times: [13000],
                effectLabel: ["linearNone"],
                percent: [1.000]
            },
            7: {
                points: [[1490, 910], [1144, 386], [86, 275], [-134, -180]],
                totalTime: 13000,
                times: [13000],
                effectLabel: ["linearNone"],
                percent: [1.000]
            },
            8: {
                points: [[-146, 818], [1006, 456], [887, 39], [1556, -35]],
                totalTime: 13000,
                times: [13000],
                effectLabel: ["linearNone"],
                percent: [1.000]
            },
            9: {
                points: [[-316, 66], [157, 162], [284, 1172], [1660, 182]],
                totalTime: 8500,
                times: [3000, 2000, 3500],
                effectLabel: ["linearNone", "linearNone", "linearNone"],
                percent: [0.489, 0.343, 0.167]
            },
            10: {
                points: [[-186, 444], [157, 162], [533, 323], [1520, 265]],
                totalTime: 12000,
                times: [12000],
                effectLabel: ["linearNone"],
                percent: [1.000]
            },
            11: {
                points: [[-129, 542], [462, 395], [1094, 474], [1477, 554]],
                totalTime: 12000,
                times: [12000],
                effectLabel: ["linearNone"],
                percent: [1.000]
            },
            12: {
                points: [[506, 948], [533, 419], [948, 255], [1127, -177]],
                totalTime: 12000,
                times: [12000],
                effectLabel: ["linearNone"],
                percent: [1.000]
            },
            13: {
                points: [[298, -150], [533, 419], [948, 255], [1023, 945]],
                totalTime: 12000,
                times: [12000],
                effectLabel: ["linearNone"],
                percent: [1.000]
            },
            14: {
                points: [[-267, 169], [343, 127], [313, 833], [1581, 388]],
                totalTime: 10000,
                times: [10000],
                effectLabel: ["linearNone"],
                percent: [0.999]
            },
            15: {
                points: [[-127, 558], [1006, 456], [887, 39], [1459, 668]],
                totalTime: 12000,
                times: [12000],
                effectLabel: ["linearNone"],
                percent: [1.000]
            },
            16: {
                points: [[-214, 715], [218, -20], [1165, 40], [1581, 763]],
                totalTime: 12000,
                times: [12000],
                effectLabel: ["linearNone"],
                percent: [1.000]
            },
            17: {
                points: [[-238, 361], [218, -20], [1165, 40], [1525, 408]],
                totalTime: 15000,
                times: [15000],
                effectLabel: ["linearNone"],
                percent: [1.000]
            },
            18: {
                points: [[-144, 246], [271, 635], [958, 705], [1542, 462]],
                totalTime: 13000,
                times: [13000],
                effectLabel: ["linearNone"],
                percent: [1.000]
            },
            19: {
                points: [[1467, 214], [685, -46], [574, 582], [-107, 450]],
                totalTime: 17000,
                times: [17000],
                effectLabel: ["linearNone"],
                percent: [1.000]
            },
            20: {
                points: [[1575, 217], [1111, 489], [295, 65], [-203, 155]],
                totalTime: 17000,
                times: [17000],
                effectLabel: ["linearNone"],
                percent: [1.000]
            },
            21: {
                points: [[1564, 331], [806, 164], [534, 325], [-237, 263]],
                totalTime: 17000,
                times: [17000],
                effectLabel: ["linearNone"],
                percent: [1.000]
            },
            22: {
                points: [[1585, 374], [904, 202], [672, 806], [524, 135], [-183, 390]],
                totalTime: 17000,
                times: [17000],
                effectLabel: ["linearNone"],
                percent: [1.000]
            },
            24: {
                points: [[-188, 626], [359, 524], [1304, 494], [984, 175], [1519, 38]],
                totalTime: 17000,
                times: [17000],
                effectLabel: ["linearNone"],
                percent: [1.000]
            },
            25: {
                points: [[-224, 145], [319, 221], [600, 683], [943, 397], [1653, 301]],
                totalTime: 30000,
                times: [30000],
                effectLabel: ["linearNone"],
                percent: [1.000]
            },
            26: {
                points: [[-179, 184], [1523, 649]],
                totalTime: 15000,
                times: [15000],
                effectLabel: ["linearNone"],
                percent: [1.000]
            },
            27: {
                points: [[1590, 68], [-260, 665]],
                totalTime: 15000,
                times: [15000],
                effectLabel: ["linearNone"],
                percent: [1.000]
            },
            28: {
                points: [[1566, 109], [-257, 321]],
                totalTime: 10000,
                times: [10000],
                effectLabel: ["linearNone"],
                percent: [1.000]
            },
            29: {
                points: [[1647, 436], [-265, 508]],
                totalTime: 10000,
                times: [10000],
                effectLabel: ["linearNone"],
                percent: [1.000]
            },
            30: {
                points: [[1203, 998], [169, -229]],
                totalTime: 10000,
                times: [10000],
                effectLabel: ["linearNone"],
                percent: [1.000]
            },
            101: {
                points: [[-150, 550], [1494, 550]],
                totalTime: 30000,
                times: [30000],
                effectLabel: ["linearNone"],
                percent: [1.000]
            },
            102: {
                points: [[1586, 250], [-316, 253]],
                totalTime: 25000,
                times: [25000],
                effectLabel: ["linearNone"],
                percent: [1.000]
            },
            100: {
                points: [[-151, 375], [1634, 375]],
                totalTime: 50000,
                times: [50000],
                effectLabel: ["linearNone"],
                percent: [0.999]
            },
            23: {
                points: [[1558, 120], [1129, 181], [47, 612], [670, 57], [-226, 151]],
                totalTime: 15000,
                times: [15000],
                effectLabel: ["linearNone"],
                percent: [1.000]
            },
            501: {
                points: [[-216, 142], [1520, 390]],
                totalTime: 12000,
                times: [12000],
                effectLabel: ["linearNone"],
                percent: [1.000]
            },
            502: {
                points: [[-148, 461], [1520, 390]],
                totalTime: 12000,
                times: [12000],
                effectLabel: ["linearNone"],
                percent: [1.000]
            },
            503: {
                points: [[-86, 77], [1431, 707]],
                totalTime: 13000,
                times: [13000],
                effectLabel: ["linearNone"],
                percent: [1.000]
            },
            504: {
                points: [[1479, 118], [-132, 632]],
                totalTime: 13000,
                times: [13000],
                effectLabel: ["linearNone"],
                percent: [1.000]
            },
            505: {
                points: [[1460, 402], [-132, 632]],
                totalTime: 13000,
                times: [13000],
                effectLabel: ["linearNone"],
                percent: [1.000]
            },
            506: {
                points: [[1522, 421], [-213, 102]],
                totalTime: 13000,
                times: [13000],
                effectLabel: ["linearNone"],
                percent: [1.000]
            },
            507: {
                points: [[1541, 135], [589, 928], [-213, 102]],
                totalTime: 13000,
                times: [13000],
                effectLabel: ["linearNone"],
                percent: [1.000]
            },
            508: {
                points: [[1636, 543], [459, -86], [-237, 551]],
                totalTime: 13000,
                times: [13000],
                effectLabel: ["linearNone"],
                percent: [1.000]
            },
            509: {
                points: [[1636, 543], [567, 863], [-221, 296]],
                totalTime: 12000,
                times: [12000],
                effectLabel: ["linearNone"],
                percent: [1.000]
            },
            510: {
                points: [[1614, -79], [567, 863], [-221, 296]],
                totalTime: 12000,
                times: [12000],
                effectLabel: ["linearNone"],
                percent: [1.000]
            }
        };
    }
    Object.defineProperty(BrizecurveInfo, "instance", {
        get: function () {
            if (!this._instance) {
                this._instance = new BrizecurveInfo();
            }
            return this._instance;
        },
        enumerable: true,
        configurable: true
    });
    BrizecurveInfo.getData = function (key) {
        return BrizecurveInfo.instance.data[key];
    };
    return BrizecurveInfo;
}());
exports.default = BrizecurveInfo;
},{}],58:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// ============================================
// 本文件根据data_hunting_room自动生成
// 请勿手改
// ============================================
var DataHuntingRoom = /** @class */ (function () {
    function DataHuntingRoom() {
        this.data = {
            1: {
                id: 1,
                name: "0.1倍场",
                rate: 0.1,
                num: 4,
                balanceLimit: 0,
                batteryLvList: [1, 2, 3, 5, 10, 20, 30, 50, 100,],
            },
            2: {
                id: 2,
                name: "1倍场",
                rate: 1.0,
                num: 4,
                balanceLimit: 0,
                batteryLvList: [1, 2, 3, 5, 10, 20, 30, 50, 100,],
            },
            3: {
                id: 3,
                name: "10倍场",
                rate: 10.0,
                num: 4,
                balanceLimit: 0,
                batteryLvList: [1, 2, 3, 5, 10, 20, 30, 50, 100,],
            },
        };
    }
    DataHuntingRoom.getIds = function () {
        return [1, 2, 3,];
    };
    DataHuntingRoom.getData = function (key) {
        return DataHuntingRoom.instance.data[key];
    };
    DataHuntingRoom.make_merge_key = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (args.length <= 0)
            return "";
        var ret = args[0];
        for (var i = 1; i < args.length; ++i) {
            ret += "&" + args[i];
        }
        return ret;
    };
    Object.defineProperty(DataHuntingRoom, "instance", {
        get: function () {
            if (!this._instance) {
                this._instance = new DataHuntingRoom();
            }
            return this._instance;
        },
        enumerable: true,
        configurable: true
    });
    return DataHuntingRoom;
}());
exports.default = DataHuntingRoom;
},{}],59:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// ============================================
// 本文件根据data_lv自动生成
// 请勿手改
// ============================================
var DataLv = /** @class */ (function () {
    function DataLv() {
        this.data = {
            1: {
                lv: 1,
                exp: 10000,
                headId: 1,
            },
            2: {
                lv: 2,
                exp: 100000,
                headId: 1,
            },
            3: {
                lv: 3,
                exp: 500000,
                headId: 1,
            },
            4: {
                lv: 4,
                exp: 800000,
                headId: 1,
            },
            5: {
                lv: 5,
                exp: 1000000,
                headId: 2,
            },
            6: {
                lv: 6,
                exp: 1300000,
                headId: 2,
            },
            7: {
                lv: 7,
                exp: 1600000,
                headId: 2,
            },
            8: {
                lv: 8,
                exp: 1900000,
                headId: 2,
            },
            9: {
                lv: 9,
                exp: 2200000,
                headId: 2,
            },
            10: {
                lv: 10,
                exp: 2500000,
                headId: 3,
            },
        };
    }
    DataLv.getIds = function () {
        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10,];
    };
    DataLv.getData = function (key) {
        return DataLv.instance.data[key];
    };
    DataLv.make_merge_key = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (args.length <= 0)
            return "";
        var ret = args[0];
        for (var i = 1; i < args.length; ++i) {
            ret += "&" + args[i];
        }
        return ret;
    };
    Object.defineProperty(DataLv, "instance", {
        get: function () {
            if (!this._instance) {
                this._instance = new DataLv();
            }
            return this._instance;
        },
        enumerable: true,
        configurable: true
    });
    return DataLv;
}());
exports.default = DataLv;
},{}],60:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// ============================================
// 本文件根据data_mon自动生成
// 请勿手改
// ============================================
var DataMon = /** @class */ (function () {
    function DataMon() {
        this.data = {
            1: {
                id: 1,
                buffType: 1,
                fishType: 1,
                uiId: 1,
                rate: [2, 2,],
                name: "小黄鱼",
                impactColor: "#d96c88",
                crashZone: [],
                combination: [],
            },
            2: {
                id: 2,
                buffType: 1,
                fishType: 2,
                uiId: 2,
                rate: [2, 2,],
                name: "蓝热带",
                impactColor: "#e67b96",
                crashZone: [],
                combination: [],
            },
            3: {
                id: 3,
                buffType: 1,
                fishType: 3,
                uiId: 3,
                rate: [3, 3,],
                name: "小棘鱼",
                impactColor: "#db7b94",
                crashZone: [],
                combination: [],
            },
            4: {
                id: 4,
                buffType: 1,
                fishType: 4,
                uiId: 4,
                rate: [3, 3,],
                name: "红金枪",
                impactColor: "#e75f82",
                crashZone: [],
                combination: [],
            },
            5: {
                id: 5,
                buffType: 1,
                fishType: 5,
                uiId: 5,
                rate: [5, 5,],
                name: "蓝金枪",
                impactColor: "#ff6a8a",
                crashZone: [],
                combination: [],
            },
            6: {
                id: 6,
                buffType: 1,
                fishType: 5,
                uiId: 5,
                rate: [5, 5,],
                name: "蓝金枪",
                impactColor: "#ff6a8a",
                crashZone: [],
                combination: [],
            },
            7: {
                id: 7,
                buffType: 1,
                fishType: 6,
                uiId: 6,
                rate: [5, 5,],
                name: "天使鱼",
                impactColor: "#d96c88",
                crashZone: [],
                combination: [],
            },
            8: {
                id: 8,
                buffType: 1,
                fishType: 6,
                uiId: 6,
                rate: [5, 5,],
                name: "天使鱼",
                impactColor: "#d96c88",
                crashZone: [],
                combination: [],
            },
            9: {
                id: 9,
                buffType: 1,
                fishType: 7,
                uiId: 7,
                rate: [8, 8,],
                name: "鲂鱼",
                impactColor: "#d96c88",
                crashZone: [],
                combination: [],
            },
            10: {
                id: 10,
                buffType: 1,
                fishType: 7,
                uiId: 7,
                rate: [8, 8,],
                name: "鲂鱼",
                impactColor: "#d96c88",
                crashZone: [],
                combination: [],
            },
            11: {
                id: 11,
                buffType: 1,
                fishType: 8,
                uiId: 8,
                rate: [8, 8,],
                name: "帝鲶鱼",
                impactColor: "#e487ae",
                crashZone: [],
                combination: [],
            },
            12: {
                id: 12,
                buffType: 1,
                fishType: 8,
                uiId: 8,
                rate: [8, 8,],
                name: "帝鲶鱼",
                impactColor: "#e487ae",
                crashZone: [],
                combination: [],
            },
            13: {
                id: 13,
                buffType: 1,
                fishType: 9,
                uiId: 9,
                rate: [10, 10,],
                name: "红小丑",
                impactColor: "#f18ca6",
                crashZone: [],
                combination: [],
            },
            14: {
                id: 14,
                buffType: 1,
                fishType: 9,
                uiId: 9,
                rate: [10, 10,],
                name: "红小丑",
                impactColor: "#f18ca6",
                crashZone: [],
                combination: [],
            },
            15: {
                id: 15,
                buffType: 1,
                fishType: 10,
                uiId: 10,
                rate: [10, 10,],
                name: "蓝小丑",
                impactColor: "#f18ca6",
                crashZone: [],
                combination: [],
            },
            16: {
                id: 16,
                buffType: 1,
                fishType: 10,
                uiId: 10,
                rate: [10, 10,],
                name: "蓝小丑",
                impactColor: "#f18ca6",
                crashZone: [],
                combination: [],
            },
            17: {
                id: 17,
                buffType: 1,
                fishType: 11,
                uiId: 11,
                rate: [12, 12,],
                name: "黄河豚",
                impactColor: "#d96c88",
                crashZone: [],
                combination: [],
            },
            18: {
                id: 18,
                buffType: 1,
                fishType: 12,
                uiId: 12,
                rate: [15, 15,],
                name: "大天使",
                impactColor: "#f57e8f",
                crashZone: [120, 66,],
                combination: [],
            },
            19: {
                id: 19,
                buffType: 1,
                fishType: 13,
                uiId: 13,
                rate: [20, 20,],
                name: "红灯笼",
                impactColor: "#f48ea3",
                crashZone: [104, 83,],
                combination: [],
            },
            20: {
                id: 20,
                buffType: 1,
                fishType: 14,
                uiId: 14,
                rate: [20, 20,],
                name: "红海龟",
                impactColor: "#f77792",
                crashZone: [130, 73,],
                combination: [],
            },
            21: {
                id: 21,
                buffType: 1,
                fishType: 15,
                uiId: 15,
                rate: [30, 30,],
                name: "海鳗",
                impactColor: "#f08aa0",
                crashZone: [218, 49,],
                combination: [],
            },
            22: {
                id: 22,
                buffType: 1,
                fishType: 16,
                uiId: 16,
                rate: [50, 50,],
                name: "狮子鱼",
                impactColor: "#d995a3",
                crashZone: [115, 77,],
                combination: [],
            },
            23: {
                id: 23,
                buffType: 1,
                fishType: 17,
                uiId: 17,
                rate: [50, 50,],
                name: "剑鱼",
                impactColor: "#ed6884",
                crashZone: [246, 60,],
                combination: [],
            },
            24: {
                id: 24,
                buffType: 1,
                fishType: 18,
                uiId: 18,
                rate: [60, 60,],
                name: "大白鲨",
                impactColor: "#f77792",
                crashZone: [248, 70,],
                combination: [],
            },
            25: {
                id: 25,
                buffType: 1,
                fishType: 19,
                uiId: 19,
                rate: [100, 100,],
                name: "金白鲨",
                impactColor: "#f77792",
                crashZone: [267, 89,],
                combination: [],
            },
            26: {
                id: 26,
                buffType: 1,
                fishType: 20,
                uiId: 20,
                rate: [200, 200,],
                name: "美人鱼",
                impactColor: "#d96c88",
                crashZone: [94, 133, 242, 50,],
                combination: [],
            },
            100: {
                id: 100,
                buffType: 6,
                fishType: 21,
                uiId: 21,
                rate: [5, 200,],
                name: "海盗船",
                impactColor: "#e06982",
                crashZone: [360, 250,],
                combination: [],
            },
            150: {
                id: 150,
                buffType: 3,
                fishType: 22,
                uiId: 22,
                rate: [0, 0,],
                name: "全屏炸弹",
                impactColor: "#e988a1",
                crashZone: [164, 74,],
                combination: [],
            },
            151: {
                id: 151,
                buffType: 5,
                fishType: 23,
                uiId: 23,
                rate: [200, 200,],
                name: "冰霜美人鱼",
                impactColor: "#d96c88",
                crashZone: [100, 213, 286, 62,],
                combination: [],
            },
            200: {
                id: 200,
                buffType: 7,
                fishType: 24,
                uiId: -1,
                rate: [20, 20,],
                name: "大三元",
                impactColor: "#ff4d4d",
                crashZone: [],
                combination: [7, 7, 13,],
            },
            201: {
                id: 201,
                buffType: 7,
                fishType: 24,
                uiId: -1,
                rate: [30, 30,],
                name: "大三元",
                impactColor: "#ff4d4d",
                crashZone: [],
                combination: [13, 14, 15,],
            },
            300: {
                id: 300,
                buffType: 8,
                fishType: 25,
                uiId: -1,
                rate: [36, 36,],
                name: "大四喜",
                impactColor: "#ff4d4d",
                crashZone: [],
                combination: [11, 12, 13, 14,],
            },
            301: {
                id: 301,
                buffType: 8,
                fishType: 25,
                uiId: -1,
                rate: [50, 50,],
                name: "大四喜",
                impactColor: "#ff4d4d",
                crashZone: [],
                combination: [7, 13, 18, 19,],
            },
            400: {
                id: 400,
                buffType: 1,
                fishType: 5,
                uiId: 5,
                rate: [5, 5,],
                name: "参水蓝金枪",
                impactColor: "#ff6a8a",
                crashZone: [],
                combination: [],
            },
            401: {
                id: 401,
                buffType: 1,
                fishType: 5,
                uiId: 5,
                rate: [5, 5,],
                name: "参水蓝金枪",
                impactColor: "#ff6a8a",
                crashZone: [],
                combination: [],
            },
            402: {
                id: 402,
                buffType: 4,
                fishType: 26,
                uiId: 5,
                rate: [5, 5,],
                name: "奖金蓝金枪",
                impactColor: "#ff6a8a",
                crashZone: [],
                combination: [],
            },
            403: {
                id: 403,
                buffType: 2,
                fishType: 27,
                uiId: 5,
                rate: [5, 5,],
                name: "一网蓝金枪",
                impactColor: "#ff6a8a",
                crashZone: [],
                combination: [],
            },
            404: {
                id: 404,
                buffType: 1,
                fishType: 6,
                uiId: 6,
                rate: [5, 5,],
                name: "参水天使鱼",
                impactColor: "#d96c88",
                crashZone: [],
                combination: [],
            },
            405: {
                id: 405,
                buffType: 1,
                fishType: 6,
                uiId: 6,
                rate: [5, 5,],
                name: "参水天使鱼",
                impactColor: "#d96c88",
                crashZone: [],
                combination: [],
            },
            406: {
                id: 406,
                buffType: 4,
                fishType: 26,
                uiId: 6,
                rate: [5, 5,],
                name: "奖金天使鱼",
                impactColor: "#d96c88",
                crashZone: [],
                combination: [],
            },
            407: {
                id: 407,
                buffType: 2,
                fishType: 27,
                uiId: 6,
                rate: [5, 5,],
                name: "一网天使鱼",
                impactColor: "#d96c88",
                crashZone: [],
                combination: [],
            },
            408: {
                id: 408,
                buffType: 1,
                fishType: 7,
                uiId: 7,
                rate: [8, 8,],
                name: "参水鲂鱼",
                impactColor: "#d96c88",
                crashZone: [],
                combination: [],
            },
            409: {
                id: 409,
                buffType: 1,
                fishType: 7,
                uiId: 7,
                rate: [8, 8,],
                name: "参水鲂鱼",
                impactColor: "#d96c88",
                crashZone: [],
                combination: [],
            },
            410: {
                id: 410,
                buffType: 4,
                fishType: 26,
                uiId: 7,
                rate: [8, 8,],
                name: "奖金鲂鱼",
                impactColor: "#d96c88",
                crashZone: [],
                combination: [],
            },
            411: {
                id: 411,
                buffType: 2,
                fishType: 27,
                uiId: 7,
                rate: [8, 8,],
                name: "一网鲂鱼",
                impactColor: "#d96c88",
                crashZone: [],
                combination: [],
            },
            501: {
                id: 501,
                buffType: 1,
                fishType: 1,
                uiId: 1,
                rate: [2, 2,],
                name: "小黄鱼",
                impactColor: "#d96c88",
                crashZone: [],
                combination: [],
            },
            502: {
                id: 502,
                buffType: 1,
                fishType: 2,
                uiId: 2,
                rate: [2, 2,],
                name: "蓝热带",
                impactColor: "#e67b96",
                crashZone: [],
                combination: [],
            },
            503: {
                id: 503,
                buffType: 1,
                fishType: 3,
                uiId: 3,
                rate: [3, 3,],
                name: "小棘鱼",
                impactColor: "#db7b94",
                crashZone: [],
                combination: [],
            },
            504: {
                id: 504,
                buffType: 1,
                fishType: 4,
                uiId: 4,
                rate: [3, 3,],
                name: "红金枪",
                impactColor: "#e75f82",
                crashZone: [],
                combination: [],
            },
            505: {
                id: 505,
                buffType: 1,
                fishType: 5,
                uiId: 5,
                rate: [5, 5,],
                name: "蓝金枪",
                impactColor: "#ff6a8a",
                crashZone: [],
                combination: [],
            },
            506: {
                id: 506,
                buffType: 1,
                fishType: 5,
                uiId: 5,
                rate: [5, 5,],
                name: "蓝金枪",
                impactColor: "#ff6a8a",
                crashZone: [],
                combination: [],
            },
            507: {
                id: 507,
                buffType: 1,
                fishType: 6,
                uiId: 6,
                rate: [5, 5,],
                name: "天使鱼",
                impactColor: "#d96c88",
                crashZone: [],
                combination: [],
            },
            508: {
                id: 508,
                buffType: 1,
                fishType: 6,
                uiId: 6,
                rate: [5, 5,],
                name: "天使鱼",
                impactColor: "#d96c88",
                crashZone: [],
                combination: [],
            },
            509: {
                id: 509,
                buffType: 1,
                fishType: 7,
                uiId: 7,
                rate: [8, 8,],
                name: "鲂鱼",
                impactColor: "#d96c88",
                crashZone: [],
                combination: [],
            },
            510: {
                id: 510,
                buffType: 1,
                fishType: 7,
                uiId: 7,
                rate: [8, 8,],
                name: "鲂鱼",
                impactColor: "#d96c88",
                crashZone: [],
                combination: [],
            },
        };
    }
    DataMon.getIds = function () {
        return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 100, 150, 151, 200, 201, 300, 301, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510,];
    };
    DataMon.getData = function (key) {
        return DataMon.instance.data[key];
    };
    DataMon.make_merge_key = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (args.length <= 0)
            return "";
        var ret = args[0];
        for (var i = 1; i < args.length; ++i) {
            ret += "&" + args[i];
        }
        return ret;
    };
    Object.defineProperty(DataMon, "instance", {
        get: function () {
            if (!this._instance) {
                this._instance = new DataMon();
            }
            return this._instance;
        },
        enumerable: true,
        configurable: true
    });
    return DataMon;
}());
exports.default = DataMon;
},{}],61:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*
* uq;
*/
var AssetsPackageGroup = /** @class */ (function () {
    function AssetsPackageGroup() {
    }
    AssetsPackageGroup.initial = "init";
    AssetsPackageGroup.preloading = "preloading";
    return AssetsPackageGroup;
}());
exports.default = AssetsPackageGroup;
},{}],62:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 动态资源类，用于动态加载窗体所需要的动态资源
 */
var DynamicSource = /** @class */ (function () {
    function DynamicSource(caller, fileName, fileType, packageName) {
        this._fileName = null;
        this._fileType = null;
        this._packageName = null;
        this._fileName = fileName;
        this._fileType = fileType;
        this._packageName = packageName;
        this._caller = caller;
    }
    Object.defineProperty(DynamicSource.prototype, "fileName", {
        /**
         * 文件名
         */
        get: function () {
            return this._fileName;
        },
        set: function (name) {
            this._fileName = name;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DynamicSource.prototype, "fileType", {
        /**
         * 文件类型
         */
        get: function () {
            return this._fileType;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DynamicSource.prototype, "packageName", {
        /**
         * 资源的包名
         */
        get: function () {
            return this._packageName;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DynamicSource.prototype, "loaded", {
        /**
         * 资源是否已经加载
         */
        get: function () {
            return !!Laya.Loader.getRes(this._fileName);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 加载资源，由Window类回调
     */
    DynamicSource.prototype.load = function (cb) {
        Laya.loader.load(this._fileName, Laya.Handler.create(this, this._onLoaded, [cb]), null, this._fileType);
    };
    DynamicSource.prototype.dispose = function () {
        this._caller = null;
    };
    DynamicSource.prototype.onLoaded = function (caller, fun, args) {
        this._completedHandler = Laya.Handler.create(caller, fun, args, true);
    };
    /**
     * 资源加载完成
     */
    DynamicSource.prototype._onLoaded = function (cb) {
        this._completedHandler && this._completedHandler.run();
        cb.apply(this._caller);
        this.dispose();
    };
    return DynamicSource;
}());
exports.default = DynamicSource;
},{}],63:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * GmCmd
 */
var GmCmd = /** @class */ (function () {
    function GmCmd() {
    }
    return GmCmd;
}());
exports.default = GmCmd;
},{}],64:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*
* name;
*/
var NetworkChannelNames = /** @class */ (function () {
    function NetworkChannelNames() {
    }
    NetworkChannelNames.GameChannel = "GameChannel";
    return NetworkChannelNames;
}());
exports.default = NetworkChannelNames;
},{}],65:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var PlatformAndScreenMode;
(function (PlatformAndScreenMode) {
    //1:PC，2:IOS横，3:IOS竖，4:安卓横，5:安卓竖，6:其它横，7:其它
    //   Landscape = 1, // 横屏
    // Portrait = 2, // 竖屏
    PlatformAndScreenMode[PlatformAndScreenMode["PC"] = 1] = "PC";
    PlatformAndScreenMode[PlatformAndScreenMode["IOSLandscape"] = 2] = "IOSLandscape";
    PlatformAndScreenMode[PlatformAndScreenMode["IOSPortrait"] = 3] = "IOSPortrait";
    PlatformAndScreenMode[PlatformAndScreenMode["AndriodLandscape"] = 4] = "AndriodLandscape";
    PlatformAndScreenMode[PlatformAndScreenMode["AndriodPortrait"] = 5] = "AndriodPortrait";
    PlatformAndScreenMode[PlatformAndScreenMode["OtherLandscape"] = 6] = "OtherLandscape";
    PlatformAndScreenMode[PlatformAndScreenMode["Other"] = 7] = "Other";
})(PlatformAndScreenMode = exports.PlatformAndScreenMode || (exports.PlatformAndScreenMode = {}));
},{}],66:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*
* 声音播放类型：所有，背景，特效，对话
*/
var PlaySoundType;
(function (PlaySoundType) {
    PlaySoundType[PlaySoundType["BGM"] = 1] = "BGM";
    PlaySoundType[PlaySoundType["Effect"] = 2] = "Effect";
    PlaySoundType[PlaySoundType["Dialog"] = 3] = "Dialog";
})(PlaySoundType = exports.PlaySoundType || (exports.PlaySoundType = {}));
},{}],67:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
* 场景名称定义
*/
var SceneNames = /** @class */ (function () {
    function SceneNames() {
    }
    /**
     * 登录场景
     */
    SceneNames.LoginScene = "loginScene";
    /**
     * 主场景(大厅场景)
     */
    SceneNames.LobbyScene = "lobbyScene";
    /**
     * 房间场景
     */
    SceneNames.RoomScene = "roomScene";
    return SceneNames;
}());
exports.default = SceneNames;
},{}],68:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ScreenMode;
(function (ScreenMode) {
    ScreenMode[ScreenMode["None"] = 0] = "None";
    ScreenMode[ScreenMode["Landscape"] = 1] = "Landscape";
    ScreenMode[ScreenMode["Portrait"] = 2] = "Portrait";
})(ScreenMode = exports.ScreenMode || (exports.ScreenMode = {}));
},{}],69:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var VideoType;
(function (VideoType) {
    /**
     * LAYA原生动画（通过其IDE制作)
     */
    VideoType[VideoType["LayaAnimation"] = 1] = "LayaAnimation";
    /**
     * 骨骼动画
     */
    VideoType[VideoType["Skeleton"] = 2] = "Skeleton";
    /**
     * 由fairyGUI的加载器:GLoader实现的播放器，一般用于播放帧动画
     */
    VideoType[VideoType["GLoader"] = 3] = "GLoader";
    VideoType[VideoType["ExtendAnimation"] = 4] = "ExtendAnimation";
    VideoType[VideoType["ExtendSkeleton"] = 5] = "ExtendSkeleton";
})(VideoType = exports.VideoType || (exports.VideoType = {}));
},{}],70:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FUICloseBtn = /** @class */ (function (_super) {
    __extends(FUICloseBtn, _super);
    function FUICloseBtn() {
        return _super.call(this) || this;
    }
    FUICloseBtn.createInstance = function () {
        return (fairygui.UIPackage.createObject("briefUI", "CloseBtn"));
    };
    FUICloseBtn.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
        this.m_button = this.getControllerAt(0);
        this.m_n0 = (this.getChildAt(0));
    };
    FUICloseBtn.URL = "ui://75q2l4muqw20d";
    return FUICloseBtn;
}(fairygui.GButton));
exports.default = FUICloseBtn;
},{}],71:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FUIFishTypeItem = /** @class */ (function (_super) {
    __extends(FUIFishTypeItem, _super);
    function FUIFishTypeItem() {
        return _super.call(this) || this;
    }
    FUIFishTypeItem.createInstance = function () {
        return (fairygui.UIPackage.createObject("briefUI", "FishTypeItem"));
    };
    FUIFishTypeItem.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
        this.m_bg = (this.getChildAt(0));
        this.m_fishLoader = (this.getChildAt(1));
        this.m_fishRatioTxt = (this.getChildAt(2));
        this.m_nameLoader = (this.getChildAt(3));
    };
    FUIFishTypeItem.URL = "ui://75q2l4murgdn5j";
    return FUIFishTypeItem;
}(fairygui.GComponent));
exports.default = FUIFishTypeItem;
},{}],72:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FUIHelpItem = /** @class */ (function (_super) {
    __extends(FUIHelpItem, _super);
    function FUIHelpItem() {
        return _super.call(this) || this;
    }
    FUIHelpItem.createInstance = function () {
        return (fairygui.UIPackage.createObject("briefUI", "HelpItem"));
    };
    FUIHelpItem.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
        this.m_c1 = this.getControllerAt(0);
        this.m_n5 = (this.getChildAt(0));
    };
    FUIHelpItem.URL = "ui://75q2l4muqw2011";
    return FUIHelpItem;
}(fairygui.GComponent));
exports.default = FUIHelpItem;
},{}],73:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FUIHelpPlayContentView = /** @class */ (function (_super) {
    __extends(FUIHelpPlayContentView, _super);
    function FUIHelpPlayContentView() {
        return _super.call(this) || this;
    }
    FUIHelpPlayContentView.createInstance = function () {
        return (fairygui.UIPackage.createObject("briefUI", "HelpPlayContentView"));
    };
    FUIHelpPlayContentView.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
        this.m_n0 = (this.getChildAt(0));
    };
    FUIHelpPlayContentView.URL = "ui://75q2l4muuhyn77i";
    return FUIHelpPlayContentView;
}(fairygui.GComponent));
exports.default = FUIHelpPlayContentView;
},{}],74:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FUIHelpPlayPanel = /** @class */ (function (_super) {
    __extends(FUIHelpPlayPanel, _super);
    function FUIHelpPlayPanel() {
        return _super.call(this) || this;
    }
    FUIHelpPlayPanel.createInstance = function () {
        return (fairygui.UIPackage.createObject("briefUI", "HelpPlayPanel"));
    };
    FUIHelpPlayPanel.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
        this.m_n2 = (this.getChildAt(0));
        this.m_n0 = (this.getChildAt(1));
    };
    FUIHelpPlayPanel.URL = "ui://75q2l4mufc6p2r";
    return FUIHelpPlayPanel;
}(fairygui.GComponent));
exports.default = FUIHelpPlayPanel;
},{}],75:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FUIHelpView = /** @class */ (function (_super) {
    __extends(FUIHelpView, _super);
    function FUIHelpView() {
        return _super.call(this) || this;
    }
    FUIHelpView.createInstance = function () {
        return (fairygui.UIPackage.createObject("briefUI", "HelpView"));
    };
    FUIHelpView.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
        this.m_c1 = this.getControllerAt(0);
        this.m_n14 = (this.getChildAt(0));
        this.m_n9 = (this.getChildAt(1));
        this.m_n7 = (this.getChildAt(2));
        this.m_n10 = (this.getChildAt(3));
        this.m_top2 = (this.getChildAt(4));
        this.m_top1 = (this.getChildAt(5));
        this.m_top0 = (this.getChildAt(6));
        this.m_list = (this.getChildAt(7));
        this.m_n12 = (this.getChildAt(8));
        this.m_n13 = (this.getChildAt(9));
    };
    FUIHelpView.URL = "ui://75q2l4muqw20u";
    return FUIHelpView;
}(fairygui.GComponent));
exports.default = FUIHelpView;
},{}],76:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FUIHelpYuPanel = /** @class */ (function (_super) {
    __extends(FUIHelpYuPanel, _super);
    function FUIHelpYuPanel() {
        return _super.call(this) || this;
    }
    FUIHelpYuPanel.createInstance = function () {
        return (fairygui.UIPackage.createObject("briefUI", "HelpYuPanel"));
    };
    FUIHelpYuPanel.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
        this.m_fishList = (this.getChildAt(0));
    };
    FUIHelpYuPanel.URL = "ui://75q2l4mufc6p2p";
    return FUIHelpYuPanel;
}(fairygui.GComponent));
exports.default = FUIHelpYuPanel;
},{}],77:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FUIInfoView = /** @class */ (function (_super) {
    __extends(FUIInfoView, _super);
    function FUIInfoView() {
        return _super.call(this) || this;
    }
    FUIInfoView.createInstance = function () {
        return (fairygui.UIPackage.createObject("briefUI", "InfoView"));
    };
    FUIInfoView.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
        this.m_bg = (this.getChildAt(0));
        this.m_n1 = (this.getChildAt(1));
        this.m_n2 = (this.getChildAt(2));
        this.m_tip = (this.getChildAt(3));
        this.m_tipBtn = (this.getChildAt(4));
        this.m_n5 = (this.getChildAt(5));
        this.m_exeRect = (this.getChildAt(6));
        this.m_headImg = (this.getChildAt(7));
        this.m_exeModule = (this.getChildAt(8));
        this.m_idText = (this.getChildAt(9));
        this.m_n10 = (this.getChildAt(10));
        this.m_n11 = (this.getChildAt(11));
        this.m_n13 = (this.getChildAt(12));
        this.m_goldText = (this.getChildAt(13));
        this.m_n14 = (this.getChildAt(14));
        this.m_n15 = (this.getChildAt(15));
        this.m_n16 = (this.getChildAt(16));
        this.m_exeNum = (this.getChildAt(17));
        this.m_idNum = (this.getChildAt(18));
        this.m_lvText = (this.getChildAt(19));
        this.m_exeText = (this.getChildAt(20));
    };
    FUIInfoView.URL = "ui://75q2l4musxcx57";
    return FUIInfoView;
}(fairygui.GComponent));
exports.default = FUIInfoView;
},{}],78:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FUIRankItem = /** @class */ (function (_super) {
    __extends(FUIRankItem, _super);
    function FUIRankItem() {
        return _super.call(this) || this;
    }
    FUIRankItem.createInstance = function () {
        return (fairygui.UIPackage.createObject("briefUI", "RankItem"));
    };
    FUIRankItem.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
        this.m_c1 = this.getControllerAt(0);
        this.m_isMe = this.getControllerAt(1);
        this.m_n10 = (this.getChildAt(0));
        this.m_n23 = (this.getChildAt(1));
        this.m_rankImg = (this.getChildAt(2));
        this.m_n14 = (this.getChildAt(3));
        this.m_n15 = (this.getChildAt(4));
        this.m_headImg = (this.getChildAt(5));
        this.m_name = (this.getChildAt(6));
        this.m_n16 = (this.getChildAt(7));
        this.m_n17 = (this.getChildAt(8));
        this.m_goldNum = (this.getChildAt(9));
        this.m_numBg = (this.getChildAt(10));
        this.m_rankNum = (this.getChildAt(11));
        this.m_myIcon = (this.getChildAt(12));
    };
    FUIRankItem.URL = "ui://75q2l4muqw20t";
    return FUIRankItem;
}(fairygui.GComponent));
exports.default = FUIRankItem;
},{}],79:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FUIRankView = /** @class */ (function (_super) {
    __extends(FUIRankView, _super);
    function FUIRankView() {
        return _super.call(this) || this;
    }
    FUIRankView.createInstance = function () {
        return (fairygui.UIPackage.createObject("briefUI", "RankView"));
    };
    FUIRankView.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
        this.m_c1 = this.getControllerAt(0);
        this.m_bg = (this.getChildAt(0));
        this.m_n13 = (this.getChildAt(1));
        this.m_n3 = (this.getChildAt(2));
        this.m_n4 = (this.getChildAt(3));
        this.m_n5 = (this.getChildAt(4));
        this.m_n6 = (this.getChildAt(5));
        this.m_t1 = (this.getChildAt(6));
        this.m_t0 = (this.getChildAt(7));
        this.m_listContentView = (this.getChildAt(8));
    };
    FUIRankView.URL = "ui://75q2l4mufc6p3f";
    return FUIRankView;
}(fairygui.GComponent));
exports.default = FUIRankView;
},{}],80:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FUISettingSlide = /** @class */ (function (_super) {
    __extends(FUISettingSlide, _super);
    function FUISettingSlide() {
        return _super.call(this) || this;
    }
    FUISettingSlide.createInstance = function () {
        return (fairygui.UIPackage.createObject("briefUI", "SettingSlide"));
    };
    FUISettingSlide.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
        this.m_n0 = (this.getChildAt(0));
        this.m_bar = (this.getChildAt(1));
        this.m_grip = (this.getChildAt(2));
    };
    FUISettingSlide.URL = "ui://75q2l4mumaic50";
    return FUISettingSlide;
}(fairygui.GSlider));
exports.default = FUISettingSlide;
},{}],81:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FUISettingSlide_grip = /** @class */ (function (_super) {
    __extends(FUISettingSlide_grip, _super);
    function FUISettingSlide_grip() {
        return _super.call(this) || this;
    }
    FUISettingSlide_grip.createInstance = function () {
        return (fairygui.UIPackage.createObject("briefUI", "SettingSlide_grip"));
    };
    FUISettingSlide_grip.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
        this.m_button = this.getControllerAt(0);
        this.m_n0 = (this.getChildAt(0));
    };
    FUISettingSlide_grip.URL = "ui://75q2l4mumaic4z";
    return FUISettingSlide_grip;
}(fairygui.GButton));
exports.default = FUISettingSlide_grip;
},{}],82:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FUISettingView = /** @class */ (function (_super) {
    __extends(FUISettingView, _super);
    function FUISettingView() {
        return _super.call(this) || this;
    }
    FUISettingView.createInstance = function () {
        return (fairygui.UIPackage.createObject("briefUI", "SettingView"));
    };
    FUISettingView.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
        this.m_n16 = (this.getChildAt(0));
        this.m_n17 = (this.getChildAt(1));
        this.m_n18 = (this.getChildAt(2));
        this.m_n19 = (this.getChildAt(3));
        this.m_music_slider = (this.getChildAt(4));
        this.m_sound_slider = (this.getChildAt(5));
    };
    FUISettingView.URL = "ui://75q2l4muqw20c";
    return FUISettingView;
}(fairygui.GComponent));
exports.default = FUISettingView;
},{}],83:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FUITipContext = /** @class */ (function (_super) {
    __extends(FUITipContext, _super);
    function FUITipContext() {
        return _super.call(this) || this;
    }
    FUITipContext.createInstance = function () {
        return (fairygui.UIPackage.createObject("briefUI", "TipContext"));
    };
    FUITipContext.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
        this.m_c1 = this.getControllerAt(0);
        this.m_n0 = (this.getChildAt(0));
        this.m_n3 = (this.getChildAt(1));
        this.m_n4 = (this.getChildAt(2));
        this.m_n5 = (this.getChildAt(3));
        this.m_closeBtn = (this.getChildAt(4));
    };
    FUITipContext.URL = "ui://75q2l4muqw20e";
    return FUITipContext;
}(fairygui.GComponent));
exports.default = FUITipContext;
},{}],84:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FUITipView = /** @class */ (function (_super) {
    __extends(FUITipView, _super);
    function FUITipView() {
        return _super.call(this) || this;
    }
    FUITipView.createInstance = function () {
        return (fairygui.UIPackage.createObject("briefUI", "TipView"));
    };
    FUITipView.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
        this.m_context = (this.getChildAt(0));
    };
    FUITipView.URL = "ui://75q2l4muqw2018";
    return FUITipView;
}(fairygui.GComponent));
exports.default = FUITipView;
},{}],85:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FUIHelpView = /** @class */ (function (_super) {
    __extends(FUIHelpView, _super);
    function FUIHelpView() {
        return _super.call(this) || this;
    }
    FUIHelpView.createInstance = function () {
        return (fairygui.UIPackage.createObject("briefUI", "HelpView"));
    };
    FUIHelpView.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
        this.m_c1 = this.getControllerAt(0);
        this.m_n14 = (this.getChildAt(0));
        this.m_n9 = (this.getChildAt(1));
        this.m_n7 = (this.getChildAt(2));
        this.m_n10 = (this.getChildAt(3));
        this.m_top2 = (this.getChildAt(4));
        this.m_top1 = (this.getChildAt(5));
        this.m_top0 = (this.getChildAt(6));
        this.m_list = (this.getChildAt(7));
        this.m_n12 = (this.getChildAt(8));
        this.m_n13 = (this.getChildAt(9));
    };
    FUIHelpView.URL = "ui://75q2l4muqw20u";
    return FUIHelpView;
}(fairygui.GComponent));
exports.default = FUIHelpView;
},{}],86:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FUIrankListContentView = /** @class */ (function (_super) {
    __extends(FUIrankListContentView, _super);
    function FUIrankListContentView() {
        return _super.call(this) || this;
    }
    FUIrankListContentView.createInstance = function () {
        return (fairygui.UIPackage.createObject("briefUI", "rankListContentView"));
    };
    FUIrankListContentView.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
        this.m_n15 = (this.getChildAt(0));
        this.m_list = (this.getChildAt(1));
    };
    FUIrankListContentView.URL = "ui://75q2l4mutb5z77j";
    return FUIrankListContentView;
}(fairygui.GComponent));
exports.default = FUIrankListContentView;
},{}],87:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FUItipBtn = /** @class */ (function (_super) {
    __extends(FUItipBtn, _super);
    function FUItipBtn() {
        return _super.call(this) || this;
    }
    FUItipBtn.createInstance = function () {
        return (fairygui.UIPackage.createObject("briefUI", "tipBtn"));
    };
    FUItipBtn.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
        this.m_button = this.getControllerAt(0);
        this.m_n0 = (this.getChildAt(0));
    };
    FUItipBtn.URL = "ui://75q2l4musxcx58";
    return FUItipBtn;
}(fairygui.GButton));
exports.default = FUItipBtn;
},{}],88:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
Object.defineProperty(exports, "__esModule", { value: true });
var FUIHelpYuPanel_1 = require("./FUIHelpYuPanel");
var FUIHelpPlayPanel_1 = require("./FUIHelpPlayPanel");
var FUIRankView_1 = require("./FUIRankView");
var FUISettingSlide_grip_1 = require("./FUISettingSlide_grip");
var FUISettingSlide_1 = require("./FUISettingSlide");
var FUIHelpItem_1 = require("./FUIHelpItem");
var FUITipView_1 = require("./FUITipView");
var FUISettingView_1 = require("./FUISettingView");
var FUICloseBtn_1 = require("./FUICloseBtn");
var FUITipContext_1 = require("./FUITipContext");
var FUIRankItem_1 = require("./FUIRankItem");
var FUIHelpView_1 = require("./FUIHelpView");
var FUIFishTypeItem_1 = require("./FUIFishTypeItem");
var FUIInfoView_1 = require("./FUIInfoView");
var FUItipBtn_1 = require("./FUItipBtn");
var FUIrankListContentView_1 = require("./FUIrankListContentView");
var FUIHelpPlayContentView_1 = require("./FUIHelpPlayContentView");
var briefUIBinder = /** @class */ (function () {
    function briefUIBinder() {
    }
    briefUIBinder.bindAll = function () {
        fairygui.UIObjectFactory.setPackageItemExtension(FUIHelpYuPanel_1.default.URL, FUIHelpYuPanel_1.default);
        fairygui.UIObjectFactory.setPackageItemExtension(FUIHelpPlayPanel_1.default.URL, FUIHelpPlayPanel_1.default);
        fairygui.UIObjectFactory.setPackageItemExtension(FUIRankView_1.default.URL, FUIRankView_1.default);
        fairygui.UIObjectFactory.setPackageItemExtension(FUISettingSlide_grip_1.default.URL, FUISettingSlide_grip_1.default);
        fairygui.UIObjectFactory.setPackageItemExtension(FUISettingSlide_1.default.URL, FUISettingSlide_1.default);
        fairygui.UIObjectFactory.setPackageItemExtension(FUIHelpItem_1.default.URL, FUIHelpItem_1.default);
        fairygui.UIObjectFactory.setPackageItemExtension(FUITipView_1.default.URL, FUITipView_1.default);
        fairygui.UIObjectFactory.setPackageItemExtension(FUISettingView_1.default.URL, FUISettingView_1.default);
        fairygui.UIObjectFactory.setPackageItemExtension(FUICloseBtn_1.default.URL, FUICloseBtn_1.default);
        fairygui.UIObjectFactory.setPackageItemExtension(FUITipContext_1.default.URL, FUITipContext_1.default);
        fairygui.UIObjectFactory.setPackageItemExtension(FUIRankItem_1.default.URL, FUIRankItem_1.default);
        fairygui.UIObjectFactory.setPackageItemExtension(FUIHelpView_1.default.URL, FUIHelpView_1.default);
        fairygui.UIObjectFactory.setPackageItemExtension(FUIFishTypeItem_1.default.URL, FUIFishTypeItem_1.default);
        fairygui.UIObjectFactory.setPackageItemExtension(FUIInfoView_1.default.URL, FUIInfoView_1.default);
        fairygui.UIObjectFactory.setPackageItemExtension(FUItipBtn_1.default.URL, FUItipBtn_1.default);
        fairygui.UIObjectFactory.setPackageItemExtension(FUIrankListContentView_1.default.URL, FUIrankListContentView_1.default);
        fairygui.UIObjectFactory.setPackageItemExtension(FUIHelpPlayContentView_1.default.URL, FUIHelpPlayContentView_1.default);
    };
    return briefUIBinder;
}());
exports.default = briefUIBinder;
},{"./FUICloseBtn":70,"./FUIFishTypeItem":71,"./FUIHelpItem":72,"./FUIHelpPlayContentView":73,"./FUIHelpPlayPanel":74,"./FUIHelpView":75,"./FUIHelpYuPanel":76,"./FUIInfoView":77,"./FUIRankItem":78,"./FUIRankView":79,"./FUISettingSlide":80,"./FUISettingSlide_grip":81,"./FUISettingView":82,"./FUITipContext":83,"./FUITipView":84,"./FUIrankListContentView":86,"./FUItipBtn":87}],89:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FUIMaskView = /** @class */ (function (_super) {
    __extends(FUIMaskView, _super);
    function FUIMaskView() {
        return _super.call(this) || this;
    }
    FUIMaskView.createInstance = function () {
        return (fairygui.UIPackage.createObject("commonUI", "MaskView"));
    };
    FUIMaskView.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
        this.m_bgGraph = (this.getChildAt(0));
    };
    FUIMaskView.URL = "ui://y2ep490wt6ch0";
    return FUIMaskView;
}(fairygui.GComponent));
exports.default = FUIMaskView;
},{}],90:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
Object.defineProperty(exports, "__esModule", { value: true });
var FUIMaskView_1 = require("./FUIMaskView");
var commonUIBinder = /** @class */ (function () {
    function commonUIBinder() {
    }
    commonUIBinder.bindAll = function () {
        fairygui.UIObjectFactory.setPackageItemExtension(FUIMaskView_1.default.URL, FUIMaskView_1.default);
    };
    return commonUIBinder;
}());
exports.default = commonUIBinder;
},{"./FUIMaskView":89}],91:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FUIEntryHeadView = /** @class */ (function (_super) {
    __extends(FUIEntryHeadView, _super);
    function FUIEntryHeadView() {
        return _super.call(this) || this;
    }
    FUIEntryHeadView.createInstance = function () {
        return (fairygui.UIPackage.createObject("entry", "EntryHeadView"));
    };
    FUIEntryHeadView.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
        this.m_n0 = (this.getChildAt(0));
        this.m_exeRect = (this.getChildAt(1));
        this.m_headImg = (this.getChildAt(2));
        this.m_exeModule = (this.getChildAt(3));
        this.m_n8 = (this.getChildAt(4));
        this.m_lvNum = (this.getChildAt(5));
        this.m_idText = (this.getChildAt(6));
        this.m_persentText = (this.getChildAt(7));
        this.m_n5 = (this.getChildAt(8));
    };
    FUIEntryHeadView.URL = "ui://5xl6v9kdsxcxb6";
    return FUIEntryHeadView;
}(fairygui.GComponent));
exports.default = FUIEntryHeadView;
},{}],92:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FUIEntryItem = /** @class */ (function (_super) {
    __extends(FUIEntryItem, _super);
    function FUIEntryItem() {
        return _super.call(this) || this;
    }
    FUIEntryItem.createInstance = function () {
        return (fairygui.UIPackage.createObject("entry", "EntryItem"));
    };
    FUIEntryItem.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
        this.m_c1 = this.getControllerAt(0);
    };
    FUIEntryItem.URL = "ui://5xl6v9kdtg8891";
    return FUIEntryItem;
}(fairygui.GComponent));
exports.default = FUIEntryItem;
},{}],93:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FUIEntryView = /** @class */ (function (_super) {
    __extends(FUIEntryView, _super);
    function FUIEntryView() {
        return _super.call(this) || this;
    }
    FUIEntryView.createInstance = function () {
        return (fairygui.UIPackage.createObject("entry", "EntryView"));
    };
    FUIEntryView.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
        this.m_c1 = this.getControllerAt(0);
        this.m_bg2 = (this.getChildAt(0));
        this.m_bg = (this.getChildAt(1));
        this.m_bgAniBox = (this.getChildAt(2));
        this.m_infoview = (this.getChildAt(3));
        this.m_menu = (this.getChildAt(4));
        this.m_context = (this.getChildAt(5));
    };
    FUIEntryView.URL = "ui://5xl6v9kdrkgx0";
    return FUIEntryView;
}(fairygui.GComponent));
exports.default = FUIEntryView;
},{}],94:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FUIInfoView = /** @class */ (function (_super) {
    __extends(FUIInfoView, _super);
    function FUIInfoView() {
        return _super.call(this) || this;
    }
    FUIInfoView.createInstance = function () {
        return (fairygui.UIPackage.createObject("entry", "InfoView"));
    };
    FUIInfoView.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
        this.m_c1 = this.getControllerAt(0);
        this.m_headBox = (this.getChildAt(0));
        this.m_n17 = (this.getChildAt(1));
        this.m_n20 = (this.getChildAt(2));
        this.m_goldText = (this.getChildAt(3));
        this.m_n21 = (this.getChildAt(4));
    };
    FUIInfoView.URL = "ui://5xl6v9kdtg8892";
    return FUIInfoView;
}(fairygui.GComponent));
exports.default = FUIInfoView;
},{}],95:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FUIMenuBtn = /** @class */ (function (_super) {
    __extends(FUIMenuBtn, _super);
    function FUIMenuBtn() {
        return _super.call(this) || this;
    }
    FUIMenuBtn.createInstance = function () {
        return (fairygui.UIPackage.createObject("entry", "MenuBtn"));
    };
    FUIMenuBtn.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
        this.m_button = this.getControllerAt(0);
        this.m_c1 = this.getControllerAt(1);
        this.m_n10 = (this.getChildAt(0));
    };
    FUIMenuBtn.URL = "ui://5xl6v9kdtg8895";
    return FUIMenuBtn;
}(fairygui.GButton));
exports.default = FUIMenuBtn;
},{}],96:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FUIMenuView = /** @class */ (function (_super) {
    __extends(FUIMenuView, _super);
    function FUIMenuView() {
        return _super.call(this) || this;
    }
    FUIMenuView.createInstance = function () {
        return (fairygui.UIPackage.createObject("entry", "MenuView"));
    };
    FUIMenuView.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
        this.m_c1 = this.getControllerAt(0);
        this.m_settingBtnList = (this.getChildAt(0));
    };
    FUIMenuView.URL = "ui://5xl6v9kdtg8894";
    return FUIMenuView;
}(fairygui.GComponent));
exports.default = FUIMenuView;
},{}],97:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FUIbg = /** @class */ (function (_super) {
    __extends(FUIbg, _super);
    function FUIbg() {
        return _super.call(this) || this;
    }
    FUIbg.createInstance = function () {
        return (fairygui.UIPackage.createObject("entry", "bg"));
    };
    FUIbg.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
        this.m_n16 = (this.getChildAt(0));
        this.m_n17 = (this.getChildAt(1));
    };
    FUIbg.URL = "ui://5xl6v9kduhynbq";
    return FUIbg;
}(fairygui.GComponent));
exports.default = FUIbg;
},{}],98:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
Object.defineProperty(exports, "__esModule", { value: true });
var FUIEntryView_1 = require("./FUIEntryView");
var FUIEntryHeadView_1 = require("./FUIEntryHeadView");
var FUIEntryItem_1 = require("./FUIEntryItem");
var FUIInfoView_1 = require("./FUIInfoView");
var FUIMenuView_1 = require("./FUIMenuView");
var FUIMenuBtn_1 = require("./FUIMenuBtn");
var FUIbg_1 = require("./FUIbg");
var entryBinder = /** @class */ (function () {
    function entryBinder() {
    }
    entryBinder.bindAll = function () {
        fairygui.UIObjectFactory.setPackageItemExtension(FUIEntryView_1.default.URL, FUIEntryView_1.default);
        fairygui.UIObjectFactory.setPackageItemExtension(FUIEntryHeadView_1.default.URL, FUIEntryHeadView_1.default);
        fairygui.UIObjectFactory.setPackageItemExtension(FUIEntryItem_1.default.URL, FUIEntryItem_1.default);
        fairygui.UIObjectFactory.setPackageItemExtension(FUIInfoView_1.default.URL, FUIInfoView_1.default);
        fairygui.UIObjectFactory.setPackageItemExtension(FUIMenuView_1.default.URL, FUIMenuView_1.default);
        fairygui.UIObjectFactory.setPackageItemExtension(FUIMenuBtn_1.default.URL, FUIMenuBtn_1.default);
        fairygui.UIObjectFactory.setPackageItemExtension(FUIbg_1.default.URL, FUIbg_1.default);
    };
    return entryBinder;
}());
exports.default = entryBinder;
},{"./FUIEntryHeadView":91,"./FUIEntryItem":92,"./FUIEntryView":93,"./FUIInfoView":94,"./FUIMenuBtn":95,"./FUIMenuView":96,"./FUIbg":97}],99:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FUIGmBtn = /** @class */ (function (_super) {
    __extends(FUIGmBtn, _super);
    function FUIGmBtn() {
        return _super.call(this) || this;
    }
    FUIGmBtn.createInstance = function () {
        return (fairygui.UIPackage.createObject("gmCmd", "GmBtn"));
    };
    FUIGmBtn.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
        this.m_n7 = (this.getChildAt(0));
        this.m_n8 = (this.getChildAt(1));
    };
    FUIGmBtn.URL = "ui://lnswovbz8eoc7";
    return FUIGmBtn;
}(fairygui.GComponent));
exports.default = FUIGmBtn;
},{}],100:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FUIGmView = /** @class */ (function (_super) {
    __extends(FUIGmView, _super);
    function FUIGmView() {
        return _super.call(this) || this;
    }
    FUIGmView.createInstance = function () {
        return (fairygui.UIPackage.createObject("gmCmd", "GmView"));
    };
    FUIGmView.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
        this.m_content = (this.getChildAt(0));
    };
    FUIGmView.URL = "ui://lnswovbz8eoc3";
    return FUIGmView;
}(fairygui.GComponent));
exports.default = FUIGmView;
},{}],101:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FUIDynamicLoadingView = /** @class */ (function (_super) {
    __extends(FUIDynamicLoadingView, _super);
    function FUIDynamicLoadingView() {
        return _super.call(this) || this;
    }
    FUIDynamicLoadingView.createInstance = function () {
        return (fairygui.UIPackage.createObject("loading", "DynamicLoadingView"));
    };
    FUIDynamicLoadingView.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
        this.m_bgl = (this.getChildAt(0));
        this.m_content = (this.getChildAt(1));
    };
    FUIDynamicLoadingView.URL = "ui://g2ixeje8ny39p";
    return FUIDynamicLoadingView;
}(fairygui.GComponent));
exports.default = FUIDynamicLoadingView;
},{}],102:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FUILoadBarView = /** @class */ (function (_super) {
    __extends(FUILoadBarView, _super);
    function FUILoadBarView() {
        return _super.call(this) || this;
    }
    FUILoadBarView.createInstance = function () {
        return (fairygui.UIPackage.createObject("loading", "LoadBarView"));
    };
    FUILoadBarView.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
        this.m_n11 = (this.getChildAt(0));
        this.m_barMaskView = (this.getChildAt(1));
        this.m_fish = (this.getChildAt(2));
        this.m_title = (this.getChildAt(3));
    };
    FUILoadBarView.URL = "ui://g2ixeje8ny39q";
    return FUILoadBarView;
}(fairygui.GComponent));
exports.default = FUILoadBarView;
},{}],103:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FUILoadingContentView = /** @class */ (function (_super) {
    __extends(FUILoadingContentView, _super);
    function FUILoadingContentView() {
        return _super.call(this) || this;
    }
    FUILoadingContentView.createInstance = function () {
        return (fairygui.UIPackage.createObject("loading", "LoadingContentView"));
    };
    FUILoadingContentView.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
        this.m_barView = (this.getChildAt(0));
        this.m_logoBox = (this.getChildAt(1));
    };
    FUILoadingContentView.URL = "ui://g2ixeje8ccfym";
    return FUILoadingContentView;
}(fairygui.GComponent));
exports.default = FUILoadingContentView;
},{}],104:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FUILoadingView = /** @class */ (function (_super) {
    __extends(FUILoadingView, _super);
    function FUILoadingView() {
        return _super.call(this) || this;
    }
    FUILoadingView.createInstance = function () {
        return (fairygui.UIPackage.createObject("loading", "LoadingView"));
    };
    FUILoadingView.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
        this.m_bgl = (this.getChildAt(0));
        this.m_content = (this.getChildAt(1));
    };
    FUILoadingView.URL = "ui://g2ixeje8e98g5";
    return FUILoadingView;
}(fairygui.GComponent));
exports.default = FUILoadingView;
},{}],105:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FUIbarMaskView = /** @class */ (function (_super) {
    __extends(FUIbarMaskView, _super);
    function FUIbarMaskView() {
        return _super.call(this) || this;
    }
    FUIbarMaskView.createInstance = function () {
        return (fairygui.UIPackage.createObject("loading", "barMaskView"));
    };
    FUIbarMaskView.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
        this.m_bar = (this.getChildAt(0));
        this.m_mask = (this.getChildAt(1));
    };
    FUIbarMaskView.URL = "ui://g2ixeje8ny39r";
    return FUIbarMaskView;
}(fairygui.GComponent));
exports.default = FUIbarMaskView;
},{}],106:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
Object.defineProperty(exports, "__esModule", { value: true });
var FUILoadingContentView_1 = require("./FUILoadingContentView");
var FUILoadingView_1 = require("./FUILoadingView");
var FUIDynamicLoadingView_1 = require("./FUIDynamicLoadingView");
var FUILoadBarView_1 = require("./FUILoadBarView");
var FUIbarMaskView_1 = require("./FUIbarMaskView");
var loadingBinder = /** @class */ (function () {
    function loadingBinder() {
    }
    loadingBinder.bindAll = function () {
        fairygui.UIObjectFactory.setPackageItemExtension(FUILoadingContentView_1.default.URL, FUILoadingContentView_1.default);
        fairygui.UIObjectFactory.setPackageItemExtension(FUILoadingView_1.default.URL, FUILoadingView_1.default);
        fairygui.UIObjectFactory.setPackageItemExtension(FUIDynamicLoadingView_1.default.URL, FUIDynamicLoadingView_1.default);
        fairygui.UIObjectFactory.setPackageItemExtension(FUILoadBarView_1.default.URL, FUILoadBarView_1.default);
        fairygui.UIObjectFactory.setPackageItemExtension(FUIbarMaskView_1.default.URL, FUIbarMaskView_1.default);
    };
    return loadingBinder;
}());
exports.default = loadingBinder;
},{"./FUIDynamicLoadingView":101,"./FUILoadBarView":102,"./FUILoadingContentView":103,"./FUILoadingView":104,"./FUIbarMaskView":105}],107:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FUIDisconnectedView = /** @class */ (function (_super) {
    __extends(FUIDisconnectedView, _super);
    function FUIDisconnectedView() {
        return _super.call(this) || this;
    }
    FUIDisconnectedView.createInstance = function () {
        return (fairygui.UIPackage.createObject("loginUi", "DisconnectedView"));
    };
    FUIDisconnectedView.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
        this.m_n0 = (this.getChildAt(0));
        this.m_okBtn = (this.getChildAt(1));
        this.m_n2 = (this.getChildAt(2));
    };
    FUIDisconnectedView.URL = "ui://liobtiy9glv28";
    return FUIDisconnectedView;
}(fairygui.GComponent));
exports.default = FUIDisconnectedView;
},{}],108:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FUIEnterBtn = /** @class */ (function (_super) {
    __extends(FUIEnterBtn, _super);
    function FUIEnterBtn() {
        return _super.call(this) || this;
    }
    FUIEnterBtn.createInstance = function () {
        return (fairygui.UIPackage.createObject("loginUi", "EnterBtn"));
    };
    FUIEnterBtn.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
        this.m_button = this.getControllerAt(0);
        this.m_n11 = (this.getChildAt(0));
        this.m_title = (this.getChildAt(1));
    };
    FUIEnterBtn.URL = "ui://liobtiy98eoc3";
    return FUIEnterBtn;
}(fairygui.GButton));
exports.default = FUIEnterBtn;
},{}],109:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FUIEnterView = /** @class */ (function (_super) {
    __extends(FUIEnterView, _super);
    function FUIEnterView() {
        return _super.call(this) || this;
    }
    FUIEnterView.createInstance = function () {
        return (fairygui.UIPackage.createObject("loginUi", "EnterView"));
    };
    FUIEnterView.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
        this.m_startBtn = (this.getChildAt(0));
        this.m_token_txt = (this.getChildAt(1));
        this.m_token_input = (this.getChildAt(2));
    };
    FUIEnterView.URL = "ui://liobtiy99lp37";
    return FUIEnterView;
}(fairygui.GComponent));
exports.default = FUIEnterView;
},{}],110:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FUIOkBtn = /** @class */ (function (_super) {
    __extends(FUIOkBtn, _super);
    function FUIOkBtn() {
        return _super.call(this) || this;
    }
    FUIOkBtn.createInstance = function () {
        return (fairygui.UIPackage.createObject("loginUi", "OkBtn"));
    };
    FUIOkBtn.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
        this.m_n0 = (this.getChildAt(0));
    };
    FUIOkBtn.URL = "ui://liobtiy9glv2a";
    return FUIOkBtn;
}(fairygui.GButton));
exports.default = FUIOkBtn;
},{}],111:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FUIServerContext = /** @class */ (function (_super) {
    __extends(FUIServerContext, _super);
    function FUIServerContext() {
        return _super.call(this) || this;
    }
    FUIServerContext.createInstance = function () {
        return (fairygui.UIPackage.createObject("loginUi", "ServerContext"));
    };
    FUIServerContext.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
        this.m_serverList = (this.getChildAt(0));
        this.m_infoTitle = (this.getChildAt(1));
        this.m_serverInfoLabel = (this.getChildAt(2));
    };
    FUIServerContext.URL = "ui://liobtiy9mdi56";
    return FUIServerContext;
}(fairygui.GComponent));
exports.default = FUIServerContext;
},{}],112:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FUIServerItemView = /** @class */ (function (_super) {
    __extends(FUIServerItemView, _super);
    function FUIServerItemView() {
        return _super.call(this) || this;
    }
    FUIServerItemView.createInstance = function () {
        return (fairygui.UIPackage.createObject("loginUi", "ServerItemView"));
    };
    FUIServerItemView.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
        this.m_button = this.getControllerAt(0);
        this.m_n2 = (this.getChildAt(0));
        this.m_title = (this.getChildAt(1));
    };
    FUIServerItemView.URL = "ui://liobtiy98eoc4";
    return FUIServerItemView;
}(fairygui.GButton));
exports.default = FUIServerItemView;
},{}],113:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FUIServerListView = /** @class */ (function (_super) {
    __extends(FUIServerListView, _super);
    function FUIServerListView() {
        return _super.call(this) || this;
    }
    FUIServerListView.createInstance = function () {
        return (fairygui.UIPackage.createObject("loginUi", "ServerListView"));
    };
    FUIServerListView.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
        this.m_bgGraphic = (this.getChildAt(0));
        this.m_context = (this.getChildAt(1));
        this.m_enter = (this.getChildAt(2));
    };
    FUIServerListView.URL = "ui://liobtiy98eoc5";
    return FUIServerListView;
}(fairygui.GComponent));
exports.default = FUIServerListView;
},{}],114:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
Object.defineProperty(exports, "__esModule", { value: true });
var FUIEnterBtn_1 = require("./FUIEnterBtn");
var FUIServerItemView_1 = require("./FUIServerItemView");
var FUIServerListView_1 = require("./FUIServerListView");
var FUIEnterView_1 = require("./FUIEnterView");
var FUIDisconnectedView_1 = require("./FUIDisconnectedView");
var FUIOkBtn_1 = require("./FUIOkBtn");
var FUIServerContext_1 = require("./FUIServerContext");
var loginUiBinder = /** @class */ (function () {
    function loginUiBinder() {
    }
    loginUiBinder.bindAll = function () {
        fairygui.UIObjectFactory.setPackageItemExtension(FUIEnterBtn_1.default.URL, FUIEnterBtn_1.default);
        fairygui.UIObjectFactory.setPackageItemExtension(FUIServerItemView_1.default.URL, FUIServerItemView_1.default);
        fairygui.UIObjectFactory.setPackageItemExtension(FUIServerListView_1.default.URL, FUIServerListView_1.default);
        fairygui.UIObjectFactory.setPackageItemExtension(FUIEnterView_1.default.URL, FUIEnterView_1.default);
        fairygui.UIObjectFactory.setPackageItemExtension(FUIDisconnectedView_1.default.URL, FUIDisconnectedView_1.default);
        fairygui.UIObjectFactory.setPackageItemExtension(FUIOkBtn_1.default.URL, FUIOkBtn_1.default);
        fairygui.UIObjectFactory.setPackageItemExtension(FUIServerContext_1.default.URL, FUIServerContext_1.default);
    };
    return loginUiBinder;
}());
exports.default = loginUiBinder;
},{"./FUIDisconnectedView":107,"./FUIEnterBtn":108,"./FUIEnterView":109,"./FUIOkBtn":110,"./FUIServerContext":111,"./FUIServerItemView":112,"./FUIServerListView":113}],115:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FUIAimLineView = /** @class */ (function (_super) {
    __extends(FUIAimLineView, _super);
    function FUIAimLineView() {
        return _super.call(this) || this;
    }
    FUIAimLineView.createInstance = function () {
        return (fairygui.UIPackage.createObject("roomScene", "AimLineView"));
    };
    FUIAimLineView.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
        this.m_n0 = (this.getChildAt(0));
        this.m_n1 = (this.getChildAt(1));
        this.m_n2 = (this.getChildAt(2));
        this.m_n3 = (this.getChildAt(3));
        this.m_n4 = (this.getChildAt(4));
        this.m_n5 = (this.getChildAt(5));
        this.m_n6 = (this.getChildAt(6));
        this.m_n7 = (this.getChildAt(7));
        this.m_n8 = (this.getChildAt(8));
        this.m_n9 = (this.getChildAt(9));
        this.m_n10 = (this.getChildAt(10));
        this.m_n11 = (this.getChildAt(11));
        this.m_n12 = (this.getChildAt(12));
        this.m_n13 = (this.getChildAt(13));
        this.m_n14 = (this.getChildAt(14));
        this.m_n15 = (this.getChildAt(15));
        this.m_n16 = (this.getChildAt(16));
        this.m_n17 = (this.getChildAt(17));
        this.m_n18 = (this.getChildAt(18));
        this.m_n19 = (this.getChildAt(19));
        this.m_n20 = (this.getChildAt(20));
        this.m_n26 = (this.getChildAt(21));
        this.m_mask = (this.getChildAt(22));
    };
    FUIAimLineView.URL = "ui://0lwk28v8q4y671b";
    return FUIAimLineView;
}(fairygui.GComponent));
exports.default = FUIAimLineView;
},{}],116:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FUIAutoFireFishItem = /** @class */ (function (_super) {
    __extends(FUIAutoFireFishItem, _super);
    function FUIAutoFireFishItem() {
        return _super.call(this) || this;
    }
    FUIAutoFireFishItem.createInstance = function () {
        return (fairygui.UIPackage.createObject("roomScene", "AutoFireFishItem"));
    };
    FUIAutoFireFishItem.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
        this.m_c1 = this.getControllerAt(0);
        this.m_bg = (this.getChildAt(0));
        this.m_n6 = (this.getChildAt(1));
        this.m_fishLoader = (this.getChildAt(2));
        this.m_n3 = (this.getChildAt(3));
        this.m_fishRatioTxt = (this.getChildAt(4));
        this.m_checked = (this.getChildAt(5));
        this.m_nameLoader = (this.getChildAt(6));
    };
    FUIAutoFireFishItem.URL = "ui://0lwk28v8d7af726";
    return FUIAutoFireFishItem;
}(fairygui.GComponent));
exports.default = FUIAutoFireFishItem;
},{}],117:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FUIAutoHuntTipsView = /** @class */ (function (_super) {
    __extends(FUIAutoHuntTipsView, _super);
    function FUIAutoHuntTipsView() {
        return _super.call(this) || this;
    }
    FUIAutoHuntTipsView.createInstance = function () {
        return (fairygui.UIPackage.createObject("roomScene", "AutoHuntTipsView"));
    };
    FUIAutoHuntTipsView.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
        this.m_n6 = (this.getChildAt(0));
        this.m_n1 = (this.getChildAt(1));
        this.m_n2 = (this.getChildAt(2));
        this.m_cancelBtn = (this.getChildAt(3));
        this.m_enterBtn = (this.getChildAt(4));
        this.m_closeBtn = (this.getChildAt(5));
    };
    FUIAutoHuntTipsView.URL = "ui://0lwk28v8adx676t";
    return FUIAutoHuntTipsView;
}(fairygui.GComponent));
exports.default = FUIAutoHuntTipsView;
},{}],118:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FUIAutoHuntingView = /** @class */ (function (_super) {
    __extends(FUIAutoHuntingView, _super);
    function FUIAutoHuntingView() {
        return _super.call(this) || this;
    }
    FUIAutoHuntingView.createInstance = function () {
        return (fairygui.UIPackage.createObject("roomScene", "AutoHuntingView"));
    };
    FUIAutoHuntingView.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
        this.m_c1 = this.getControllerAt(0);
        this.m_panel = (this.getChildAt(0));
        this.m_n2 = (this.getChildAt(1));
        this.m_n22 = (this.getChildAt(2));
        this.m_n4 = (this.getChildAt(3));
        this.m_fishList = (this.getChildAt(4));
        this.m_loadConfigBtn = (this.getChildAt(5));
        this.m_selectAllBtn = (this.getChildAt(6));
        this.m_reselectBtn = (this.getChildAt(7));
        this.m_startHuntBtn = (this.getChildAt(8));
        this.m_configView = (this.getChildAt(9));
        this.m_n13 = (this.getChildAt(10));
        this.m_changeAutoBtn = (this.getChildAt(11));
        this.m_cancelAutoBtn = (this.getChildAt(12));
        this.m_huntingList = (this.getChildAt(13));
        this.m_huntingView = (this.getChildAt(14));
        this.m_closeBtn = (this.getChildAt(15));
    };
    FUIAutoHuntingView.URL = "ui://0lwk28v8d7af722";
    return FUIAutoHuntingView;
}(fairygui.GComponent));
exports.default = FUIAutoHuntingView;
},{}],119:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FUIBackgroundView = /** @class */ (function (_super) {
    __extends(FUIBackgroundView, _super);
    function FUIBackgroundView() {
        return _super.call(this) || this;
    }
    FUIBackgroundView.createInstance = function () {
        return (fairygui.UIPackage.createObject("roomScene", "BackgroundView"));
    };
    FUIBackgroundView.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
        this.m_bg1_1 = (this.getChildAt(0));
        this.m_bg2_1 = (this.getChildAt(1));
        this.m_waveAniView = (this.getChildAt(2));
        this.m_bg1_2 = (this.getChildAt(3));
        this.m_bg2_2 = (this.getChildAt(4));
        this.m_t0 = this.getTransitionAt(0);
        this.m_t1 = this.getTransitionAt(1);
    };
    FUIBackgroundView.URL = "ui://0lwk28v89lp39";
    return FUIBackgroundView;
}(fairygui.GComponent));
exports.default = FUIBackgroundView;
},{}],120:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FUIBatteryView = /** @class */ (function (_super) {
    __extends(FUIBatteryView, _super);
    function FUIBatteryView() {
        return _super.call(this) || this;
    }
    FUIBatteryView.createInstance = function () {
        return (fairygui.UIPackage.createObject("roomScene", "BatteryView"));
    };
    FUIBatteryView.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
        this.m_c2 = this.getControllerAt(0);
        this.m_c1 = this.getControllerAt(1);
        this.m_c3 = this.getControllerAt(2);
        this.m_gunView = (this.getChildAt(0));
        this.m_infoView = (this.getChildAt(1));
        this.m_goldList = (this.getChildAt(2));
        this.m_n11 = (this.getChildAt(3));
        this.m_n12 = (this.getChildAt(4));
    };
    FUIBatteryView.URL = "ui://0lwk28v89lp3h";
    return FUIBatteryView;
}(fairygui.GComponent));
exports.default = FUIBatteryView;
},{}],121:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FUIBullet = /** @class */ (function (_super) {
    __extends(FUIBullet, _super);
    function FUIBullet() {
        return _super.call(this) || this;
    }
    FUIBullet.createInstance = function () {
        return (fairygui.UIPackage.createObject("roomScene", "Bullet"));
    };
    FUIBullet.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
        this.m_bulletLoader = (this.getChildAt(0));
    };
    FUIBullet.URL = "ui://0lwk28v89lp3e";
    return FUIBullet;
}(fairygui.GComponent));
exports.default = FUIBullet;
},{}],122:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FUIBulletView = /** @class */ (function (_super) {
    __extends(FUIBulletView, _super);
    function FUIBulletView() {
        return _super.call(this) || this;
    }
    FUIBulletView.createInstance = function () {
        return (fairygui.UIPackage.createObject("roomScene", "BulletView"));
    };
    FUIBulletView.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
        this.m_c1 = this.getControllerAt(0);
        this.m_attackModelControl = this.getControllerAt(1);
        this.m_player1 = (this.getChildAt(0));
        this.m_player2 = (this.getChildAt(1));
        this.m_player3 = (this.getChildAt(2));
        this.m_player4 = (this.getChildAt(3));
        this.m_lockBtn = (this.getChildAt(4));
        this.m_autoFireBtn = (this.getChildAt(5));
        this.m_lockTipLoader = (this.getChildAt(6));
        this.m_autoTipLoader = (this.getChildAt(7));
        this.m_goldPosition = (this.getChildAt(8));
        this.m_attackModelAniView = (this.getChildAt(9));
    };
    FUIBulletView.URL = "ui://0lwk28v89lp3g";
    return FUIBulletView;
}(fairygui.GComponent));
exports.default = FUIBulletView;
},{}],123:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FUIContentView = /** @class */ (function (_super) {
    __extends(FUIContentView, _super);
    function FUIContentView() {
        return _super.call(this) || this;
    }
    FUIContentView.createInstance = function () {
        return (fairygui.UIPackage.createObject("roomScene", "ContentView"));
    };
    FUIContentView.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
        this.m_fishView = (this.getChildAt(0));
        this.m_bulletView = (this.getChildAt(1));
        this.m_tipsView = (this.getChildAt(2));
    };
    FUIContentView.URL = "ui://0lwk28v8n86c78k";
    return FUIContentView;
}(fairygui.GComponent));
exports.default = FUIContentView;
},{}],124:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FUIFishContent = /** @class */ (function (_super) {
    __extends(FUIFishContent, _super);
    function FUIFishContent() {
        return _super.call(this) || this;
    }
    FUIFishContent.createInstance = function () {
        return (fairygui.UIPackage.createObject("roomScene", "FishContent"));
    };
    FUIFishContent.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
        this.m_n0 = (this.getChildAt(0));
        this.m_fullScreenFrozenAniLoader = (this.getChildAt(1));
        this.m_fullScreenBoomAniLoader = (this.getChildAt(2));
        this.m_fullScreenGoldAniView = (this.getChildAt(3));
    };
    FUIFishContent.URL = "ui://0lwk28v89lp3a";
    return FUIFishContent;
}(fairygui.GComponent));
exports.default = FUIFishContent;
},{}],125:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FUIFishDeadTipsView = /** @class */ (function (_super) {
    __extends(FUIFishDeadTipsView, _super);
    function FUIFishDeadTipsView() {
        return _super.call(this) || this;
    }
    FUIFishDeadTipsView.createInstance = function () {
        return (fairygui.UIPackage.createObject("roomScene", "FishDeadTipsView"));
    };
    FUIFishDeadTipsView.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
        this.m_content = (this.getChildAt(0));
        this.m_t0 = this.getTransitionAt(0);
    };
    FUIFishDeadTipsView.URL = "ui://0lwk28v8nyu9791";
    return FUIFishDeadTipsView;
}(fairygui.GComponent));
exports.default = FUIFishDeadTipsView;
},{}],126:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FUIFourFish = /** @class */ (function (_super) {
    __extends(FUIFourFish, _super);
    function FUIFourFish() {
        return _super.call(this) || this;
    }
    FUIFourFish.createInstance = function () {
        return (fairygui.UIPackage.createObject("roomScene", "FourFish"));
    };
    FUIFourFish.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
        this.m_buffLoader = (this.getChildAt(0));
        this.m_n13 = (this.getChildAt(1));
        this.m_fishLoader = (this.getChildAt(2));
        this.m_aimSignLoader = (this.getChildAt(3));
        this.m_fourFish1Loader = (this.getChildAt(4));
        this.m_fourFish2Loader = (this.getChildAt(5));
        this.m_fourFish3Loader = (this.getChildAt(6));
        this.m_fourFish4Loader = (this.getChildAt(7));
    };
    FUIFourFish.URL = "ui://0lwk28v8n86c77f";
    return FUIFourFish;
}(fairygui.GComponent));
exports.default = FUIFourFish;
},{}],127:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FUIFullScreenGoldAniView = /** @class */ (function (_super) {
    __extends(FUIFullScreenGoldAniView, _super);
    function FUIFullScreenGoldAniView() {
        return _super.call(this) || this;
    }
    FUIFullScreenGoldAniView.createInstance = function () {
        return (fairygui.UIPackage.createObject("roomScene", "FullScreenGoldAniView"));
    };
    FUIFullScreenGoldAniView.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
        this.m_n4 = (this.getChildAt(0));
    };
    FUIFullScreenGoldAniView.URL = "ui://0lwk28v8uhyn799";
    return FUIFullScreenGoldAniView;
}(fairygui.GComponent));
exports.default = FUIFullScreenGoldAniView;
},{}],128:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FUIGoldListItemView = /** @class */ (function (_super) {
    __extends(FUIGoldListItemView, _super);
    function FUIGoldListItemView() {
        return _super.call(this) || this;
    }
    FUIGoldListItemView.createInstance = function () {
        return (fairygui.UIPackage.createObject("roomScene", "GoldListItemView"));
    };
    FUIGoldListItemView.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
        this.m_bottmCoin = (this.getChildAt(0));
        this.m_coinTxt = (this.getChildAt(1));
    };
    FUIGoldListItemView.URL = "ui://0lwk28v8uhyn79k";
    return FUIGoldListItemView;
}(fairygui.GComponent));
exports.default = FUIGoldListItemView;
},{}],129:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FUIGuideView = /** @class */ (function (_super) {
    __extends(FUIGuideView, _super);
    function FUIGuideView() {
        return _super.call(this) || this;
    }
    FUIGuideView.createInstance = function () {
        return (fairygui.UIPackage.createObject("roomScene", "GuideView"));
    };
    FUIGuideView.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
        this.m_n0 = (this.getChildAt(0));
    };
    FUIGuideView.URL = "ui://0lwk28v8vmmd76n";
    return FUIGuideView;
}(fairygui.GComponent));
exports.default = FUIGuideView;
},{}],130:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FUILoopBackgroundView_1 = /** @class */ (function (_super) {
    __extends(FUILoopBackgroundView_1, _super);
    function FUILoopBackgroundView_1() {
        return _super.call(this) || this;
    }
    FUILoopBackgroundView_1.createInstance = function () {
        return (fairygui.UIPackage.createObject("roomScene", "LoopBackgroundView_1"));
    };
    FUILoopBackgroundView_1.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
        this.m_bg1 = (this.getChildAt(0));
        this.m_bg2 = (this.getChildAt(1));
        this.m_n10 = (this.getChildAt(2));
        this.m_n11 = (this.getChildAt(3));
        this.m_n14 = (this.getChildAt(4));
        this.m_n15 = (this.getChildAt(5));
    };
    FUILoopBackgroundView_1.URL = "ui://0lwk28v8mnwy73s";
    return FUILoopBackgroundView_1;
}(fairygui.GComponent));
exports.default = FUILoopBackgroundView_1;
},{}],131:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FUILoopBackgroundView_2 = /** @class */ (function (_super) {
    __extends(FUILoopBackgroundView_2, _super);
    function FUILoopBackgroundView_2() {
        return _super.call(this) || this;
    }
    FUILoopBackgroundView_2.createInstance = function () {
        return (fairygui.UIPackage.createObject("roomScene", "LoopBackgroundView_2"));
    };
    FUILoopBackgroundView_2.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
        this.m_n14 = (this.getChildAt(0));
        this.m_n15 = (this.getChildAt(1));
        this.m_n16 = (this.getChildAt(2));
        this.m_n17 = (this.getChildAt(3));
        this.m_n18 = (this.getChildAt(4));
    };
    FUILoopBackgroundView_2.URL = "ui://0lwk28v8uhyn798";
    return FUILoopBackgroundView_2;
}(fairygui.GComponent));
exports.default = FUILoopBackgroundView_2;
},{}],132:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FUINormalFish = /** @class */ (function (_super) {
    __extends(FUINormalFish, _super);
    function FUINormalFish() {
        return _super.call(this) || this;
    }
    FUINormalFish.createInstance = function () {
        return (fairygui.UIPackage.createObject("roomScene", "NormalFish"));
    };
    FUINormalFish.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
        this.m_buffLoader = (this.getChildAt(0));
        this.m_fishLoader = (this.getChildAt(1));
        this.m_specalAniLoader = (this.getChildAt(2));
        this.m_aimSignLoader = (this.getChildAt(3));
    };
    FUINormalFish.URL = "ui://0lwk28v89lp30";
    return FUINormalFish;
}(fairygui.GComponent));
exports.default = FUINormalFish;
},{}],133:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FUIPlayerGunView = /** @class */ (function (_super) {
    __extends(FUIPlayerGunView, _super);
    function FUIPlayerGunView() {
        return _super.call(this) || this;
    }
    FUIPlayerGunView.createInstance = function () {
        return (fairygui.UIPackage.createObject("roomScene", "PlayerGunView"));
    };
    FUIPlayerGunView.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
        this.m_c1 = this.getControllerAt(0);
        this.m_batteryLoader = (this.getChildAt(0));
        this.m_batteryLvAddBtn = (this.getChildAt(1));
        this.m_batteryLvSubBtn = (this.getChildAt(2));
        this.m_gun = (this.getChildAt(3));
        this.m_n15 = (this.getChildAt(4));
        this.m_gunLvTxt = (this.getChildAt(5));
    };
    FUIPlayerGunView.URL = "ui://0lwk28v8mnwy738";
    return FUIPlayerGunView;
}(fairygui.GComponent));
exports.default = FUIPlayerGunView;
},{}],134:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FUIPlayerInfoView = /** @class */ (function (_super) {
    __extends(FUIPlayerInfoView, _super);
    function FUIPlayerInfoView() {
        return _super.call(this) || this;
    }
    FUIPlayerInfoView.createInstance = function () {
        return (fairygui.UIPackage.createObject("roomScene", "PlayerInfoView"));
    };
    FUIPlayerInfoView.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
        this.m_c1 = this.getControllerAt(0);
        this.m_n11 = (this.getChildAt(0));
        this.m_n14 = (this.getChildAt(1));
        this.m_coinTxt = (this.getChildAt(2));
        this.m_nameTxt = (this.getChildAt(3));
    };
    FUIPlayerInfoView.URL = "ui://0lwk28v8glv2x";
    return FUIPlayerInfoView;
}(fairygui.GComponent));
exports.default = FUIPlayerInfoView;
},{}],135:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FUIRoomTipsView = /** @class */ (function (_super) {
    __extends(FUIRoomTipsView, _super);
    function FUIRoomTipsView() {
        return _super.call(this) || this;
    }
    FUIRoomTipsView.createInstance = function () {
        return (fairygui.UIPackage.createObject("roomScene", "RoomTipsView"));
    };
    FUIRoomTipsView.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
        this.m_n1 = (this.getChildAt(0));
        this.m_menuView = (this.getChildAt(1));
        this.m_tipsView = (this.getChildAt(2));
        this.m_t0 = this.getTransitionAt(0);
    };
    FUIRoomTipsView.URL = "ui://0lwk28v8glv2o";
    return FUIRoomTipsView;
}(fairygui.GComponent));
exports.default = FUIRoomTipsView;
},{}],136:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FUIRoomView = /** @class */ (function (_super) {
    __extends(FUIRoomView, _super);
    function FUIRoomView() {
        return _super.call(this) || this;
    }
    FUIRoomView.createInstance = function () {
        return (fairygui.UIPackage.createObject("roomScene", "RoomView"));
    };
    FUIRoomView.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
        this.m_bg = (this.getChildAt(0));
        this.m_content = (this.getChildAt(1));
    };
    FUIRoomView.URL = "ui://0lwk28v89lp38";
    return FUIRoomView;
}(fairygui.GComponent));
exports.default = FUIRoomView;
},{}],137:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FUIShowGoldListView = /** @class */ (function (_super) {
    __extends(FUIShowGoldListView, _super);
    function FUIShowGoldListView() {
        return _super.call(this) || this;
    }
    FUIShowGoldListView.createInstance = function () {
        return (fairygui.UIPackage.createObject("roomScene", "ShowGoldListView"));
    };
    FUIShowGoldListView.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
        this.m_n17 = (this.getChildAt(0));
    };
    FUIShowGoldListView.URL = "ui://0lwk28v8uhyn79l";
    return FUIShowGoldListView;
}(fairygui.GComponent));
exports.default = FUIShowGoldListView;
},{}],138:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FUITipsView = /** @class */ (function (_super) {
    __extends(FUITipsView, _super);
    function FUITipsView() {
        return _super.call(this) || this;
    }
    FUITipsView.createInstance = function () {
        return (fairygui.UIPackage.createObject("roomScene", "TipsView"));
    };
    FUITipsView.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
        this.m_tipsLoader = (this.getChildAt(0));
        this.m_t0 = this.getTransitionAt(0);
    };
    FUITipsView.URL = "ui://0lwk28v8tb5z79p";
    return FUITipsView;
}(fairygui.GComponent));
exports.default = FUITipsView;
},{}],139:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FUITriStarFish = /** @class */ (function (_super) {
    __extends(FUITriStarFish, _super);
    function FUITriStarFish() {
        return _super.call(this) || this;
    }
    FUITriStarFish.createInstance = function () {
        return (fairygui.UIPackage.createObject("roomScene", "TriStarFish"));
    };
    FUITriStarFish.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
        this.m_buffLoader = (this.getChildAt(0));
        this.m_n7 = (this.getChildAt(1));
        this.m_fishLoader = (this.getChildAt(2));
        this.m_aimSignLoader = (this.getChildAt(3));
        this.m_triStarFish1Loader = (this.getChildAt(4));
        this.m_triStarFish2Loader = (this.getChildAt(5));
        this.m_triStarFish3Loader = (this.getChildAt(6));
    };
    FUITriStarFish.URL = "ui://0lwk28v8n86c77e";
    return FUITriStarFish;
}(fairygui.GComponent));
exports.default = FUITriStarFish;
},{}],140:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FUIautoHuntSelectBtn = /** @class */ (function (_super) {
    __extends(FUIautoHuntSelectBtn, _super);
    function FUIautoHuntSelectBtn() {
        return _super.call(this) || this;
    }
    FUIautoHuntSelectBtn.createInstance = function () {
        return (fairygui.UIPackage.createObject("roomScene", "autoHuntSelectBtn"));
    };
    FUIautoHuntSelectBtn.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
        this.m_button = this.getControllerAt(0);
        this.m_icon = (this.getChildAt(0));
    };
    FUIautoHuntSelectBtn.URL = "ui://0lwk28v8adx676y";
    return FUIautoHuntSelectBtn;
}(fairygui.GButton));
exports.default = FUIautoHuntSelectBtn;
},{}],141:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FUIbatteryLvBtn = /** @class */ (function (_super) {
    __extends(FUIbatteryLvBtn, _super);
    function FUIbatteryLvBtn() {
        return _super.call(this) || this;
    }
    FUIbatteryLvBtn.createInstance = function () {
        return (fairygui.UIPackage.createObject("roomScene", "batteryLvBtn"));
    };
    FUIbatteryLvBtn.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
        this.m_button = this.getControllerAt(0);
        this.m_icon = (this.getChildAt(0));
    };
    FUIbatteryLvBtn.URL = "ui://0lwk28v8glv2w";
    return FUIbatteryLvBtn;
}(fairygui.GButton));
exports.default = FUIbatteryLvBtn;
},{}],142:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FUIcatchAllLineView = /** @class */ (function (_super) {
    __extends(FUIcatchAllLineView, _super);
    function FUIcatchAllLineView() {
        return _super.call(this) || this;
    }
    FUIcatchAllLineView.createInstance = function () {
        return (fairygui.UIPackage.createObject("roomScene", "catchAllLineView"));
    };
    FUIcatchAllLineView.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
        this.m_n1 = (this.getChildAt(0));
        this.m_n2 = (this.getChildAt(1));
        this.m_n3 = (this.getChildAt(2));
        this.m_n4 = (this.getChildAt(3));
        this.m_n5 = (this.getChildAt(4));
        this.m_n6 = (this.getChildAt(5));
        this.m_n7 = (this.getChildAt(6));
    };
    FUIcatchAllLineView.URL = "ui://0lwk28v8n86c78i";
    return FUIcatchAllLineView;
}(fairygui.GComponent));
exports.default = FUIcatchAllLineView;
},{}],143:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FUIchangeConfigBtn = /** @class */ (function (_super) {
    __extends(FUIchangeConfigBtn, _super);
    function FUIchangeConfigBtn() {
        return _super.call(this) || this;
    }
    FUIchangeConfigBtn.createInstance = function () {
        return (fairygui.UIPackage.createObject("roomScene", "changeConfigBtn"));
    };
    FUIchangeConfigBtn.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
        this.m_button = this.getControllerAt(0);
        this.m_icon = (this.getChildAt(0));
    };
    FUIchangeConfigBtn.URL = "ui://0lwk28v8d7af72i";
    return FUIchangeConfigBtn;
}(fairygui.GButton));
exports.default = FUIchangeConfigBtn;
},{}],144:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FUIcloseBtn = /** @class */ (function (_super) {
    __extends(FUIcloseBtn, _super);
    function FUIcloseBtn() {
        return _super.call(this) || this;
    }
    FUIcloseBtn.createInstance = function () {
        return (fairygui.UIPackage.createObject("roomScene", "closeBtn"));
    };
    FUIcloseBtn.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
        this.m_button = this.getControllerAt(0);
        this.m_icon = (this.getChildAt(0));
    };
    FUIcloseBtn.URL = "ui://0lwk28v8n8sw74m";
    return FUIcloseBtn;
}(fairygui.GButton));
exports.default = FUIcloseBtn;
},{}],145:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FUIcontent = /** @class */ (function (_super) {
    __extends(FUIcontent, _super);
    function FUIcontent() {
        return _super.call(this) || this;
    }
    FUIcontent.createInstance = function () {
        return (fairygui.UIPackage.createObject("roomScene", "content"));
    };
    FUIcontent.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
        this.m_c1 = this.getControllerAt(0);
        this.m_bgLoader = (this.getChildAt(0));
        this.m_fishLoader = (this.getChildAt(1));
        this.m_coinBgLoader = (this.getChildAt(2));
        this.m_coinTxt = (this.getChildAt(3));
    };
    FUIcontent.URL = "ui://0lwk28v8nyu978q";
    return FUIcontent;
}(fairygui.GComponent));
exports.default = FUIcontent;
},{}],146:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FUIgun = /** @class */ (function (_super) {
    __extends(FUIgun, _super);
    function FUIgun() {
        return _super.call(this) || this;
    }
    FUIgun.createInstance = function () {
        return (fairygui.UIPackage.createObject("roomScene", "gun"));
    };
    FUIgun.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
        this.m_c1 = this.getControllerAt(0);
        this.m_gunLoader = (this.getChildAt(0));
        this.m_lightAniLoader = (this.getChildAt(1));
    };
    FUIgun.URL = "ui://0lwk28v8n86c77j";
    return FUIgun;
}(fairygui.GComponent));
exports.default = FUIgun;
},{}],147:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FUIhuntingFishItem = /** @class */ (function (_super) {
    __extends(FUIhuntingFishItem, _super);
    function FUIhuntingFishItem() {
        return _super.call(this) || this;
    }
    FUIhuntingFishItem.createInstance = function () {
        return (fairygui.UIPackage.createObject("roomScene", "huntingFishItem"));
    };
    FUIhuntingFishItem.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
        this.m_n0 = (this.getChildAt(0));
        this.m_fishLoader = (this.getChildAt(1));
        this.m_n2 = (this.getChildAt(2));
        this.m_n3 = (this.getChildAt(3));
        this.m_n4 = (this.getChildAt(4));
        this.m_countTxt = (this.getChildAt(5));
        this.m_pricesTxt = (this.getChildAt(6));
        this.m_totalWinTxt = (this.getChildAt(7));
        this.m_nameLoader = (this.getChildAt(8));
    };
    FUIhuntingFishItem.URL = "ui://0lwk28v8rzeh72j";
    return FUIhuntingFishItem;
}(fairygui.GComponent));
exports.default = FUIhuntingFishItem;
},{}],148:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FUIloadConfigBtn = /** @class */ (function (_super) {
    __extends(FUIloadConfigBtn, _super);
    function FUIloadConfigBtn() {
        return _super.call(this) || this;
    }
    FUIloadConfigBtn.createInstance = function () {
        return (fairygui.UIPackage.createObject("roomScene", "loadConfigBtn"));
    };
    FUIloadConfigBtn.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
        this.m_button = this.getControllerAt(0);
        this.m_icon = (this.getChildAt(0));
    };
    FUIloadConfigBtn.URL = "ui://0lwk28v8d7af72c";
    return FUIloadConfigBtn;
}(fairygui.GButton));
exports.default = FUIloadConfigBtn;
},{}],149:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FUIlockBtn = /** @class */ (function (_super) {
    __extends(FUIlockBtn, _super);
    function FUIlockBtn() {
        return _super.call(this) || this;
    }
    FUIlockBtn.createInstance = function () {
        return (fairygui.UIPackage.createObject("roomScene", "lockBtn"));
    };
    FUIlockBtn.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
        this.m_button = this.getControllerAt(0);
        this.m_icon = (this.getChildAt(0));
    };
    FUIlockBtn.URL = "ui://0lwk28v8kz7e11";
    return FUIlockBtn;
}(fairygui.GButton));
exports.default = FUIlockBtn;
},{}],150:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FUImenuBtn = /** @class */ (function (_super) {
    __extends(FUImenuBtn, _super);
    function FUImenuBtn() {
        return _super.call(this) || this;
    }
    FUImenuBtn.createInstance = function () {
        return (fairygui.UIPackage.createObject("roomScene", "menuBtn"));
    };
    FUImenuBtn.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
        this.m_button = this.getControllerAt(0);
        this.m_icon = (this.getChildAt(0));
    };
    FUImenuBtn.URL = "ui://0lwk28v8poad73z";
    return FUImenuBtn;
}(fairygui.GButton));
exports.default = FUImenuBtn;
},{}],151:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FUImenuBtnListView = /** @class */ (function (_super) {
    __extends(FUImenuBtnListView, _super);
    function FUImenuBtnListView() {
        return _super.call(this) || this;
    }
    FUImenuBtnListView.createInstance = function () {
        return (fairygui.UIPackage.createObject("roomScene", "menuBtnListView"));
    };
    FUImenuBtnListView.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
        this.m_bg = (this.getChildAt(0));
        this.m_menuBtnList = (this.getChildAt(1));
    };
    FUImenuBtnListView.URL = "ui://0lwk28v8poad743";
    return FUImenuBtnListView;
}(fairygui.GComponent));
exports.default = FUImenuBtnListView;
},{}],152:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FUImenuView = /** @class */ (function (_super) {
    __extends(FUImenuView, _super);
    function FUImenuView() {
        return _super.call(this) || this;
    }
    FUImenuView.createInstance = function () {
        return (fairygui.UIPackage.createObject("roomScene", "menuView"));
    };
    FUImenuView.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
        this.m_c1 = this.getControllerAt(0);
        this.m_menuBtn = (this.getChildAt(0));
        this.m_menuBtnListView = (this.getChildAt(1));
        this.m_expand = this.getTransitionAt(0);
        this.m_takeBack = this.getTransitionAt(1);
    };
    FUImenuView.URL = "ui://0lwk28v8poad741";
    return FUImenuView;
}(fairygui.GComponent));
exports.default = FUImenuView;
},{}],153:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FUInet = /** @class */ (function (_super) {
    __extends(FUInet, _super);
    function FUInet() {
        return _super.call(this) || this;
    }
    FUInet.createInstance = function () {
        return (fairygui.UIPackage.createObject("roomScene", "net"));
    };
    FUInet.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
        this.m_n0 = (this.getChildAt(0));
        this.m_n1 = (this.getChildAt(1));
        this.m_t0 = this.getTransitionAt(0);
    };
    FUInet.URL = "ui://0lwk28v8cyonl";
    return FUInet;
}(fairygui.GComponent));
exports.default = FUInet;
},{}],154:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FUIselectBtn = /** @class */ (function (_super) {
    __extends(FUIselectBtn, _super);
    function FUIselectBtn() {
        return _super.call(this) || this;
    }
    FUIselectBtn.createInstance = function () {
        return (fairygui.UIPackage.createObject("roomScene", "selectBtn"));
    };
    FUIselectBtn.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
        this.m_button = this.getControllerAt(0);
        this.m_icon = (this.getChildAt(0));
    };
    FUIselectBtn.URL = "ui://0lwk28v8n8sw75x";
    return FUIselectBtn;
}(fairygui.GButton));
exports.default = FUIselectBtn;
},{}],155:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FUIsettingBtn = /** @class */ (function (_super) {
    __extends(FUIsettingBtn, _super);
    function FUIsettingBtn() {
        return _super.call(this) || this;
    }
    FUIsettingBtn.createInstance = function () {
        return (fairygui.UIPackage.createObject("roomScene", "settingBtn"));
    };
    FUIsettingBtn.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
        this.m_button = this.getControllerAt(0);
        this.m_n1 = (this.getChildAt(0));
        this.m_icon = (this.getChildAt(1));
    };
    FUIsettingBtn.URL = "ui://0lwk28v8poad742";
    return FUIsettingBtn;
}(fairygui.GButton));
exports.default = FUIsettingBtn;
},{}],156:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FUIunLockBtn = /** @class */ (function (_super) {
    __extends(FUIunLockBtn, _super);
    function FUIunLockBtn() {
        return _super.call(this) || this;
    }
    FUIunLockBtn.createInstance = function () {
        return (fairygui.UIPackage.createObject("roomScene", "unLockBtn"));
    };
    FUIunLockBtn.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
        this.m_button = this.getControllerAt(0);
        this.m_icon = (this.getChildAt(0));
    };
    FUIunLockBtn.URL = "ui://0lwk28v8kz7e13";
    return FUIunLockBtn;
}(fairygui.GButton));
exports.default = FUIunLockBtn;
},{}],157:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FUIwaveAniView = /** @class */ (function (_super) {
    __extends(FUIwaveAniView, _super);
    function FUIwaveAniView() {
        return _super.call(this) || this;
    }
    FUIwaveAniView.createInstance = function () {
        return (fairygui.UIPackage.createObject("roomScene", "waveAniView"));
    };
    FUIwaveAniView.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
        this.m_n0 = (this.getChildAt(0));
    };
    FUIwaveAniView.URL = "ui://0lwk28v8uhyn797";
    return FUIwaveAniView;
}(fairygui.GComponent));
exports.default = FUIwaveAniView;
},{}],158:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FUIwinGoldNumView = /** @class */ (function (_super) {
    __extends(FUIwinGoldNumView, _super);
    function FUIwinGoldNumView() {
        return _super.call(this) || this;
    }
    FUIwinGoldNumView.createInstance = function () {
        return (fairygui.UIPackage.createObject("roomScene", "winGoldNumView"));
    };
    FUIwinGoldNumView.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
        this.m_winGoldTxt = (this.getChildAt(0));
        this.m_t0 = this.getTransitionAt(0);
        this.m_t1 = this.getTransitionAt(1);
    };
    FUIwinGoldNumView.URL = "ui://0lwk28v8n86c78d";
    return FUIwinGoldNumView;
}(fairygui.GComponent));
exports.default = FUIwinGoldNumView;
},{}],159:[function(require,module,exports){
"use strict";
/** This is an automatically generated class by FairyGUI. Please do not modify it. **/
Object.defineProperty(exports, "__esModule", { value: true });
var FUINormalFish_1 = require("./FUINormalFish");
var FUIRoomView_1 = require("./FUIRoomView");
var FUIBackgroundView_1 = require("./FUIBackgroundView");
var FUIFishContent_1 = require("./FUIFishContent");
var FUIBullet_1 = require("./FUIBullet");
var FUIBulletView_1 = require("./FUIBulletView");
var FUIBatteryView_1 = require("./FUIBatteryView");
var FUIAutoHuntTipsView_1 = require("./FUIAutoHuntTipsView");
var FUIautoHuntSelectBtn_1 = require("./FUIautoHuntSelectBtn");
var FUInet_1 = require("./FUInet");
var FUIAutoHuntingView_1 = require("./FUIAutoHuntingView");
var FUIAutoFireFishItem_1 = require("./FUIAutoFireFishItem");
var FUIloadConfigBtn_1 = require("./FUIloadConfigBtn");
var FUIchangeConfigBtn_1 = require("./FUIchangeConfigBtn");
var FUIRoomTipsView_1 = require("./FUIRoomTipsView");
var FUIbatteryLvBtn_1 = require("./FUIbatteryLvBtn");
var FUIPlayerInfoView_1 = require("./FUIPlayerInfoView");
var FUIlockBtn_1 = require("./FUIlockBtn");
var FUIunLockBtn_1 = require("./FUIunLockBtn");
var FUIPlayerGunView_1 = require("./FUIPlayerGunView");
var FUILoopBackgroundView_1_1 = require("./FUILoopBackgroundView_1");
var FUITriStarFish_1 = require("./FUITriStarFish");
var FUIFourFish_1 = require("./FUIFourFish");
var FUIgun_1 = require("./FUIgun");
var FUIwinGoldNumView_1 = require("./FUIwinGoldNumView");
var FUIcatchAllLineView_1 = require("./FUIcatchAllLineView");
var FUIContentView_1 = require("./FUIContentView");
var FUIcloseBtn_1 = require("./FUIcloseBtn");
var FUIselectBtn_1 = require("./FUIselectBtn");
var FUIcontent_1 = require("./FUIcontent");
var FUIFishDeadTipsView_1 = require("./FUIFishDeadTipsView");
var FUImenuBtn_1 = require("./FUImenuBtn");
var FUImenuView_1 = require("./FUImenuView");
var FUIsettingBtn_1 = require("./FUIsettingBtn");
var FUImenuBtnListView_1 = require("./FUImenuBtnListView");
var FUIAimLineView_1 = require("./FUIAimLineView");
var FUIhuntingFishItem_1 = require("./FUIhuntingFishItem");
var FUITipsView_1 = require("./FUITipsView");
var FUIwaveAniView_1 = require("./FUIwaveAniView");
var FUILoopBackgroundView_2_1 = require("./FUILoopBackgroundView_2");
var FUIFullScreenGoldAniView_1 = require("./FUIFullScreenGoldAniView");
var FUIGoldListItemView_1 = require("./FUIGoldListItemView");
var FUIShowGoldListView_1 = require("./FUIShowGoldListView");
var FUIGuideView_1 = require("./FUIGuideView");
var roomSceneBinder = /** @class */ (function () {
    function roomSceneBinder() {
    }
    roomSceneBinder.bindAll = function () {
        fairygui.UIObjectFactory.setPackageItemExtension(FUINormalFish_1.default.URL, FUINormalFish_1.default);
        fairygui.UIObjectFactory.setPackageItemExtension(FUIRoomView_1.default.URL, FUIRoomView_1.default);
        fairygui.UIObjectFactory.setPackageItemExtension(FUIBackgroundView_1.default.URL, FUIBackgroundView_1.default);
        fairygui.UIObjectFactory.setPackageItemExtension(FUIFishContent_1.default.URL, FUIFishContent_1.default);
        fairygui.UIObjectFactory.setPackageItemExtension(FUIBullet_1.default.URL, FUIBullet_1.default);
        fairygui.UIObjectFactory.setPackageItemExtension(FUIBulletView_1.default.URL, FUIBulletView_1.default);
        fairygui.UIObjectFactory.setPackageItemExtension(FUIBatteryView_1.default.URL, FUIBatteryView_1.default);
        fairygui.UIObjectFactory.setPackageItemExtension(FUIAutoHuntTipsView_1.default.URL, FUIAutoHuntTipsView_1.default);
        fairygui.UIObjectFactory.setPackageItemExtension(FUIautoHuntSelectBtn_1.default.URL, FUIautoHuntSelectBtn_1.default);
        fairygui.UIObjectFactory.setPackageItemExtension(FUInet_1.default.URL, FUInet_1.default);
        fairygui.UIObjectFactory.setPackageItemExtension(FUIAutoHuntingView_1.default.URL, FUIAutoHuntingView_1.default);
        fairygui.UIObjectFactory.setPackageItemExtension(FUIAutoFireFishItem_1.default.URL, FUIAutoFireFishItem_1.default);
        fairygui.UIObjectFactory.setPackageItemExtension(FUIloadConfigBtn_1.default.URL, FUIloadConfigBtn_1.default);
        fairygui.UIObjectFactory.setPackageItemExtension(FUIchangeConfigBtn_1.default.URL, FUIchangeConfigBtn_1.default);
        fairygui.UIObjectFactory.setPackageItemExtension(FUIRoomTipsView_1.default.URL, FUIRoomTipsView_1.default);
        fairygui.UIObjectFactory.setPackageItemExtension(FUIbatteryLvBtn_1.default.URL, FUIbatteryLvBtn_1.default);
        fairygui.UIObjectFactory.setPackageItemExtension(FUIPlayerInfoView_1.default.URL, FUIPlayerInfoView_1.default);
        fairygui.UIObjectFactory.setPackageItemExtension(FUIlockBtn_1.default.URL, FUIlockBtn_1.default);
        fairygui.UIObjectFactory.setPackageItemExtension(FUIunLockBtn_1.default.URL, FUIunLockBtn_1.default);
        fairygui.UIObjectFactory.setPackageItemExtension(FUIPlayerGunView_1.default.URL, FUIPlayerGunView_1.default);
        fairygui.UIObjectFactory.setPackageItemExtension(FUILoopBackgroundView_1_1.default.URL, FUILoopBackgroundView_1_1.default);
        fairygui.UIObjectFactory.setPackageItemExtension(FUITriStarFish_1.default.URL, FUITriStarFish_1.default);
        fairygui.UIObjectFactory.setPackageItemExtension(FUIFourFish_1.default.URL, FUIFourFish_1.default);
        fairygui.UIObjectFactory.setPackageItemExtension(FUIgun_1.default.URL, FUIgun_1.default);
        fairygui.UIObjectFactory.setPackageItemExtension(FUIwinGoldNumView_1.default.URL, FUIwinGoldNumView_1.default);
        fairygui.UIObjectFactory.setPackageItemExtension(FUIcatchAllLineView_1.default.URL, FUIcatchAllLineView_1.default);
        fairygui.UIObjectFactory.setPackageItemExtension(FUIContentView_1.default.URL, FUIContentView_1.default);
        fairygui.UIObjectFactory.setPackageItemExtension(FUIcloseBtn_1.default.URL, FUIcloseBtn_1.default);
        fairygui.UIObjectFactory.setPackageItemExtension(FUIselectBtn_1.default.URL, FUIselectBtn_1.default);
        fairygui.UIObjectFactory.setPackageItemExtension(FUIcontent_1.default.URL, FUIcontent_1.default);
        fairygui.UIObjectFactory.setPackageItemExtension(FUIFishDeadTipsView_1.default.URL, FUIFishDeadTipsView_1.default);
        fairygui.UIObjectFactory.setPackageItemExtension(FUImenuBtn_1.default.URL, FUImenuBtn_1.default);
        fairygui.UIObjectFactory.setPackageItemExtension(FUImenuView_1.default.URL, FUImenuView_1.default);
        fairygui.UIObjectFactory.setPackageItemExtension(FUIsettingBtn_1.default.URL, FUIsettingBtn_1.default);
        fairygui.UIObjectFactory.setPackageItemExtension(FUImenuBtnListView_1.default.URL, FUImenuBtnListView_1.default);
        fairygui.UIObjectFactory.setPackageItemExtension(FUIAimLineView_1.default.URL, FUIAimLineView_1.default);
        fairygui.UIObjectFactory.setPackageItemExtension(FUIhuntingFishItem_1.default.URL, FUIhuntingFishItem_1.default);
        fairygui.UIObjectFactory.setPackageItemExtension(FUITipsView_1.default.URL, FUITipsView_1.default);
        fairygui.UIObjectFactory.setPackageItemExtension(FUIwaveAniView_1.default.URL, FUIwaveAniView_1.default);
        fairygui.UIObjectFactory.setPackageItemExtension(FUILoopBackgroundView_2_1.default.URL, FUILoopBackgroundView_2_1.default);
        fairygui.UIObjectFactory.setPackageItemExtension(FUIFullScreenGoldAniView_1.default.URL, FUIFullScreenGoldAniView_1.default);
        fairygui.UIObjectFactory.setPackageItemExtension(FUIGoldListItemView_1.default.URL, FUIGoldListItemView_1.default);
        fairygui.UIObjectFactory.setPackageItemExtension(FUIShowGoldListView_1.default.URL, FUIShowGoldListView_1.default);
        fairygui.UIObjectFactory.setPackageItemExtension(FUIGuideView_1.default.URL, FUIGuideView_1.default);
    };
    return roomSceneBinder;
}());
exports.default = roomSceneBinder;
},{"./FUIAimLineView":115,"./FUIAutoFireFishItem":116,"./FUIAutoHuntTipsView":117,"./FUIAutoHuntingView":118,"./FUIBackgroundView":119,"./FUIBatteryView":120,"./FUIBullet":121,"./FUIBulletView":122,"./FUIContentView":123,"./FUIFishContent":124,"./FUIFishDeadTipsView":125,"./FUIFourFish":126,"./FUIFullScreenGoldAniView":127,"./FUIGoldListItemView":128,"./FUIGuideView":129,"./FUILoopBackgroundView_1":130,"./FUILoopBackgroundView_2":131,"./FUINormalFish":132,"./FUIPlayerGunView":133,"./FUIPlayerInfoView":134,"./FUIRoomTipsView":135,"./FUIRoomView":136,"./FUIShowGoldListView":137,"./FUITipsView":138,"./FUITriStarFish":139,"./FUIautoHuntSelectBtn":140,"./FUIbatteryLvBtn":141,"./FUIcatchAllLineView":142,"./FUIchangeConfigBtn":143,"./FUIcloseBtn":144,"./FUIcontent":145,"./FUIgun":146,"./FUIhuntingFishItem":147,"./FUIloadConfigBtn":148,"./FUIlockBtn":149,"./FUImenuBtn":150,"./FUImenuBtnListView":151,"./FUImenuView":152,"./FUInet":153,"./FUIselectBtn":154,"./FUIsettingBtn":155,"./FUIunLockBtn":156,"./FUIwaveAniView":157,"./FUIwinGoldNumView":158}],160:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
* 连接服务
*/
var MyApplication_1 = require("../../MyApplication");
var MyApplication_2 = require("../../MyApplication");
var UIManager_1 = require("../../manager/UIManager");
var Utils_1 = require("../../utils/Utils");
var ServerListView_1 = require("../../moduleContexts/loginModule/views/ServerListView");
var GameEventNames = require("../../configs/GameEventNames");
var CommandCodes_1 = require("../../protocol/CommandCodes");
var FUIServerListView_1 = require("../../fui/loginUi/FUIServerListView");
var protocol = require("../../protocol/protocols/protocols");
var NetworkChannelNames_1 = require("../../definitions/NetworkChannelNames");
var ConnectService = /** @class */ (function (_super) {
    __extends(ConnectService, _super);
    function ConnectService() {
        var _this = _super.call(this) || this;
        _this._serverIp = null;
        _this._lobbyUrl = null;
        _this._roomInfo = null;
        _this._cardNum = null;
        _this._shareUrl = null;
        _this._shareText = null;
        _this._gameServerConnectedTimes = 0;
        _this._reconnectTimes = 1;
        _this._initiallizied = false;
        return _this;
    }
    ConnectService_1 = ConnectService;
    Object.defineProperty(ConnectService, "instance", {
        get: function () {
            return ConnectService_1.getRunningService(ConnectService_1.serviceName);
        },
        enumerable: true,
        configurable: true
    });
    /**
      * 服务启动时的回调
      * @param {ServerHandler} resultHandler 由服务启动者传递的一个回调句柄，当服务启动成功时，服务提供者应该以"true"参数回调，否则以"false"参数回调
      * @param {any[]} startupArgs 由服务启动者传递的一个回调句柄，当服务启动成功时，服务提供者应该以"true"参数回调，否则以"false"参数回调
      *
      * @example resultHandler.runWith([true]) 启动成功
      */
    ConnectService.prototype.onStart = function (resultHandler, startupArgs) {
        this.init();
        resultHandler.success();
    };
    /**
      * 停止服务时的回调
      * @param {ServerHandler} resultHandler 由服务启动者传递的一个回调句柄，当服务启动成功时，服务提供者应该以"true"参数回调，否则以"false"参数回调
      * @example resultHandler.runWith([true]) 服务停用成功
      */
    ConnectService.prototype.onStop = function (resultHandler) {
        resultHandler.success();
    };
    /**
      * 启动服务时的回调
      * @param {ServerHandler} resultHandler 由服务启动者传递的一个回调句柄，当服务重启成功时，服务提供者应该以"true"参数回调，否则以"false"参数回调
      * @example resultHandler.runWith([true]) 重启
      */
    ConnectService.prototype.onReStart = function (resultHandler) {
        resultHandler.success();
    };
    Object.defineProperty(ConnectService.prototype, "serverIP", {
        set: function (ip) {
            this._serverIp = ip;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConnectService.prototype, "serverPort", {
        set: function (port) {
            this._serverPort = port;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConnectService.prototype, "token", {
        /**
          * 帐号服务器下发的登陆凭证
          */
        get: function () {
            // let cfg:rigger.config.MyApplicationConfig = MyApplication.instance.getConfig<rigger.config.MyApplicationConfig>();
            // if (!this._token) return cfg.testToken;
            return this._token;
            // return "111111";
        },
        set: function (v) {
            this._token = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConnectService.prototype, "lobbyUrl", {
        /**
          * 大厅地址
          */
        get: function () {
            return this._lobbyUrl || null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConnectService.prototype, "roomInfo", {
        /**
          * 房间参数
          */
        get: function () {
            return this._roomInfo;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConnectService.prototype, "cardNum", {
        /**
          * 玩家自身房卡数量
          */
        get: function () {
            return this._cardNum || null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConnectService.prototype, "shareUrl", {
        /**
          * 分享链接(纯链接)
          */
        get: function () {
            return this.shareUrl || null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConnectService.prototype, "shareText", {
        /**
          * 分享链接(文字加链接)
          */
        get: function () {
            return this._shareText || null;
        },
        enumerable: true,
        configurable: true
    });
    ConnectService.prototype.init = function () {
        this._addEventListener();
        this._initServer();
    };
    ConnectService.prototype.dispose = function () {
        this._removeEventListener();
    };
    /**
      * 连接游戏服
      */
    ConnectService.prototype.connectGameServer = function () {
        if (this._serverIp) {
            MyApplication_1.default.instance.nowGameState = MyApplication_2.GameState.ConnectingGameServer;
            rigger.service.NetworkService.instance.connect(NetworkChannelNames_1.default.GameChannel, this._serverIp, this._serverPort);
            // NetworkManager.instance.connect(NetJZWL.SocketType.GameServer, this._serverIp, this._serverPort);
            // 伪造
            // this._onGameServerConnected(); 
        }
        else {
            UIManager_1.default.instance.showWindow(ServerListView_1.default, true, UIManager_1.default.instance.sceneLayer);
        }
    };
    /**
      * 登陆游戏服
      */
    ConnectService.prototype.loginGameServer = function () {
        var req = new protocol.LoginReq;
        console.log(req.toString());
        if (this.roomInfo != null) {
            if (this.roomInfo['ret'] == "false") {
                console.log(this.roomInfo['msg']);
                return;
            }
            else {
                MyApplication_1.default.instance.getConfig().gameId = this.roomInfo['data']['itemid'];
            }
        }
        req.gameId = MyApplication_1.default.instance.getConfig().gameId;
        // req.gameId = 0;			
        req.token = this.token;
        rigger.service.NetworkService.instance.send(NetworkChannelNames_1.default.GameChannel, CommandCodes_1.default.PPLoginReq, req);
        //  以上临时注释
        // 伪造数据
        // player_id:number;//玩家id
        // coin:number;//玩家拥有的金币数
        // type:number;//1是正式玩,2是免费
        // is_debug?:number;//0:正式版1:测试版
        // reason:number;//0:登录成功,1:先下线再登录,其他表示登录失败的原因
        // let resp = {};
        // resp["player_id"] = 1;
        // resp["coin"] = 10000;
        // let resp:protocol.LoginResp = new protocol.LoginResp();
        // resp.gameId = 2001,
        // resp.balance = 1000,
        // resp.type = 3,
        // EventManager.instance.dispatchEvent(CommandCodes.PPLoginResp, NetworkManager.instance, resp);
    };
    ConnectService.prototype._addEventListener = function () {
        var networkService = rigger.service.NetworkService.instance;
        var eventService = rigger.service.EventService.instance;
        rigger.service.NetworkService.instance.onConnect(NetworkChannelNames_1.default.GameChannel, this, this._onGameServerConnected);
        rigger.service.HeartBeatService.instance.onTimeOut(this, this._onSocketDisconnected, []);
        networkService.onClose(NetworkChannelNames_1.default.GameChannel, this, this._onSocketDisconnected);
        eventService.addEventListener(GameEventNames.EVENT_NECESSARY_ASSETS_LOADED, rigger.service.AssetsService.serviceName, this, this._onNecessaryAssetsLoaded);
        eventService.addEventListener(GameEventNames.EVENT_GAME_SOCKET_CLOSE, rigger.service.NetworkService.serviceName, this, this._onSocketDisconnected);
        eventService.addEventListener(GameEventNames.EVENT_GAME_SOCKET_CONNECTED, rigger.service.NetworkService.serviceName, this, this._onGameServerConnected);
    };
    ConnectService.prototype._removeEventListener = function () {
        var eventService = rigger.service.EventService.instance;
        rigger.service.HeartBeatService.instance.offTimeOut(this, this._onSocketDisconnected);
        rigger.service.NetworkService.instance.offConnect(NetworkChannelNames_1.default.GameChannel, this, this._onGameServerConnected);
        rigger.service.NetworkService.instance.offClose(NetworkChannelNames_1.default.GameChannel, this, this._onSocketDisconnected);
        eventService.removeEventListener(GameEventNames.EVENT_NECESSARY_ASSETS_LOADED, rigger.service.AssetsService.serviceName, this, this._onNecessaryAssetsLoaded);
        eventService.removeEventListener(GameEventNames.EVENT_GAME_SOCKET_CLOSE, rigger.service.NetworkService.serviceName, this, this._onSocketDisconnected);
        eventService.removeEventListener(GameEventNames.EVENT_GAME_SOCKET_CONNECTED, rigger.service.NetworkService.serviceName, this, this._onGameServerConnected);
    };
    ConnectService.prototype._initServer = function () {
        this._serverIp = this._getServerIp();
        this._serverPort = parseInt(this._getServerPort());
        this._token = this._getToken();
        this._lobbyUrl = this._getLobbyUrl();
        this._roomInfo = this._getRoomInfo();
        this._cardNum = this._getCardNum();
        this._shareUrl = this._getShareUrl();
        this._shareText = this._getShareText();
    };
    /**
      * 获取后台设置的IP
      */
    ConnectService.prototype._getServerIp = function () {
        // return this._getMetaValue("serverIp");
        // let str: string = "ws://";
        var ip = this._getMetaValue("serverIp");
        // if(ip) {
        // 	ip = (str.indexOf(ip) == -1) ? (`ws://${ip}`) : ip;
        // }
        return ip;
    };
    /**
      * 获取后台设置的服务器端口
      */
    ConnectService.prototype._getServerPort = function () {
        return this._getMetaValue("serverPort");
    };
    /**
      * 获取后台设置的token
      */
    ConnectService.prototype._getToken = function () {
        return this._getMetaValue("token");
    };
    /**
      * 获取后台设置的大厅地址
      */
    ConnectService.prototype._getLobbyUrl = function () {
        // return "http://www.baidu.com";
        return this._getMetaValue("lobbyUrl");
    };
    /**
      * 获取后台设置的房间参数
      */
    ConnectService.prototype._getRoomInfo = function () {
        if (this._getMetaValue("roomInfo") == null)
            return null;
        return eval("(" + this._getMetaValue("roomInfo") + ")");
        // return  eval(window.atob(this._getMetaValue("roomInfo")));
    };
    /**
      * 获取后台设置的玩家自身的房卡数量
      */
    ConnectService.prototype._getCardNum = function () {
        return this._getMetaValue("cardNum");
    };
    /**
      * 获取后台设置的分享链接(纯链接)
      */
    ConnectService.prototype._getShareUrl = function () {
        return this._getMetaValue("shareUrl");
    };
    /**
      * 获取后台设置的分享链接(文字加链接)
      */
    ConnectService.prototype._getShareText = function () {
        return this._getMetaValue("shareText");
    };
    /**
      * 获取指定ID的元素的value值
      * @param id
      */
    ConnectService.prototype._getMetaValue = function (id) {
        var ele = null;
        if (ele = document.getElementById(id)) {
            var metaValue = ele.getAttribute("value");
            if (id == "token") {
                return metaValue;
            }
            else {
                return Utils_1.default.utf8_decode(window.atob(metaValue));
            }
        }
        return null;
    };
    /**
      * 游戏的必要资源加载完成了
      */
    ConnectService.prototype._onNecessaryAssetsLoaded = function () {
        // 连接游戏服
        this.connectGameServer();
    };
    ConnectService.prototype._onSocketDisconnected = function () {
        // if(PlayerManager.instance.kicked) return;
        Laya.timer.clearAll(this);
        rigger.service.NetworkService.instance.close(NetworkChannelNames_1.default.GameChannel);
        if (this._gameServerConnectedTimes >= 0) {
            // 显示掉线提示
            UIManager_1.default.instance.showReconnectView();
            this._gameServerConnectedTimes = 0;
        }
        else {
            // 重连
            // alert("reconnect:" + this._gameServerConnectedTimes);
            ++this._gameServerConnectedTimes;
            // NetworkManager.instance.close(NetJZWL.SocketType.GameServer);
            this.connectGameServer();
            // 设置超时
            Laya.timer.once(3000, this, this._onSocketDisconnected);
        }
    };
    /**
      * 与服务器建立了SOCKET连接
      */
    ConnectService.prototype._onGameServerConnected = function () {
        Laya.timer.clearAll(this);
        UIManager_1.default.instance.hideWindowByName(FUIServerListView_1.default.URL);
        // if (this._initiallizied) {
        // 	// 重新登陆
        // 	this.loginGameServer();
        // }
        // else {
        console.log("game server connected");
        // 	MyApplication.instance.nowGameState = GameState.ConnectedGameServer;
        // 	this.loginGameServer();
        // 	this._initiallizied = true;
        // }
    };
    var ConnectService_1;
    /**
      * 服务名
      */
    ConnectService.serviceName = "ConnectService";
    ConnectService = ConnectService_1 = __decorate([
        rigger.utils.DecoratorUtil.register
    ], ConnectService);
    return ConnectService;
}(rigger.service.AbsService));
exports.default = ConnectService;
},{"../../MyApplication":48,"../../configs/GameEventNames":54,"../../definitions/NetworkChannelNames":64,"../../fui/loginUi/FUIServerListView":113,"../../manager/UIManager":164,"../../moduleContexts/loginModule/views/ServerListView":223,"../../protocol/CommandCodes":271,"../../protocol/protocols/protocols":272,"../../utils/Utils":306}],161:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Utils_1 = require("../utils/Utils");
var lang_1 = require("./lang");
var LanguageProxy = /** @class */ (function () {
    function LanguageProxy() {
    }
    Object.defineProperty(LanguageProxy, "languageConfig", {
        /**获得当前语言类型的语言字段配置 */
        get: function () { return LanguageProxy._inst._languageConfig; },
        enumerable: true,
        configurable: true
    });
    LanguageProxy.instance = function () {
        if (!LanguageProxy._inst) {
            LanguageProxy._inst = new LanguageProxy();
        }
        return LanguageProxy._inst;
    };
    LanguageProxy.prototype.startup = function (callback) {
        this._callback = callback;
        this.loadLanguageConfig();
    };
    LanguageProxy.prototype.loadLanguageConfig = function () {
        var languageType = Utils_1.default.getQueryString("language");
        lang_1.default.language = languageType;
        var assetLists = [
            { url: "res/datas/language/Common/" + lang_1.default.language + ".json", type: Laya.Loader.JSON },
            { url: "res/datas/language/Common/fui/FUIStringsSource.xml", type: Laya.Loader.TEXT },
            { url: "res/datas/language/Game/" + lang_1.default.language + ".json", type: Laya.Loader.JSON },
            { url: "res/datas/language/Game/fui/FUIStringsSource.xml", type: Laya.Loader.TEXT }
        ];
        Laya.loader.load(assetLists, Laya.Handler.create(this, this.onLoadLanguageCompleteHandle));
    };
    LanguageProxy.prototype.onLoadLanguageCompleteHandle = function () {
        this._languageConfig = Laya.loader.getRes("res/datas/language/Common/" + lang_1.default.language + ".json");
        this._fuiPackStringsSource = Laya.loader.getRes("res/datas/language/Common/fui/FUIStringsSource.xml");
        this.updatePackStringsSourceLanguage();
        if (this._callback)
            this._callback.run();
    };
    /**(多语言适配)更新fairygui字符串集的配置内容 */
    LanguageProxy.prototype.updatePackStringsSourceLanguage = function () {
        var index = 0;
        var stringEndIndex;
        var selectString;
        var languageID;
        while (true) {
            index = this._fuiPackStringsSource.indexOf("lang:", index);
            if (index == -1)
                break;
            stringEndIndex = this._fuiPackStringsSource.indexOf("</string>", index);
            selectString = this._fuiPackStringsSource.substring(index, stringEndIndex);
            languageID = parseInt(selectString.split(":")[1]);
            this._fuiPackStringsSource = this._fuiPackStringsSource.replace(selectString, $language(languageID));
        }
        fairygui.UIPackage.setStringsSource(this._fuiPackStringsSource);
    };
    ;
    return LanguageProxy;
}());
exports.default = LanguageProxy;
/**获取当前语言环境，指定字段ID的字符串**/
function $language(LanguageID) {
    return LanguageProxy.languageConfig[LanguageID];
}
exports.$language = $language;
/**获取当前语言环境下对应语言资源包的资源URL */
function $langResURL(assetName) {
    return "ui://" + lang_1.default.packName + "/" + assetName;
}
exports.$langResURL = $langResURL;
},{"../utils/Utils":306,"./lang":162}],162:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**多语言 */
var Lang = /** @class */ (function () {
    function Lang() {
    }
    Object.defineProperty(Lang, "languageLists", {
        /**获取多语言列表*/
        get: function () {
            return Lang._languageLists;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Lang, "language", {
        /**获取当前语言类型*/
        get: function () {
            return Lang._language ? Lang._language : Lang._languageLists[0];
        },
        /**设置语言类型*/
        set: function (languageType) {
            if (Lang._languageLists && Lang._languageLists.indexOf(languageType) != -1) {
                Lang._language = languageType;
            }
            else {
                Lang._language = Lang._languageLists[0];
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Lang, "packName", {
        /**获取当前语言资源分包对应的包名 */
        get: function () {
            return Lang._packName || (Lang._packName = "Lang_" + Lang.formatLangType(Lang.language));
        },
        enumerable: true,
        configurable: true
    });
    /**格式化语言类型，如：zh-cn ==> zh_cn */
    Lang.formatLangType = function (langType) {
        return langType.replace(/-/g, "_");
    };
    Lang._languageLists = [
        // LanguageType.ZH_CN 简体中文
        "zh-cn",
        // LanguageType.ZH_HK 繁体中文
        // "zh-hk",
        // LanguageType.EN_US 英文
        "en-us"
    ];
    return Lang;
}());
exports.default = Lang;
},{}],163:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * SoundManager
 */
var Utils_1 = require("../utils/Utils");
var MyApplication_1 = require("../MyApplication");
var AssetsUtils_1 = require("../utils/AssetsUtils");
var GameEventNames = require("../configs/GameEventNames");
var PlaySoundType_1 = require("../definitions/PlaySoundType");
var SoundManager = /** @class */ (function () {
    function SoundManager() {
        this._musicMuted = false;
        this.ismanualColseMusic = false;
        this._soundMuted = false;
        this.mEffectVolume = 1;
        this.mDialogVolume = 1;
        /*private _lastPlayAnimationSoundTime:number = 0;
        private _minIntervalAnimationSound:number = 10000;*/
        this._lastAnimationSoundName = null;
        /**
         * 初始化整个游戏的背景音乐
         */
        this._bgmUrls = [];
        this._bgmSoundChannel = null;
        this._isblurPaused = false;
        this._position = 0;
        this._musicIdx = 0;
    }
    Object.defineProperty(SoundManager, "instance", {
        get: function () {
            if (!SoundManager._instance) {
                SoundManager._instance = new SoundManager();
            }
            return SoundManager._instance;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SoundManager.prototype, "musicMuted", {
        /**
         * 是否已经静音(背景音乐)
         */
        get: function () {
            return this._musicMuted;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SoundManager.prototype, "musicVolume", {
        /**
         * 背景音乐的音量
         */
        get: function () {
            return Laya.SoundManager.musicVolume;
        },
        set: function (v) {
            Laya.SoundManager.setMusicVolume(v);
            if (v <= 0) {
                // this._musicMuted = Laya.SoundManager.musicMuted = true;
                this._musicMuted = true;
            }
            else {
                // this._musicMuted = Laya.SoundManager.musicMuted = false;
                this._musicMuted = false;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SoundManager.prototype, "soundMuted", {
        /**
         * 音效是否静音了
         */
        get: function () {
            return this._soundMuted;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SoundManager.prototype, "soundVolume", {
        /**
         * 游戏音效的音量
         */
        get: function () {
            return Laya.SoundManager.soundVolume;
        },
        set: function (v) {
            Laya.SoundManager.setSoundVolume(v);
            if (v <= 0) {
                // this._soundMuted = Laya.SoundManager.soundMuted = true;
                this._soundMuted = true;
            }
            else {
                // this._soundMuted = Laya.SoundManager.soundMuted = false;
                this._soundMuted = false;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SoundManager.prototype, "effectVolume", {
        /**
         * 音效音量
         */
        get: function () {
            return this.mEffectVolume;
        },
        set: function (v) {
            this.mEffectVolume = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SoundManager.prototype, "dialogVolume", {
        /**
         * 对话音量
         */
        get: function () {
            return this.mDialogVolume;
        },
        set: function (v) {
            this.mDialogVolume = v;
        },
        enumerable: true,
        configurable: true
    });
    /**
    * 初始化接口
    */
    SoundManager.prototype.init = function () {
        Laya.SoundManager.autoStopMusic = false;
        // 初始化游戏的背景音乐
        this._initMusic();
        // this._initSoundEffect();
        // this._initVolumn();
        // this.playBGM();
        Laya.stage.on(laya.events.Event.BLUR, this, this._stageOnBlur);
        Laya.stage.on(laya.events.Event.FOCUS, this, this._stageOnFocus);
        Laya.stage.on(laya.events.Event.VISIBILITY_CHANGE, this, this._visibilityChange);
    };
    /**
     * 释放
     */
    SoundManager.prototype.dispose = function () {
        Laya.stage.off(laya.events.Event.BLUR, this, this._stageOnBlur);
        Laya.stage.off(laya.events.Event.FOCUS, this, this._stageOnFocus);
        Laya.stage.off(laya.events.Event.VISIBILITY_CHANGE, this, this._visibilityChange);
    };
    /**
     * 将指定名称的音效设定到指定按钮
     */
    // public setBtnSound(btn: fairygui.GButton, soundName: string) {
    //     let url: string = fairygui.UIPackage.getItemURL(Application.instance.mainModuleName, soundName);
    //     if (!url) return;
    //     btn.sound = url;
    // }
    /**
     * 同时设置游戏背景音乐及音效的音量
     */
    SoundManager.prototype.setMusicAndSoundVolumn = function (v) {
        this._doSetMusicAndSoundVolumn(v);
        if (v > 0) {
            SoundManager.instance.ismanualColseMusic = false;
            Utils_1.default.setDefaultAudioStatus(true);
        }
        else {
            SoundManager.instance.ismanualColseMusic = true;
            Utils_1.default.setDefaultAudioStatus(false);
        }
        rigger.service.EventService.instance.dispatchEvent(GameEventNames.EVENT_GAME_SOUND_STATUS_UPDATED, SoundManager.instance);
        if (!Laya.stage.isFocused) {
            this._stageOnBlur();
        }
    };
    /**
     * 生成背景音乐地址
     */
    // public makeBGMUrls(): string[] {
    //     if (!Application.instance.registeredBGMS) return [AssetsUtils.makeSoundUrl(AssetsConfig.GAME_BACK_MUSIC)];
    //     let ret: string[] = [];
    //     let len: number = Application.instance.registeredBGMS.length;
    //     for (var i: number = 0; i < len; ++i) {
    //         ret.push(AssetsUtils.makeSoundUrl(Application.instance.registeredBGMS[i]));
    //     }
    //     return ret;
    // }
    /**
     * @public
     * @for SoundManager
     * @method playSound
     * @param {string} soundName 声音的名称，一般配置在AssetsConfigs中
     * @param {number} [loop=0] 声音的循环次数，为0表示无限循环
     * @return {SoundChannel}
     */
    SoundManager.prototype.playSound = function (soundUrl, soundType, loops, completeHandler) {
        if (soundType === void 0) { soundType = PlaySoundType_1.PlaySoundType.Effect; }
        // let url: string = AssetsUtils.makeSoundUrl(soundName, pkgName);
        if (!soundUrl)
            return null;
        // if(this._isblurPaused) return null; 
        var cha = Laya.SoundManager.playSound(soundUrl, loops, completeHandler);
        var volume = this.getVolumeBySoundType(soundType);
        cha && (cha.volume = volume);
        return cha;
    };
    /**
     * 停止声音播放（包括背景音乐和音效）。
     * @param {string} soundName 声音的名称，一般配置在AssetsConfigs中
     */
    SoundManager.prototype.stopSound = function (soundName, pkgName) {
        var url = AssetsUtils_1.default.makeSoundUrl(soundName, pkgName);
        if (!url)
            return null;
        Laya.SoundManager.stopSound(url);
    };
    /**
     * 停止背景音乐
     */
    SoundManager.prototype.stopBGM = function () {
        if (this._bgmSoundChannel)
            this._bgmSoundChannel.stop();
    };
    /**
     * 暂停背景音乐
     */
    SoundManager.prototype.pauseBGM = function () {
        if (this._bgmSoundChannel)
            this._bgmSoundChannel.pause();
    };
    SoundManager.prototype.resumeBGM = function () {
        this._bgmSoundChannel && this._bgmSoundChannel.resume();
    };
    SoundManager.prototype._initMusic = function () {
        // Laya.SoundManager['useAudioMusic'] = false;
        Laya.SoundManager.useAudioMusic = false;
        this._bgmUrls = [""];
    };
    Object.defineProperty(SoundManager.prototype, "bgmUrls", {
        set: function (value) {
            // if(this._bmgUrl) Laya.SoundManager.stopMusic();
            if (!value)
                return;
            if (Utils_1.default.isString(value)) {
                value = [value];
            }
            this._bgmUrls = value;
            this.playBGM();
        },
        enumerable: true,
        configurable: true
    });
    SoundManager.prototype.playBGM = function () {
        // 获取背景音乐名
        if (this._bgmUrls && this._bgmUrls.length > 0) {
            this._musicIdx = Utils_1.default.random(0, this._bgmUrls.length - 1);
            if (this._bgmSoundChannel) {
                this._bgmSoundChannel.stop();
            }
            this._bgmSoundChannel = Laya.SoundManager.playMusic(this._bgmUrls[this._musicIdx], 1, Laya.Handler.create(this, this._onBMGComplete));
        }
        else {
            this._bgmSoundChannel.stop();
        }
    };
    SoundManager.prototype._onBMGComplete = function () {
        this.playBGM();
    };
    /**
     * 初始化游戏音效，这里初始化的是一个通用配置，各个界面还可以自己初始本界面的
     */
    SoundManager.prototype._initSoundEffect = function () {
    };
    SoundManager.prototype._initVolumn = function () {
        if (Utils_1.default.getDefaultAudioStatus()) {
            this.ismanualColseMusic = false;
            this._doSetMusicAndSoundVolumn(50);
        }
        else {
            this.ismanualColseMusic = true;
            this._doSetMusicAndSoundVolumn(0);
        }
    };
    SoundManager.prototype._doSetMusicAndSoundVolumn = function (v) {
        // this.musicVolume = v;
        // this.soundVolume = v;
        // SoundManager.instance.musicVolume = v;
        // SoundManager.instance.soundVolume = v;
        // SoundManager.instance.effectVolume = v;
        // SoundManager.instance.dialogVolume = v;
        if (v == 0) {
            SoundManager.instance.musicVolume = v;
            SoundManager.instance.soundVolume = v;
            SoundManager.instance.effectVolume = v;
        }
        else {
            SoundManager.instance.musicVolume = Laya.LocalStorage.getItem("musicVol") ? parseInt(Laya.LocalStorage.getItem("musicVol")) / 100 : 1;
            SoundManager.instance.soundVolume = Laya.LocalStorage.getItem("soundVol") ? parseInt(Laya.LocalStorage.getItem("soundVol")) / 100 : 1;
            SoundManager.instance.effectVolume = Laya.LocalStorage.getItem("soundVol") ? parseInt(Laya.LocalStorage.getItem("soundVol")) / 100 : 1;
        }
    };
    SoundManager.prototype._visibilityChange = function () {
        if (Laya.stage.isVisibility) {
            this._stageOnFocus();
        }
        else {
            this._stageOnBlur();
        }
    };
    SoundManager.prototype._stageOnBlur = function () {
        if (!SoundManager.instance.ismanualColseMusic) {
            SoundManager.instance._doSetMusicAndSoundVolumn(0);
            // if (this._bgmSoundChannel) {
            //     this._bgmSoundChannel.pause();
            // }
            if (this._bgmSoundChannel) {
                if (this._bgmSoundChannel instanceof Laya.WebAudioSoundChannel) {
                    this._bgmSoundChannel.pause();
                }
                else if (this._bgmSoundChannel['_audio']) {
                    this._bgmSoundChannel.pause();
                }
            }
        }
    };
    SoundManager.prototype._stageOnFocus = function () {
        if (!Laya.SoundManager['_isActive']) {
            Laya.SoundManager['_isActive'] = true;
            this.playBGM();
        }
        if (!SoundManager.instance.ismanualColseMusic) {
            // console.log(Laya.SoundManager._tMusic);
            var cfg = MyApplication_1.default.instance.getConfig();
            SoundManager.instance._doSetMusicAndSoundVolumn(cfg.defaultVolumn);
            if (this._bgmSoundChannel) {
                if (SoundManager.instance.musicVolume > 0) {
                    if (this._bgmSoundChannel instanceof Laya.WebAudioSoundChannel) {
                        this._bgmSoundChannel['_volume'] = SoundManager.instance.musicVolume;
                        if (!this._bgmSoundChannel['audioBuffer']) {
                            this.playBGM();
                        }
                    }
                    else {
                        this._bgmSoundChannel['_audio']['volume'] = SoundManager.instance.musicVolume;
                    }
                }
                else {
                    if (this._bgmSoundChannel instanceof Laya.WebAudioSoundChannel) {
                        this._bgmSoundChannel['_volume'] = 0;
                    }
                    else {
                        this._bgmSoundChannel['_audio']['volume'] = 0;
                    }
                }
                if (this._bgmSoundChannel instanceof Laya.WebAudioSoundChannel) {
                    this._bgmSoundChannel.resume();
                }
                else {
                    if (this._bgmSoundChannel['_currentTime'] <= 0) {
                        this.playBGM();
                    }
                    else {
                        this._bgmSoundChannel.resume();
                    }
                }
            }
        }
    };
    SoundManager.prototype.getVolumeBySoundType = function (soundType) {
        switch (soundType) {
            case PlaySoundType_1.PlaySoundType.BGM:
                return SoundManager.instance.musicVolume;
            case PlaySoundType_1.PlaySoundType.Effect:
                return SoundManager.instance.effectVolume;
            case PlaySoundType_1.PlaySoundType.Dialog:
                return SoundManager.instance.dialogVolume;
            default:
                break;
        }
    };
    return SoundManager;
}());
exports.default = SoundManager;
},{"../MyApplication":48,"../configs/GameEventNames":54,"../definitions/PlaySoundType":66,"../utils/AssetsUtils":301,"../utils/Utils":306}],164:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
/** CloseParams*/
var CloseParams = /** @class */ (function () {
    /**
     * @param cls 原界面UI的类名
     * @param layer 原界面的层级
     * @param closeOther 是否关闭其他界面
     * @param mainViewTab 原界面在主界面下方的索引， 比如商城界面是在 主城Tab
     * @param funEx funEx参
     * @param returnCallBack 返回原界面后的CallBack
     */
    function CloseParams(cls, layer, closeOther, mainViewTab, funEx, returnCallBack) {
        this.OriginalPanel = cls;
        this.OriginalLayer = layer;
        this.OriginalCloseOther = closeOther;
        this.OriginalTab = mainViewTab;
        this.OriginalPanelFunEx = funEx;
        this.ReturnCallBack = returnCallBack;
    }
    CloseParams.prototype.CallBackTrigger = function (view) {
        if (this.ReturnCallBack == null)
            return;
        this.ReturnCallBack.apply(this.OriginalLayer, view);
    };
    return CloseParams;
}());
exports.CloseParams = CloseParams;
/** UIParams*/
var UIParams = /** @class */ (function () {
    function UIParams() {
    }
    return UIParams;
}());
exports.UIParams = UIParams;
var CommonButtonID = /** @class */ (function () {
    function CommonButtonID() {
    }
    CommonButtonID.MAIN_MENU_BTN = "mainMenuBtn";
    CommonButtonID.HOME_BTN = "homeBtn";
    CommonButtonID.INFO_BTN = "infoBtn";
    CommonButtonID.HELP_BTN = "helpBtn";
    CommonButtonID.VOICE_BTN = "voiceBtn";
    CommonButtonID.TURBO_BTN = "turboBtn";
    CommonButtonID.GAME_RECORD_BTN = "gameRecordBtn";
    CommonButtonID.SETTING_BTN = "settingBtn";
    CommonButtonID.START_BTN = "startBtn";
    CommonButtonID.AUTO_GAME_BTN = "autoGameSettingBtn";
    return CommonButtonID;
}());
exports.CommonButtonID = CommonButtonID;
/**
* UIManager UI管理类，用于管理界面的显示，回收等
*
*
*/
var UIWindow_1 = require("../utils/UIWindow");
var AssetsUtils_1 = require("../utils/AssetsUtils");
var Utils_1 = require("../utils/Utils");
var MaskView_1 = require("../commonView/MaskView");
var AbstractLoadingView_1 = require("../moduleContexts/assetsModule/views/loading/AbstractLoadingView");
var GmView_1 = require("../commonView/gmCmdView/GmView");
var FUIGmView_1 = require("../fui/gmCmd/FUIGmView");
var FUIMaskView_1 = require("../fui/commonUI/FUIMaskView");
var ScreenMode_1 = require("../definitions/ScreenMode");
var DisconnectedView_1 = require("../moduleContexts/loginModule/views/DisconnectedView");
var UIManager = /** @class */ (function () {
    function UIManager() {
        this._maskView = null;
        /**
         * ui的URL到资源路径的映射
         */
        this._uiURLToRes = {};
        this._shadowKeyBoardWindowNum = 0;
        /**
         * 上次的屏幕模式
         */
        this._lastScreenMode = ScreenMode_1.ScreenMode.None;
        /**
         * 游戏界面层
         */
        this._uiLayer = null;
        /**
         * 主界面层
         */
        //  private _mainViewLayer:fairygui.GRoot = null;
        /**
         * 弹出层
         */
        this._popupLayer = null;
        /**
         * 提示层
         */
        this._tipsLayer = null;
        /**
         * 场景层
         */
        this._sceneLayer = null;
        this._initLayers();
        this._shadowKeyBoardWindowNum = 0;
        Laya.stage.on(Laya.Event.RESIZE, this, this._onResize);
        // fairygui.GRoot.inst.setSize(Laya.stage.width, Laya.stage.height);
        this._onResize();
    }
    Object.defineProperty(UIManager, "instance", {
        /**
         * 获取UIManager的唯一实例
         */
        get: function () {
            if (!this._instance) {
                this._instance = new UIManager();
            }
            return this._instance;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UIManager.prototype, "sceneLayer", {
        // private tipsView:TipsView;
        /**
         * 场景层位于最底层
         */
        get: function () {
            return this._sceneLayer;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UIManager.prototype, "uiLayer", {
        /*
        *获取普通UI显示层
        */
        get: function () {
            return this._uiLayer;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UIManager.prototype, "popupLayer", {
        /**
         * 弹出层
         */
        get: function () {
            return this._popupLayer;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UIManager.prototype, "tipsLayer", {
        /**
         * 获取提示显示层(显示在最上层)
         */
        get: function () {
            return this._tipsLayer;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UIManager.prototype, "maskView", {
        /**
         * 黑色遮罩界面
         */
        get: function () {
            if (!this._maskView)
                this._initMaskView();
            return this._maskView;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UIManager.prototype, "changedScreenMode", {
        /**
         * 变化后的屏幕模式，如果和上次的一样，则认为未发生变化，此时值为ScreenMode.None
         */
        get: function () {
            return this._changedScreenMode;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UIManager.prototype, "shadowKeyBoardWindowNum", {
        get: function () {
            return this._shadowKeyBoardWindowNum;
        },
        set: function (v) {
            this._shadowKeyBoardWindowNum = Math.max(0, v);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 显示窗口，用此函数显示的界面必须继承UIWindow
     * 调用此函数前请确保界面所在包已经初始化完成或界面支持动态加载(详情请参加fairygui手册)
     * 使用此函数显示窗口时，不需要再在onInit函数中设置contentPane属性
     * path:packageName/resName 或 ui://xxxx
     */
    UIManager.prototype.showWindow = function (cls, closeOther, layer, funEx, closeParams) {
        var _this = this;
        if (cls === void 0) { cls = null; }
        if (closeOther === void 0) { closeOther = true; }
        if (layer === void 0) { layer = this.uiLayer; }
        var bindInfo = riggerIOC.InjectionBinder.instance.bind(cls);
        var rawPath = bindInfo.realClass.getUrl();
        if (!rawPath)
            throw new Error("invalid ui url");
        var path = this.getCachedUIPath(rawPath);
        // let ui:UIWindow<T> = Laya.Pool.getItemByClass(path, cls);
        var ui = Laya.Pool.getItem(path);
        if (!ui)
            ui = bindInfo.getInstance();
        // 获取对应的Mediator
        var mediator = this.mediationBinder.createAndAttach(cls, ui);
        if (closeOther) {
            this._hideOtherWindow(layer);
        }
        // 将设置UI.contentPane的代码注入到UI的onInit回调中
        if (!ui.contentPane) {
            ui.injectOnInit(function () {
                // UI.contentPane = <T>fairygui.UIPackage.createObject(packageName, uiName).asCom;
                // fairygui.UIPackage
                var needCache = false;
                if (fairygui.utils.ToolSet.startsWith(rawPath, "ui://", false)) {
                    needCache = true;
                    ui.contentPane = fairygui.UIPackage.createObjectFromURL(rawPath).asCom;
                }
                else {
                    var packageName = AssetsUtils_1.default.getUIPackageName(rawPath);
                    var uiName = AssetsUtils_1.default.getUIName(rawPath);
                    var obj = fairygui.UIPackage.createObject(packageName, uiName);
                    ui.contentPane = fairygui.UIPackage.createObject(packageName, uiName).asCom;
                }
                // console.log("name:" + UI.contentPane.packageItem.name);
                ui.name = ui.contentPane.packageItem.owner.name + "/" + ui.contentPane.packageItem.name;
                if (!path && needCache) {
                    _this._uiURLToRes[rawPath] = ui.name;
                }
                mediator && mediator.onInit();
            }, funEx);
        }
        else {
            ui.funEx(funEx);
        }
        // ui.sortingOrder = layer;
        ui.injectOnShown(function () {
            mediator && mediator.onShown();
            mediator = null;
        });
        // 处理遮罩层
        this._showMaskView(layer, ui);
        // 显示
        ui.showOn(layer);
        // 居中
        // ui.center();
        return ui;
    };
    /**
     * 异步显示窗口, 使用此接口显示窗口时，不要求已经初始化完包
     * @param rawPath
     * @param cls
     * @param closeOther
     * @param layer
     * @param funEx
     * @param closeParams
     */
    UIManager.prototype.showWindowAsyn = function (packageName, rawPath, cls, closeOther, layer, funEx, closeParams) {
        if (cls === void 0) { cls = null; }
        if (closeOther === void 0) { closeOther = true; }
        if (layer === void 0) { layer = this.uiLayer; }
        if (rigger.service.AssetsPackageService.instance.loadPackage(packageName, new rigger.RiggerHandler(this, this._onWindowReady, [rawPath, cls, closeOther, layer, funEx, closeParams]))) {
            this._onWindowReady(cls, closeOther, layer, funEx, closeParams);
        }
    };
    UIManager.prototype._onWindowReady = function (cls, closeOther, layer, funEx, closeParams) {
        if (cls === void 0) { cls = null; }
        if (closeOther === void 0) { closeOther = true; }
        if (layer === void 0) { layer = this.uiLayer; }
        this.showWindow(cls, closeOther, layer, funEx, closeParams);
    };
    UIManager.prototype.showReconnectView = function () {
        console.log("网络中断,请重新连接....");
        this.showWindow(DisconnectedView_1.default, false, this.popupLayer);
        //  if (!UIManager.instance.getWindowByName(Common.FUICommonTipsView.URL, UIManager.instance.tipsLayer))  {
        //         UIManager.instance.showCommonTipsView($language(102028), Laya.Handler.create(this, function (): void {
        //             UIManager.instance.hideWindowByName(Common.FUICommonTipsView.URL, UIManager.instance.tipsLayer);
        //             // window.location.href = window.location.href;
        //             Common.Utils.returnToLobby();
        //         }));
        //     }
    };
    UIManager.prototype.showGMView = function () {
        if (this.getWindowByName(FUIGmView_1.default.URL, this._tipsLayer))
            return;
        this.showWindow(GmView_1.default, false, this._tipsLayer);
    };
    /**
     * 显示加载界面
     */
    UIManager.prototype.showLoadingView = function () {
        // if(Application.instance.loadingModule)
        // {
        //     return this._showSpecialLoadingView();            
        // }
        // else
        // {
        //     this._showCommonLoadingView();            
        // }
        this._showCommonLoadingView();
    };
    // public showJPBalancePushView(push:protocol.JpBalancePush){
    //     UIManager.instance.showWindow(Common.FUIJPBalancePushView.URL, Common.JPBalancePushView, false, this._tipsLayer, push);
    // }
    /**
     * 显示子游戏自己的加载界面
     */
    // private _showSpecialLoadingView()
    // {
    //     let url:string = Application.instance.loadingModule.FUILoadingView.URL;
    //     let cls:any = Application.instance.loadingModule.LoadingView;
    //     this.showWindow(url, cls);
    // }
    /**
     * 显示公共的加载界面
     */
    UIManager.prototype._showCommonLoadingView = function () {
        this.showWindow(AbstractLoadingView_1.default, true, UIManager.instance.sceneLayer);
    };
    /**
     * 隐藏加载界面
     */
    UIManager.prototype.hideLoadingView = function () {
        // let ui:FootballLoadingView = UIManager.instance.getWindowByName<FootballLoadingView>(Pro29Loading.FUILoadingView.URL);
        this.hideWindowByName(AssetsUtils_1.default.makeLoadingViewUrl());
    };
    /**
     * 扩展某UI项
     */
    UIManager.prototype.extendItem = function (url, cls) {
        fairygui.UIObjectFactory.setPackageItemExtension(url, cls);
    };
    /**
     * 从缓存池中获取UI界面，如果浮存池没有，则新建
     */
    UIManager.prototype.getItemFromPool = function (packageName, cls) {
        // 载入包
        if (!packageName) {
            return;
        }
        // 扩展自定义类
    };
    // private _pooledMap:{};
    /**
     * 清除所有面板
     */
    UIManager.dispose = function () {
        if (!UIManager._instance) {
            return;
        }
        UIManager._doDispose();
    };
    /**
     * 获取缓存的UI路径
     */
    UIManager.prototype.getCachedUIPath = function (url) {
        if (fairygui.utils.ToolSet.startsWith(url, "ui://", false)) {
            return this._uiURLToRes[url];
        }
        return url;
    };
    UIManager._doDispose = function () {
        // UITweenManager.dispose();
        // Laya.Pool
        UIManager._instance = null;
    };
    /**
     * 关闭指定名称的窗口
     */
    UIManager.prototype.hideWindowByName = function (name, layer) {
        if (layer === void 0) { layer = this.uiLayer; }
        var realName = this.getCachedUIPath(name);
        var panel = this.getWindowByName(realName, layer);
        if (!panel)
            return;
        this.hideWindow(panel);
    };
    // 隐藏窗口
    UIManager.prototype.hideWindow = function (window) {
        var _this = this;
        // 需要回收到缓存池
        // 在onHide中注入回收逻辑
        var root = window.parent;
        window.injectOnHide(function () {
            // 获取对应的Mediator
            var mediator = _this.mediationBinder.getAttachedMediatorInstance(window);
            mediator && mediator.onHide();
            // 从父显示列表中移除
            if (window.name) {
                window.removeFromParent();
                if (window.isCache) {
                    Laya.Pool.recover(window.name, window);
                }
                else {
                    mediator && mediator.dispose();
                    window.dispose();
                }
                _this._hideMaskView(root, window);
            }
            mediator = null;
            window = null;
        });
        window.hide();
    };
    /**
     * 根据窗口名获取窗口，传layer为非NULL值，则只返回相应层级的layer;
     */
    UIManager.prototype.getWindowByName = function (name, layer) {
        if (layer === void 0) { layer = this.uiLayer; }
        if (!layer)
            return null;
        var realName = this.getCachedUIPath(name);
        return layer.getChild(realName);
    };
    /**
     * 关闭除指定面板外的其它面板(同一layer);
     */
    UIManager.prototype._hideOtherWindow = function (layer, exception) {
        var child;
        // let root = layer;
        var i = layer.numChildren - 1;
        var ignoredNum = 0;
        for (; i >= 0;) {
            // console.log(`root children num:${root.numChildren}`);
            child = layer.getChildAt(i);
            if (!(child instanceof UIWindow_1.default))
                continue;
            if ((!exception || exception != child.name) && child.parent === layer && !child.ignoreCloseOther) {
                this.hideWindow(child);
            }
            child.ignoreCloseOther && ++ignoredNum;
            i = layer.numChildren - ignoredNum - 1;
        }
    };
    /**
     * 初始化遮罩界面
     */
    UIManager.prototype._initMaskView = function () {
        this._maskView = new MaskView_1.default();
        this._maskView.contentPane = (fairygui.UIPackage.createObjectFromURL(FUIMaskView_1.default.URL).asCom);
    };
    UIManager.prototype._showMaskView = function (layer, ui) {
        if (!ui.needMask)
            return;
        this.maskView.enable(layer, ui);
    };
    UIManager.prototype._hideMaskView = function (layer, ui) {
        if (!ui.needMask)
            return;
        this.maskView.disable(layer, ui);
    };
    UIManager.prototype._initLayers = function () {
        this._sceneLayer = new fairygui.GComponent();
        this._sceneLayer.name = "sceneLayer";
        fairygui.GRoot.inst.addChild(this._sceneLayer);
        this._uiLayer = new fairygui.GComponent();
        this._uiLayer.name = "uiLayer";
        fairygui.GRoot.inst.addChild(this._uiLayer);
        this._popupLayer = new fairygui.GComponent();
        this._popupLayer.name = "popupLayer";
        fairygui.GRoot.inst.addChild(this._popupLayer);
        this._tipsLayer = new fairygui.GComponent();
        this._tipsLayer.name = "tipsLayer";
        fairygui.GRoot.inst.addChild(this._tipsLayer);
    };
    UIManager.prototype._onResize = function () {
        var nowScreenMode = Utils_1.default.getScreenMode();
        if (nowScreenMode !== this._lastScreenMode) {
            this._changedScreenMode = nowScreenMode;
            // PlayerManager.instance.sendUserScreenModeSetting();
        }
        else {
            this._changedScreenMode = ScreenMode_1.ScreenMode.None;
        }
        this._lastScreenMode = nowScreenMode;
    };
    __decorate([
        riggerIOC.inject(riggerIOC.MediationBinder)
    ], UIManager.prototype, "mediationBinder", void 0);
    return UIManager;
}());
exports.default = UIManager;
},{"../commonView/MaskView":50,"../commonView/gmCmdView/GmView":53,"../definitions/ScreenMode":68,"../fui/commonUI/FUIMaskView":89,"../fui/gmCmd/FUIGmView":100,"../moduleContexts/assetsModule/views/loading/AbstractLoadingView":172,"../moduleContexts/loginModule/views/DisconnectedView":221,"../utils/AssetsUtils":301,"../utils/UIWindow":305,"../utils/Utils":306}],165:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
* 资源模块
*/
///<reference path="signals/StartLoadAssetsSignal.ts" />
///<reference path="signals/AssetsLoadingCompleteSignal.ts" />
///<reference path="signals/AssetsLoadingProgressChangeSignal.ts" />
var inject = riggerIOC.inject;
var StartLoadAssetsSignal_1 = require("./signals/StartLoadAssetsSignal");
var AssetsLoadingCompleteSignal_1 = require("./signals/AssetsLoadingCompleteSignal");
var AssetsLoadingProgressChangeSignal_1 = require("./signals/AssetsLoadingProgressChangeSignal");
var AbstractLoadingView_1 = require("./views/loading/AbstractLoadingView");
var LoadingView_1 = require("./views/loading/LoadingView");
var InitAssetsVersionCommand_1 = require("./commands/InitAssetsVersionCommand");
var LoadLoadingAssetsCommand_1 = require("./commands/LoadLoadingAssetsCommand");
var LoadPreAssetsCommand_1 = require("./commands/LoadPreAssetsCommand");
var LoadingViewMediator_1 = require("./views/loading/LoadingViewMediator");
var AssetsContext = /** @class */ (function (_super) {
    __extends(AssetsContext, _super);
    function AssetsContext(app) {
        return _super.call(this, app) || this;
    }
    /**
      * 绑定注入
      */
    AssetsContext.prototype.bindInjections = function () {
        console.log("bind inject in assets context");
        // 绑定信号
        this.injectionBinder.bind(AssetsLoadingCompleteSignal_1.default).toSingleton();
        this.injectionBinder.bind(AssetsLoadingProgressChangeSignal_1.default).toSingleton();
        this.injectionBinder.bind(AbstractLoadingView_1.default).to(LoadingView_1.default);
    };
    AssetsContext.prototype.bindCommands = function () {
        // console.log("bind commands");
        console.log("bind commands in assets context");
        // 加载资源的命令序列
        this.commandBinder
            .bind(StartLoadAssetsSignal_1.default)
            // 按顺序执行
            .inSequence()
            // 一次后失效
            .once()
            // 初始化资源版本
            .to(InitAssetsVersionCommand_1.default)
            // 加载初始资源
            .to(LoadLoadingAssetsCommand_1.default)
            // 加载预加载资源
            .to(LoadPreAssetsCommand_1.default)
            // 搞定收工
            .toValue(this.doneCommand);
    };
    AssetsContext.prototype.bindMediators = function () {
        console.log("bind mediators in assets context");
        this.mediationBinder.bind(AbstractLoadingView_1.default).to(LoadingViewMediator_1.default);
    };
    AssetsContext.prototype.onStart = function () {
        console.log("start assets context");
        this.startLoadAssetsSignal.dispatch();
    };
    __decorate([
        inject(StartLoadAssetsSignal_1.default)
    ], AssetsContext.prototype, "startLoadAssetsSignal", void 0);
    return AssetsContext;
}(riggerIOC.ModuleContext));
exports.default = AssetsContext;
},{"./commands/InitAssetsVersionCommand":166,"./commands/LoadLoadingAssetsCommand":167,"./commands/LoadPreAssetsCommand":168,"./signals/AssetsLoadingCompleteSignal":169,"./signals/AssetsLoadingProgressChangeSignal":170,"./signals/StartLoadAssetsSignal":171,"./views/loading/AbstractLoadingView":172,"./views/loading/LoadingView":175,"./views/loading/LoadingViewMediator":176}],166:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
* name
*/
var MyApplication_1 = require("../../../MyApplication");
var InitAssetsVersionCommand = /** @class */ (function (_super) {
    __extends(InitAssetsVersionCommand, _super);
    function InitAssetsVersionCommand() {
        return _super.call(this) || this;
    }
    InitAssetsVersionCommand.prototype.execute = function () {
        var _this = this;
        var app = MyApplication_1.default.instance;
        var assetsService = app.getRunningService(rigger.service.AssetsService.serviceName);
        var mainLoginService = app.getRunningService(MainLogicService.serviceName);
        var config = mainLoginService.getConfig();
        if (config.resVersionAvailable == true) {
            // 初始化资源版本
            Laya.ResourceVersion.enable('version.json', Laya.Handler.create(this, function () {
                assetsService.initVersion(rigger.RiggerHandler.create(_this, _this.onAssetsVersionInit));
            }));
        }
        else {
            console.log("AssetsManager:res version switch is off, so disable res version");
            this.onAssetsVersionInit();
        }
    };
    InitAssetsVersionCommand.prototype.onAssetsVersionInit = function () {
        this.done();
    };
    return InitAssetsVersionCommand;
}(riggerIOC.Command));
exports.default = InitAssetsVersionCommand;
},{"../../../MyApplication":48}],167:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
* name
*/
var AssetsUtils_1 = require("../../../utils/AssetsUtils");
var LoadLoadingAssetsCommand = /** @class */ (function (_super) {
    __extends(LoadLoadingAssetsCommand, _super);
    function LoadLoadingAssetsCommand() {
        return _super.call(this) || this;
    }
    LoadLoadingAssetsCommand.prototype.execute = function () {
        // 加载初始资源
        AssetsUtils_1.default.loadInitialAssets(this, this.onLoadingAssetsLoad);
    };
    LoadLoadingAssetsCommand.prototype.onLoadingAssetsLoad = function () {
        this.done();
    };
    return LoadLoadingAssetsCommand;
}(riggerIOC.Command));
exports.default = LoadLoadingAssetsCommand;
},{"../../../utils/AssetsUtils":301}],168:[function(require,module,exports){
"use strict";
/**
* name
*/
///<reference path = "../signals/AssetsLoadingProgressChangeSignal.ts" />
///<reference path = "../signals/AssetsLoadingCompleteSignal.ts" />
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var TouchMoveFullScreen_1 = require("../../../utils/TouchMoveFullScreen");
var UIManager_1 = require("../../../manager/UIManager");
var AssetsUtils_1 = require("../../../utils/AssetsUtils");
var AssetsLoadingProgressChangeSignal_1 = require("../signals/AssetsLoadingProgressChangeSignal");
var AssetsLoadingCompleteSignal_1 = require("../signals/AssetsLoadingCompleteSignal");
var inject = riggerIOC.inject;
var Utils_1 = require("../../../utils/Utils");
var LoadPreAssetsCommand = /** @class */ (function (_super) {
    __extends(LoadPreAssetsCommand, _super);
    function LoadPreAssetsCommand() {
        return _super.call(this) || this;
    }
    LoadPreAssetsCommand.prototype.execute = function () {
        // --销毁动态载入文本提示
        eval("preloadTipDestroy()");
        // 显示加载界面
        UIManager_1.default.instance.showLoadingView();
        // 加载需要预加载的资源
        AssetsUtils_1.default.loadPreloadingAssets(rigger.RiggerHandler.create(this, this.onPreloadingAssetsComplete), rigger.RiggerHandler.create(this, this.onPreloadingAssetsProgress, null, false));
        if (Utils_1.default.isInLobby()) {
            document.location.href = "jplobby://cmd=ready";
        }
        // 全屏提示 ("上滑全屏"功能有文字提示，需预加载完语言包配置后才调用，所以移动到初始化加载界面显示时再启用)
        TouchMoveFullScreen_1.default.instance().alreadyInGame();
    };
    LoadPreAssetsCommand.prototype.onPreloadingAssetsComplete = function () {
        this.loadingCompleteSignal.once(this, this.onLoadingComplete);
        this.assetsLoadingProgressSignal.dispatch(1 * 100);
    };
    LoadPreAssetsCommand.prototype.onPreloadingAssetsProgress = function (v) {
        this.assetsLoadingProgressSignal.dispatch(v * 90);
    };
    LoadPreAssetsCommand.prototype.onLoadingComplete = function () {
        this.done();
    };
    __decorate([
        inject(AssetsLoadingProgressChangeSignal_1.default)
    ], LoadPreAssetsCommand.prototype, "assetsLoadingProgressSignal", void 0);
    __decorate([
        inject(AssetsLoadingCompleteSignal_1.default)
    ], LoadPreAssetsCommand.prototype, "loadingCompleteSignal", void 0);
    return LoadPreAssetsCommand;
}(riggerIOC.Command));
exports.default = LoadPreAssetsCommand;
},{"../../../manager/UIManager":164,"../../../utils/AssetsUtils":301,"../../../utils/TouchMoveFullScreen":304,"../../../utils/Utils":306,"../signals/AssetsLoadingCompleteSignal":169,"../signals/AssetsLoadingProgressChangeSignal":170}],169:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
* name
*/
var AssetsLoadingCompleteSignal = /** @class */ (function (_super) {
    __extends(AssetsLoadingCompleteSignal, _super);
    function AssetsLoadingCompleteSignal() {
        return _super.call(this) || this;
    }
    return AssetsLoadingCompleteSignal;
}(riggerIOC.Signal));
exports.default = AssetsLoadingCompleteSignal;
},{}],170:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
* name
*/
var AssetsLoadingProgressChangeSignal = /** @class */ (function (_super) {
    __extends(AssetsLoadingProgressChangeSignal, _super);
    function AssetsLoadingProgressChangeSignal() {
        return _super.call(this) || this;
    }
    return AssetsLoadingProgressChangeSignal;
}(riggerIOC.Signal));
exports.default = AssetsLoadingProgressChangeSignal;
},{}],171:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
* name
*/
var StartLoadAssetsSignal = /** @class */ (function (_super) {
    __extends(StartLoadAssetsSignal, _super);
    function StartLoadAssetsSignal() {
        return _super.call(this) || this;
    }
    return StartLoadAssetsSignal;
}(riggerIOC.Signal));
exports.default = StartLoadAssetsSignal;
},{}],172:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 加载界面的抽象类，子游戏的加载界面如果没有特殊需求，应该继承本抽象类
 * 进度有效范围:0 - 100
 */
var UIWindow_1 = require("../../../../utils/UIWindow");
var AbstractLoadingView = /** @class */ (function (_super) {
    __extends(AbstractLoadingView, _super);
    function AbstractLoadingView() {
        var _this = _super.call(this) || this;
        _this._tweenInterval = 500;
        // private _onLoop(){
        //     this._onFocus();
        // }
        /**
         * 进度完成（包括动画/动效播放）时的外部回调
         */
        _this._outCompleteHandler = null;
        /**
         * 回调完成(内部)
         */
        _this._selfCompleteHandler = null;
        _this._realProgress = 0;
        if (!_this._selfCompleteHandler)
            _this._selfCompleteHandler = Laya.Handler.create(_this, _this._onComplete, null, false);
        return _this;
    }
    AbstractLoadingView.prototype.onInit = function () {
        // this.isCache = false;
        this.progress = 0;
        this._realProgress = 0;
    };
    AbstractLoadingView.prototype.onShown = function () {
        _super.prototype.onShown.call(this);
        Laya.stage.on(Laya.Event.FOCUS, this, this._onFocus);
        // Laya.timer.loop(this._tweenInterval, this, this._onLoop);
    };
    AbstractLoadingView.prototype.onHide = function () {
        Laya.stage.off(Laya.Event.FOCUS, this, this._onFocus);
        _super.prototype.onHide.call(this);
        // Laya.timer.clear(this, this._onLoop);
    };
    /**
     * 设置进度
     */
    AbstractLoadingView.prototype.setProgress = function (progress) {
        this._realProgress = progress;
        // if(progress >= 100){
        //     this.progress = 100;
        //     this._onComplete();
        //     // Laya.timer.callLater(this, this._onComplete);
        //     return;
        // }
        if (this._tween)
            this._tween.recover();
        this._tween = Laya.Tween.to(this, { progress: progress }, this._tweenInterval, Laya.Ease.linearNone, this._selfCompleteHandler);
        // if(!this._tween) return this._tween = Laya.Tween.to(this, {progress:progress}, this._tweenInterval, Laya.Ease.linearNone, this._selfCompleteHandler);
        // this._tween.to(this, {progress:progress}, this._tweenInterval, Laya.Ease.linearNone, this._selfCompleteHandler);
        // this.progress = progress;
    };
    /**
     * 注册当加载完成时的回调句柄
     * @param thisObj
     * @param func
     * @param args
     */
    AbstractLoadingView.prototype.onComplete = function (thisObj, func, args) {
        this._outCompleteHandler && this._outCompleteHandler.recover();
        this._outCompleteHandler = Laya.Handler.create(thisObj, func, args);
    };
    /**
     * 获取进度
     */
    AbstractLoadingView.prototype.getProgress = function () {
        return this.progress;
    };
    AbstractLoadingView.prototype.dispose = function () {
        if (this._outCompleteHandler) {
            this._outCompleteHandler.recover();
            this._outCompleteHandler = null;
        }
        // Laya.stage.off(Laya.Event.FOCUS, this, this._onFocus);
    };
    AbstractLoadingView.prototype._onFocus = function () {
        this.setProgress(this._realProgress);
    };
    AbstractLoadingView.prototype._onComplete = function () {
        if (this.progress >= 100)
            this._outCompleteHandler && this._outCompleteHandler.run();
    };
    return AbstractLoadingView;
}(UIWindow_1.default));
exports.default = AbstractLoadingView;
},{"../../../../utils/UIWindow":305}],173:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var loadingBinder_1 = require("../../../../fui/loading/loadingBinder");
/**
 * Common包类需要进行的自定义扩展放在这
 */
var loadingConfig = /** @class */ (function () {
    function loadingConfig() {
        rigger.service.FairyGUIPackagePlugin.packageMap["loadingBinder"] = loadingBinder_1.default;
        rigger.service.FairyGUIPackagePlugin.packageMap["loading"] = this;
        rigger.service.PackageUrlPlugin.packageMap["loading"] = this;
    }
    loadingConfig.prototype.bindCustom = function () {
    };
    loadingConfig.prototype.getPreLoadingAssets = function () {
        return [
            { url: "res/fui/loading/loading_atlas0.png", type: Laya.Loader.IMAGE },
            { url: "res/fui/loading/loading_atlas_w5i0o.png", type: Laya.Loader.IMAGE },
            // { url: "res/fui/loading/loading_w5i0d.mp3", type: Laya.Loader.SOUND},
            // { url: "res/fui/loading/loading_w5i0e.mp3", type: Laya.Loader.SOUND},
            { url: "res/spine/loading/loading.png", type: Laya.Loader.IMAGE },
            { url: "res/spine/loading/loading.sk", type: Laya.Loader.BUFFER }
        ];
    };
    return loadingConfig;
}());
exports.default = loadingConfig;
},{"../../../../fui/loading/loadingBinder":106}],174:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 公用加载界面
 */
var AbstractLoadingView_1 = require("./AbstractLoadingView");
var FUILoadingView_1 = require("../../../../fui/loading/FUILoadingView");
var ScreenMode_1 = require("../../../../definitions/ScreenMode");
var VideoPlayerView_1 = require("../../../../commonView/VideoPlayerView");
var VideoType_1 = require("../../../../definitions/VideoType");
var inject = riggerIOC.inject;
var RoomViewLoadSignal_1 = require("../../../roomModule/signals/RoomViewLoadSignal");
var LoadingView = /** @class */ (function (_super) {
    __extends(LoadingView, _super);
    function LoadingView() {
        var _this = _super.call(this) || this;
        _this.currentV = 0;
        _this.isCache = false;
        return _this;
    }
    LoadingView.getUrl = function () {
        return FUILoadingView_1.default.URL;
    };
    LoadingView.prototype.onInit = function () {
        this.initLogo();
        // Laya.stage.frameRate = 'fast';
        this.progressMaskWidth(1);
    };
    /**生成logo动画 */
    LoadingView.prototype.initLogo = function () {
        // logo
        var loadingVideoPlayer = new VideoPlayerView_1.default();
        var params = new VideoPlayerView_1.VideoPlayerViewParams();
        params.url = "res/spine/loading/loading.sk";
        params.type = VideoType_1.VideoType.Skeleton;
        params.screenMode = ScreenMode_1.ScreenMode.None;
        loadingVideoPlayer.init(params);
        loadingVideoPlayer.setScale(1, 1);
        loadingVideoPlayer.play("1", true);
        loadingVideoPlayer.setXY(0, 0);
        this.contentPane.m_content.m_logoBox.addChild(loadingVideoPlayer);
    };
    LoadingView.prototype.layout = function () {
        // lbg
        var lbgGroup = new riggerLayout.Group(this.contentPane.m_bgl);
        lbgGroup.name = "lbgGroup";
        lbgGroup.horizontalCenter = 0;
        lbgGroup.verticalCenter = 0;
        lbgGroup.width = riggerLayout.LayoutSpec.create(1334 / 750, -1, "100%");
        lbgGroup.height = riggerLayout.LayoutSpec.create(1, 1334 / 750, "100%");
        RiggerLayout.layer.addChild(lbgGroup);
        var contentGroup = new riggerLayout.Group(this.contentPane.m_content);
        contentGroup.horizontalCenter = 0;
        contentGroup.verticalCenter = 0;
        contentGroup.width = riggerLayout.LayoutSpec.create(-1, 1334 / 750, '95%');
        contentGroup.height = riggerLayout.LayoutSpec.create(1334 / 750, -1, '95%');
        RiggerLayout.layer.addChild(contentGroup);
    };
    LoadingView.prototype.removeLayout = function () {
        RiggerLayout.layer.remove(this.contentPane.m_bgl);
        RiggerLayout.layer.remove(this.contentPane.m_content);
    };
    LoadingView.prototype.onShown = function () {
        _super.prototype.onShown.call(this);
    };
    LoadingView.prototype.onHide = function () {
        _super.prototype.onHide.call(this);
        this.removeLayout();
        // Laya.stage.frameRate = 'slow';
    };
    Object.defineProperty(LoadingView.prototype, "progress", {
        get: function () {
            if (this.currentV >= 100) {
                this.roomViewLoadSignal.dispatch();
            }
            return this.currentV;
        },
        /**
         * 进度值
         */
        set: function (v) {
            // this.contentPane.m_content.m_barView.value = v;
            this.progressMaskWidth(v);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 进度条遮罩宽度
     * @param v
     */
    LoadingView.prototype.progressMaskWidth = function (v) {
        v = Math.ceil(v);
        if (v >= 100)
            v = 100;
        this.currentV = v;
        var ratio = v / 100;
        var width = this.contentPane.m_content.m_barView.m_barMaskView.m_bar.width * ratio;
        this.contentPane.m_content.m_barView.m_barMaskView.m_mask.width = width;
        this.contentPane.m_content.m_barView.m_barMaskView.width = width;
        this.contentPane.m_content.m_barView.m_title.text = v + "%";
    };
    __decorate([
        inject(RoomViewLoadSignal_1.default)
    ], LoadingView.prototype, "roomViewLoadSignal", void 0);
    return LoadingView;
}(AbstractLoadingView_1.default));
exports.default = LoadingView;
},{"../../../../commonView/VideoPlayerView":51,"../../../../definitions/ScreenMode":68,"../../../../definitions/VideoType":69,"../../../../fui/loading/FUILoadingView":104,"../../../roomModule/signals/RoomViewLoadSignal":250,"./AbstractLoadingView":172}],175:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 公用加载界面
 */
var AbstractLoadingView_1 = require("./AbstractLoadingView");
var FUILoadingView_1 = require("../../../../fui/loading/FUILoadingView");
var ScreenMode_1 = require("../../../../definitions/ScreenMode");
var VideoPlayerView_1 = require("../../../../commonView/VideoPlayerView");
var VideoType_1 = require("../../../../definitions/VideoType");
var LoadingView = /** @class */ (function (_super) {
    __extends(LoadingView, _super);
    function LoadingView() {
        var _this = _super.call(this) || this;
        _this.currentV = 0;
        _this.isCache = false;
        return _this;
    }
    LoadingView.getUrl = function () {
        return FUILoadingView_1.default.URL;
    };
    LoadingView.prototype.onInit = function () {
        this.initLogo();
        // Laya.stage.frameRate = 'fast';
        this.progressMaskWidth(1);
    };
    /**生成logo动画 */
    LoadingView.prototype.initLogo = function () {
        // logo
        var loadingVideoPlayer = new VideoPlayerView_1.default();
        var params = new VideoPlayerView_1.VideoPlayerViewParams();
        params.url = "res/spine/loading/loading.sk";
        params.type = VideoType_1.VideoType.Skeleton;
        params.screenMode = ScreenMode_1.ScreenMode.None;
        loadingVideoPlayer.init(params);
        loadingVideoPlayer.setScale(1, 1);
        loadingVideoPlayer.play("1", true);
        loadingVideoPlayer.setXY(0, 0);
        this.contentPane.m_content.m_logoBox.addChild(loadingVideoPlayer);
    };
    LoadingView.prototype.layout = function () {
        // lbg
        var lbgGroup = new riggerLayout.Group(this.contentPane.m_bgl);
        lbgGroup.name = "lbgGroup";
        lbgGroup.horizontalCenter = 0;
        lbgGroup.verticalCenter = 0;
        lbgGroup.width = riggerLayout.LayoutSpec.create(1334 / 750, -1, "100%");
        lbgGroup.height = riggerLayout.LayoutSpec.create(1, 1334 / 750, "100%");
        RiggerLayout.layer.addChild(lbgGroup);
        var contentGroup = new riggerLayout.Group(this.contentPane.m_content);
        contentGroup.horizontalCenter = 0;
        contentGroup.verticalCenter = 0;
        contentGroup.width = riggerLayout.LayoutSpec.create(-1, 1334 / 750, '95%');
        contentGroup.height = riggerLayout.LayoutSpec.create(1334 / 750, -1, '95%');
        RiggerLayout.layer.addChild(contentGroup);
    };
    LoadingView.prototype.removeLayout = function () {
        RiggerLayout.layer.remove(this.contentPane.m_bgl);
        RiggerLayout.layer.remove(this.contentPane.m_content);
    };
    LoadingView.prototype.onShown = function () {
        _super.prototype.onShown.call(this);
    };
    LoadingView.prototype.onHide = function () {
        _super.prototype.onHide.call(this);
        this.removeLayout();
        // Laya.stage.frameRate = 'slow';
    };
    Object.defineProperty(LoadingView.prototype, "progress", {
        get: function () {
            // return 0;
            return this.currentV;
        },
        /**
         * 进度值
         */
        set: function (v) {
            // this.contentPane.m_content.m_barView.value = v;
            this.progressMaskWidth(v);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 进度条遮罩宽度
     * @param v
     */
    LoadingView.prototype.progressMaskWidth = function (v) {
        v = Math.ceil(v);
        if (v >= 100)
            v = 100;
        this.currentV = v;
        var ratio = v / 100;
        var width = this.contentPane.m_content.m_barView.m_barMaskView.m_bar.width * ratio;
        this.contentPane.m_content.m_barView.m_barMaskView.m_mask.width = width;
        this.contentPane.m_content.m_barView.m_barMaskView.width = width;
        this.contentPane.m_content.m_barView.m_title.text = v + "%";
    };
    return LoadingView;
}(AbstractLoadingView_1.default));
exports.default = LoadingView;
},{"../../../../commonView/VideoPlayerView":51,"../../../../definitions/ScreenMode":68,"../../../../definitions/VideoType":69,"../../../../fui/loading/FUILoadingView":104,"./AbstractLoadingView":172}],176:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
*
*/
///<reference path = "AbstractLoadingView.ts" />
///<reference path = "LoadingView.ts" />
///<reference path = "../../signals/AssetsLoadingProgressChangeSignal.ts" />
///<reference path = "../../signals/AssetsLoadingCompleteSignal.ts" />
var AbstractLoadingView_1 = require("./AbstractLoadingView");
var AssetsLoadingProgressChangeSignal_1 = require("../../signals/AssetsLoadingProgressChangeSignal");
var AssetsLoadingCompleteSignal_1 = require("../../signals/AssetsLoadingCompleteSignal");
var LoadingViewMediator = /** @class */ (function (_super) {
    __extends(LoadingViewMediator, _super);
    function LoadingViewMediator() {
        return _super.call(this) || this;
    }
    LoadingViewMediator.prototype.onInit = function () {
        this.progressSignal.on(this, this.onProgressUpdate);
        this.view.onComplete(this, this.onCompleteHandler);
    };
    LoadingViewMediator.prototype.onShown = function () {
    };
    LoadingViewMediator.prototype.onHide = function () {
    };
    LoadingViewMediator.prototype.dispose = function () {
        this.view = null;
        this.progressSignal.dispose();
        this.progressSignal = null;
        this.loadCompleteSignal.dispose();
        this.loadCompleteSignal = null;
    };
    LoadingViewMediator.prototype.onProgressUpdate = function (v) {
        this.view.setProgress(v);
    };
    LoadingViewMediator.prototype.onCompleteHandler = function () {
        this.loadCompleteSignal.dispatch();
    };
    __decorate([
        riggerIOC.inject(AbstractLoadingView_1.default)
    ], LoadingViewMediator.prototype, "view", void 0);
    __decorate([
        riggerIOC.inject(AssetsLoadingProgressChangeSignal_1.default)
    ], LoadingViewMediator.prototype, "progressSignal", void 0);
    __decorate([
        riggerIOC.inject(AssetsLoadingCompleteSignal_1.default)
    ], LoadingViewMediator.prototype, "loadCompleteSignal", void 0);
    return LoadingViewMediator;
}(riggerIOC.Mediator));
exports.default = LoadingViewMediator;
},{"../../signals/AssetsLoadingCompleteSignal":169,"../../signals/AssetsLoadingProgressChangeSignal":170,"./AbstractLoadingView":172}],177:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var TipView_1 = require("./views/TipView");
var BriefServer_1 = require("./servers/BriefServer");
/** 简要模块上下文 */
var BriefContext = /** @class */ (function (_super) {
    __extends(BriefContext, _super);
    function BriefContext(appContext) {
        return _super.call(this, appContext) || this;
    }
    BriefContext.prototype.dispose = function () {
    };
    BriefContext.prototype.bindInjections = function () {
        this.injectionBinder.bind(TipView_1.default).toSingleton();
        this.injectionBinder.bind(BriefServer_1.default).toSingleton();
    };
    BriefContext.prototype.bindCommands = function () {
    };
    BriefContext.prototype.bindMediators = function () {
    };
    BriefContext.prototype.onStart = function () {
        this.doneCommand.execute();
    };
    return BriefContext;
}(riggerIOC.ModuleContext));
exports.default = BriefContext;
},{"./servers/BriefServer":179,"./views/TipView":187}],178:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var briefUIBinder_1 = require("../../fui/briefUI/briefUIBinder");
var HelpView_1 = require("./views/HelpView");
var FUIhelpView_1 = require("../../fui/briefUI/FUIhelpView");
var FUISettingView_1 = require("../../fui/briefUI/FUISettingView");
var SettingView_1 = require("./views/SettingView");
var RankView_1 = require("./views/RankView");
var FUIRankView_1 = require("../../fui/briefUI/FUIRankView");
var FUIInfoView_1 = require("../../fui/briefUI/FUIInfoView");
var InfoView_1 = require("./views/InfoView");
var FUIHelpYuPanel_1 = require("../../fui/briefUI/FUIHelpYuPanel");
var FishTypeHelpView_1 = require("./views/FishTypeHelpView");
/**
 * Common包类需要进行的自定义扩展放在这
 */
var briefConfig = /** @class */ (function () {
    function briefConfig() {
        rigger.service.FairyGUIPackagePlugin.packageMap["briefUIBinder"] = briefUIBinder_1.default;
        rigger.service.FairyGUIPackagePlugin.packageMap["briefUI"] = this;
        rigger.service.PackageUrlPlugin.packageMap["briefUI"] = this;
    }
    briefConfig.prototype.bindCustom = function () {
        fairygui.UIObjectFactory.setPackageItemExtension(FUIhelpView_1.default.URL, HelpView_1.default);
        fairygui.UIObjectFactory.setPackageItemExtension(FUIRankView_1.default.URL, RankView_1.default);
        fairygui.UIObjectFactory.setPackageItemExtension(FUISettingView_1.default.URL, SettingView_1.default);
        fairygui.UIObjectFactory.setPackageItemExtension(FUIInfoView_1.default.URL, InfoView_1.default);
        fairygui.UIObjectFactory.setPackageItemExtension(FUIHelpYuPanel_1.default.URL, FishTypeHelpView_1.FishTypeHelpView);
    };
    briefConfig.prototype.getPreLoadingAssets = function () {
        return [
            { url: "res/fui/briefUI/briefUI_atlas0.png", type: Laya.Loader.IMAGE },
            { url: "res/fui/briefUI/briefUI_atlas0_1.png", type: Laya.Loader.IMAGE },
        ];
    };
    return briefConfig;
}());
exports.default = briefConfig;
},{"../../fui/briefUI/FUIHelpYuPanel":76,"../../fui/briefUI/FUIInfoView":77,"../../fui/briefUI/FUIRankView":79,"../../fui/briefUI/FUISettingView":82,"../../fui/briefUI/FUIhelpView":85,"../../fui/briefUI/briefUIBinder":88,"./views/FishTypeHelpView":180,"./views/HelpView":182,"./views/InfoView":183,"./views/RankView":185,"./views/SettingView":186}],179:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var protocol = require("../../../protocol/protocols/protocols");
var NetworkChannelNames_1 = require("../../../definitions/NetworkChannelNames");
var CommandCodes_1 = require("../../../protocol/CommandCodes");
var BriefServer = /** @class */ (function (_super) {
    __extends(BriefServer, _super);
    function BriefServer() {
        var _this = _super.call(this) || this;
        _this.addProtocolListener();
        return _this;
    }
    BriefServer.prototype.addProtocolListener = function () {
    };
    BriefServer.prototype.removeProtocolListener = function () {
    };
    /**
     * 请求排行榜
     * 类型 1-本周 2-上周
     *  */
    BriefServer.prototype.rankReq = function (type) {
        var req = new protocol.RankReq();
        req.type = type;
        rigger.service.NetworkService.instance.send(NetworkChannelNames_1.default.GameChannel, CommandCodes_1.default.PPRankReq, req);
    };
    BriefServer.prototype.dispose = function () {
        // this.loginRespSignal = null;
        // this.loginSuccessSignal = null;
    };
    return BriefServer;
}(riggerIOC.Server));
exports.default = BriefServer;
},{"../../../definitions/NetworkChannelNames":64,"../../../protocol/CommandCodes":271,"../../../protocol/protocols/protocols":272}],180:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var DataMon_1 = require("../../../data/tpls/DataMon");
var FishEnum_1 = require("../../../script/enum/FishEnum");
var FUIHelpYuPanel_1 = require("../../../fui/briefUI/FUIHelpYuPanel");
var FishTypeHelpView = /** @class */ (function (_super) {
    __extends(FishTypeHelpView, _super);
    function FishTypeHelpView() {
        var _this = _super.call(this) || this;
        _this.fishList = [];
        return _this;
    }
    FishTypeHelpView.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
        this.init();
    };
    FishTypeHelpView.prototype.init = function () {
        this.fishList = this.fishTypeList();
        this.m_fishList.itemRenderer = Laya.Handler.create(this, this.renderFishListItem, null, false);
        this.m_fishList.numItems = this.fishList.length;
    };
    /**
     * 鱼列表渲染回调
     * @param index
     * @param item
     */
    FishTypeHelpView.prototype.renderFishListItem = function (index, item) {
        var fishData = DataMon_1.default.getData(this.fishList[index]);
        if ([-1].indexOf(fishData.uiId) != -1)
            fishData.uiId = 1;
        var ui = "ui://briefUI/static_fish_" + fishData.uiId;
        item.m_fishRatioTxt.font = 'ui://75q2l4mud7af729';
        var rate = fishData.rate[0] == fishData.rate[1] ? fishData.rate[0] : fishData.rate[0] + "-" + fishData.rate[1];
        if ([22, 23, 24, 25, 26, 27].indexOf(fishData.fishType) != -1) {
            item.m_nameLoader.visible = true;
            item.m_fishRatioTxt.visible = false;
            item.m_nameLoader.url = "ui://briefUI/fish_" + fishData.fishType + "_name";
        }
        else {
            item.m_nameLoader.visible = true;
            item.m_fishRatioTxt.visible = true;
        }
        item.m_fishLoader.setScale(1, 1);
        switch (fishData.buffType) {
            case FishEnum_1.fishTypeEnum.triStar:
                ui = 'ui://briefUI/static_triStar';
                break;
            case FishEnum_1.fishTypeEnum.four:
                ui = 'ui://briefUI/static_four';
                break;
            case FishEnum_1.fishTypeEnum.jackPot:
                ui = 'ui://briefUI/static_jackPot';
                break;
            case FishEnum_1.fishTypeEnum.catchAll:
                ui = "ui://briefUI/static_catchAll";
                item.m_fishLoader.setScale(2, 2);
                break;
            case FishEnum_1.fishTypeEnum.frozen:
                break;
            case FishEnum_1.fishTypeEnum.boom:
                break;
            default:
                break;
        }
        item.m_fishLoader.url = ui;
        item.m_fishRatioTxt.text = "" + rate;
        item.data = fishData.id;
    };
    /**
     * 返回鱼的种类列表(已去重)
     */
    FishTypeHelpView.prototype.fishTypeList = function () {
        var fishIndexList = DataMon_1.default.getIds();
        var fishType = [];
        var fishTypeList = [];
        for (var i = 0; i < fishIndexList.length; i++) {
            var fishData = DataMon_1.default.getData(fishIndexList[i]);
            if (fishType.indexOf(fishData.fishType) == -1) {
                fishTypeList.push(fishIndexList[i]);
                fishType.push(fishData.fishType);
            }
        }
        return fishTypeList;
    };
    return FishTypeHelpView;
}(FUIHelpYuPanel_1.default));
exports.FishTypeHelpView = FishTypeHelpView;
},{"../../../data/tpls/DataMon":60,"../../../fui/briefUI/FUIHelpYuPanel":76,"../../../script/enum/FishEnum":282}],181:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FUIHelpItem_1 = require("../../../fui/briefUI/FUIHelpItem");
var HelpItem = /** @class */ (function (_super) {
    __extends(HelpItem, _super);
    function HelpItem() {
        return _super.call(this) || this;
    }
    HelpItem.getInstance = function (idx) {
        var item = FUIHelpItem_1.default.createInstance();
        item.m_c1.selectedIndex = idx;
        return item;
    };
    return HelpItem;
}(FUIHelpItem_1.default));
exports.default = HelpItem;
},{"../../../fui/briefUI/FUIHelpItem":72}],182:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FUIhelpView_1 = require("../../../fui/briefUI/FUIhelpView");
var HelpItem_1 = require("./HelpItem");
var HelpView = /** @class */ (function (_super) {
    __extends(HelpView, _super);
    function HelpView() {
        return _super.call(this) || this;
    }
    HelpView.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
        this.init();
    };
    HelpView.prototype.init = function () {
        this.addEventListener();
        this.initList();
    };
    /**生成列表 */
    HelpView.prototype.initList = function () {
        for (var i = 0, len = 3; i < len; i++) {
            var item = HelpItem_1.default.getInstance(i);
            this.m_list.addChild(item);
        }
    };
    /**添加监听 */
    HelpView.prototype.addEventListener = function () {
        for (var i = 0, len = 3; i < len; i++) {
            this["m_top" + i].onClick(this, this.onClick, [i]);
        }
    };
    HelpView.prototype.onClick = function (index) {
        if (index === void 0) { index = 0; }
        this.m_c1.selectedIndex = index;
    };
    /**移除监听 */
    HelpView.prototype.removeEventListener = function () {
        for (var i = 0, len = 3; i < len; i++) {
            this["m_top" + i].offClick(this, this.onClick, [i]);
        }
    };
    return HelpView;
}(FUIhelpView_1.default));
exports.default = HelpView;
},{"../../../fui/briefUI/FUIhelpView":85,"./HelpItem":181}],183:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var inject = riggerIOC.inject;
var FUIInfoView_1 = require("../../../fui/briefUI/FUIInfoView");
var PlayerModel_1 = require("../../playerModule/models/PlayerModel");
var PlayerInfoUpdateSignal_1 = require("../../playerModule/signals/PlayerInfoUpdateSignal");
var DataLv_1 = require("../../../data/tpls/DataLv");
var InfoView = /** @class */ (function (_super) {
    __extends(InfoView, _super);
    function InfoView() {
        return _super.call(this) || this;
    }
    InfoView.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
        this.updata();
        this.playerInfoUpdateSignal.on(this, this.updata);
        this.m_tipBtn.onClick(this, this.changeTip);
    };
    InfoView.prototype.updata = function () {
        // id
        this.m_idNum.text = this.playerModule.playerSelfInfo.userId + '';
        this.m_idText.text = this.playerModule.playerSelfInfo.name + '';
        // balance
        this.m_goldText.text = String(this.playerModule.playerSelfInfo.balance / 100);
        // lv
        var lv = this.playerModule.playerSelfInfo.lv;
        this.m_lvText.text = "v" + lv;
        // exp
        var maxLv = DataLv_1.default.getData(DataLv_1.default.getIds().length).lv;
        var persent;
        var exp = this.playerModule.playerSelfInfo.exp;
        if (lv >= maxLv) {
            persent = 1;
            lv = maxLv;
        }
        else {
            var needExp = DataLv_1.default.getData(lv + 1).exp;
            persent = exp / needExp;
        }
        var width = this.m_exeModule.width * persent;
        this.m_exeNum.text = String(exp);
        this.m_exeText.text = Math.round(persent * 100) + "%";
        if (width == 0)
            width = 1;
        this.m_exeRect.width = width;
        //headImg
        var headImgNum = (lv == 0) ? 1 : DataLv_1.default.getData(lv).headId;
        this.m_headImg.url = "ui://briefUI/bydr_dt_icon_toux" + headImgNum;
    };
    InfoView.prototype.changeTip = function () {
        this.m_tip.visible = !this.m_tip.visible;
    };
    __decorate([
        inject(PlayerModel_1.default)
    ], InfoView.prototype, "playerModule", void 0);
    __decorate([
        inject(PlayerInfoUpdateSignal_1.default)
    ], InfoView.prototype, "playerInfoUpdateSignal", void 0);
    return InfoView;
}(FUIInfoView_1.default));
exports.default = InfoView;
},{"../../../data/tpls/DataLv":59,"../../../fui/briefUI/FUIInfoView":77,"../../playerModule/models/PlayerModel":226,"../../playerModule/signals/PlayerInfoUpdateSignal":228}],184:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FUIRankItem_1 = require("../../../fui/briefUI/FUIRankItem");
var DataLv_1 = require("../../../data/tpls/DataLv");
var RankItem = /** @class */ (function (_super) {
    __extends(RankItem, _super);
    function RankItem() {
        return _super.call(this) || this;
    }
    RankItem.getUrl = function () {
        return FUIRankItem_1.default.URL;
    };
    RankItem.getInstance = function (data) {
        var item = FUIRankItem_1.default.createInstance();
        var rankNum = data.rankNum;
        var name = data.name;
        var goldNum = data.goldNum;
        if (rankNum > 3) {
            item.m_c1.selectedIndex = 1;
            item.m_rankNum.text = String(rankNum);
        }
        else {
            item.m_c1.selectedIndex = 0;
            item.m_rankImg.url = "ui://briefUI/bydr_phb_icon_rank" + rankNum;
        }
        item.m_name.text = data.name;
        item.m_goldNum.text = String(data.goldNum);
        //headImg
        var lv = data.lv;
        var headImgNum = (lv == 0) ? 1 : DataLv_1.default.getData(lv).headId;
        item.m_headImg.url = "ui://briefUI/bydr_dt_icon_toux" + headImgNum;
        //isMe
        item.m_isMe.selectedIndex = (data.isMe) ? 0 : 1;
        return item;
    };
    return RankItem;
}(FUIRankItem_1.default));
exports.default = RankItem;
},{"../../../data/tpls/DataLv":59,"../../../fui/briefUI/FUIRankItem":78}],185:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var inject = riggerIOC.inject;
var RankItem_1 = require("./RankItem");
var signals_1 = require("../../../protocol/signals/signals");
var BriefServer_1 = require("../servers/BriefServer");
var FUIRankView_1 = require("../../../fui/briefUI/FUIRankView");
var PlayerModel_1 = require("../../playerModule/models/PlayerModel");
var RankView = /** @class */ (function (_super) {
    __extends(RankView, _super);
    function RankView() {
        return _super.call(this) || this;
    }
    RankView.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
        this.init();
    };
    RankView.prototype.init = function () {
        this.addEventListener();
        this.rankReq();
    };
    /**添加监听 */
    RankView.prototype.addEventListener = function () {
        for (var i = 0, len = 2; i < len; i++) {
            this["m_t" + i].onClick(this, this.onClicks, [i]);
        }
        this.rankRespSignal.on(this, this.rankResp);
    };
    /**请求列表 */
    RankView.prototype.rankReq = function (type) {
        if (type === void 0) { type = 1; }
        this.briefServer.rankReq(type);
    };
    /**排行榜数据返回 */
    RankView.prototype.rankResp = function (datas) {
        var list = this.rankRegroup(datas.list);
        var info = this.playerModule.playerSelfInfo;
        // 生成列表
        this.m_listContentView.m_list.removeChildren();
        for (var i = 0, len = list.length; i < len; i++) {
            var data = new RankData();
            data.goldNum = list[i].value / 100;
            data.rankNum = list[i].rank;
            data.name = list[i].name;
            data.lv = list[i].lv;
            data.isMe = (info.userId == list[i].userId);
            this.m_listContentView.m_list.addChild(RankItem_1.default.getInstance(data));
        }
    };
    /**
     * 名次重排
     * （由低到高）
     *  */
    RankView.prototype.rankRegroup = function (list) {
        var tempArr = null;
        for (var i = 0, len = list.length; i < len; i++) {
            for (var j = 0, lens = len - 1; j < lens; j++) {
                if (list[i].rank < list[j].rank) {
                    tempArr = list[i];
                    list[i] = list[j];
                    list[j] = tempArr;
                }
            }
        }
        return list;
    };
    RankView.prototype.onClicks = function (index) {
        if (this.m_c1.selectedIndex != index) {
            this.m_c1.selectedIndex = index;
            this.rankReq(index + 1);
        }
    };
    /**移除监听 */
    RankView.prototype.removeEventListener = function () {
        for (var i = 0, len = 2; i < len; i++) {
            this["m_t" + i].offClick(this, this.onClicks, [i]);
        }
        this.rankRespSignal.off(this, this.rankResp);
    };
    __decorate([
        inject(signals_1.RankRespSignal)
    ], RankView.prototype, "rankRespSignal", void 0);
    __decorate([
        inject(BriefServer_1.default)
    ], RankView.prototype, "briefServer", void 0);
    __decorate([
        inject(PlayerModel_1.default)
    ], RankView.prototype, "playerModule", void 0);
    return RankView;
}(FUIRankView_1.default));
exports.default = RankView;
var RankData = /** @class */ (function () {
    function RankData() {
    }
    return RankData;
}());
exports.RankData = RankData;
},{"../../../fui/briefUI/FUIRankView":79,"../../../protocol/signals/signals":273,"../../playerModule/models/PlayerModel":226,"../servers/BriefServer":179,"./RankItem":184}],186:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FUISettingView_1 = require("../../../fui/briefUI/FUISettingView");
var SoundManager_1 = require("../../../manager/SoundManager");
var SettingView = /** @class */ (function (_super) {
    __extends(SettingView, _super);
    function SettingView() {
        return _super.call(this) || this;
    }
    SettingView.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
        this.init();
    };
    SettingView.prototype.init = function () {
        this.addEventListener();
        this.initSoundAndMusicVol();
    };
    /**添加监听 */
    SettingView.prototype.addEventListener = function () {
        this.m_music_slider.on(fairygui.Events.STATE_CHANGED, this, this.handleMusicVolChanged);
        this.m_sound_slider.on(fairygui.Events.STATE_CHANGED, this, this.handleSoundVolChanged);
    };
    /**移除监听 */
    SettingView.prototype.removeEventListener = function () {
    };
    /**初始化音量 */
    SettingView.prototype.initSoundAndMusicVol = function () {
        var localSoundVol = !isNaN(parseInt(Laya.LocalStorage.getItem("soundVol"))) ? parseInt(Laya.LocalStorage.getItem("soundVol")) : 80;
        var localMusicVol = !isNaN(parseInt(Laya.LocalStorage.getItem("musicVol"))) ? parseInt(Laya.LocalStorage.getItem("musicVol")) : 80;
        this.m_sound_slider.value = localSoundVol;
        this.m_music_slider.value = localMusicVol;
    };
    SettingView.prototype.handleMusicVolChanged = function () {
        var localMusicVol = this.m_music_slider.value;
        if (localMusicVol <= 0.005) {
            localMusicVol = 0;
        }
        Laya.LocalStorage.setItem("musicVol", "" + localMusicVol);
        SoundManager_1.default.instance.musicVolume = localMusicVol / 100;
    };
    SettingView.prototype.handleSoundVolChanged = function () {
        var localSoundVol = this.m_sound_slider.value;
        if (localSoundVol <= 0.005) {
            localSoundVol = 0;
        }
        Laya.LocalStorage.setItem("soundVol", "" + localSoundVol);
        SoundManager_1.default.instance.soundVolume = localSoundVol / 100;
        SoundManager_1.default.instance.effectVolume = localSoundVol / 100;
    };
    return SettingView;
}(FUISettingView_1.default));
exports.default = SettingView;
},{"../../../fui/briefUI/FUISettingView":82,"../../../manager/SoundManager":163}],187:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var inject = riggerIOC.inject;
var UIWindow_1 = require("../../../utils/UIWindow");
var FUITipView_1 = require("../../../fui/briefUI/FUITipView");
var UIManager_1 = require("../../../manager/UIManager");
var BriefServer_1 = require("../servers/BriefServer");
var TipView = /** @class */ (function (_super) {
    __extends(TipView, _super);
    function TipView() {
        var _this = _super.call(this) || this;
        _this.needMask = false;
        _this.isCache = true;
        return _this;
    }
    TipView.getUrl = function () {
        return FUITipView_1.default.URL;
    };
    TipView.prototype.onInit = function () {
        _super.prototype.onInit.call(this);
    };
    TipView.prototype.onShown = function () {
        _super.prototype.onShown.call(this);
        this.addEvent();
        this.onResize(UIManager_1.default.instance.changedScreenMode);
    };
    TipView.prototype.funEx = function (index) {
        if (index === void 0) { index = 0; }
        this.contentPane.m_context.m_c1.selectedIndex = index;
        if (index == 1) {
            // 排行榜
            // this.briefServer.rankReq(1);
        }
    };
    /**添加绑定 */
    TipView.prototype.addEvent = function () {
        this.contentPane.m_context.m_closeBtn.onClick(this, this.closer);
    };
    /**移除绑定 */
    TipView.prototype.removeEvent = function () {
        this.contentPane.m_context.m_closeBtn.offClick(this, this.closer);
    };
    TipView.prototype.onHide = function () {
        _super.prototype.onHide.call(this);
        this.removeEvent();
    };
    TipView.prototype.closer = function () {
        UIManager_1.default.instance.hideWindow(this);
    };
    TipView.prototype.layout = function () {
        var contextGroup = new riggerLayout.Group(this.contentPane.m_context);
        contextGroup.name = 'contextGroup';
        contextGroup.height = RiggerLayoutHelper.createScreenL("100%");
        contextGroup.width = RiggerLayoutHelper.createScreenP("110%");
        contextGroup.horizontalCenter = 0;
        contextGroup.verticalCenter = 0;
        RiggerLayout.layer.addChild(contextGroup);
    };
    /**移除适配 */
    TipView.prototype.removeLayout = function () {
        RiggerLayout.layer.remove(this.contentPane.m_context);
    };
    TipView.prototype.onResize = function (changedScreenMode) {
    };
    TipView.prototype.dispose = function () {
        // super.dispose();
    };
    __decorate([
        inject(BriefServer_1.default)
    ], TipView.prototype, "briefServer", void 0);
    return TipView;
}(UIWindow_1.default));
exports.default = TipView;
},{"../../../fui/briefUI/FUITipView":84,"../../../manager/UIManager":164,"../../../utils/UIWindow":305,"../servers/BriefServer":179}],188:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var entryBinder_1 = require("../../fui/entry/entryBinder");
var FUIMenuView_1 = require("../../fui/entry/FUIMenuView");
var EntryMenuView_1 = require("../../moduleContexts/entryModule/views/EntryMenuView");
/**
 * Common包类需要进行的自定义扩展放在这
 */
var EntryConfig = /** @class */ (function () {
    function EntryConfig() {
        rigger.service.FairyGUIPackagePlugin.packageMap["entryBinder"] = entryBinder_1.default;
        rigger.service.FairyGUIPackagePlugin.packageMap["entry"] = this;
        rigger.service.PackageUrlPlugin.packageMap["entry"] = this;
    }
    EntryConfig.prototype.bindCustom = function () {
        fairygui.UIObjectFactory.setPackageItemExtension(FUIMenuView_1.default.URL, EntryMenuView_1.default);
    };
    EntryConfig.prototype.getPreLoadingAssets = function () {
        return [
            { url: "res/fui/entry/entry_atlas0.png", type: Laya.Loader.IMAGE },
            { url: "res/fui/entry/entry_atlas0_1.png", type: Laya.Loader.IMAGE },
            { url: "res/fui/entry/entry_atlas_vv7ubm.png", type: Laya.Loader.IMAGE },
            { url: "res/fui/entry/entry_atlas_rhqcbn.png", type: Laya.Loader.IMAGE },
            // 大厅背景动画
            { url: "res/spine/dating/dating.sk", type: Laya.Loader.BUFFER },
            { url: "res/spine/dating/dating.png", type: Laya.Loader.IMAGE },
            // 图标动画
            { url: "res/spine/icon/icon.png", type: Laya.Loader.IMAGE },
            { url: "res/spine/icon/icon2.png", type: Laya.Loader.IMAGE },
            { url: "res/spine/icon/icon.sk", type: Laya.Loader.BUFFER }
        ];
    };
    return EntryConfig;
}());
exports.default = EntryConfig;
},{"../../fui/entry/FUIMenuView":96,"../../fui/entry/entryBinder":98,"../../moduleContexts/entryModule/views/EntryMenuView":197}],189:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var UIManager_1 = require("../../../manager/UIManager");
var TipView_1 = require("../../briefModule/views/TipView");
/**
 * 打开帮助弹窗命令
 */
var OpenHelpCommand = /** @class */ (function (_super) {
    __extends(OpenHelpCommand, _super);
    function OpenHelpCommand() {
        return _super.call(this) || this;
    }
    OpenHelpCommand.prototype.execute = function () {
        UIManager_1.default.instance.showWindow(TipView_1.default, true, UIManager_1.default.instance.popupLayer, [2]);
        this.done();
    };
    return OpenHelpCommand;
}(riggerIOC.Command));
exports.default = OpenHelpCommand;
},{"../../../manager/UIManager":164,"../../briefModule/views/TipView":187}],190:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var UIManager_1 = require("../../../manager/UIManager");
var TipView_1 = require("../../briefModule/views/TipView");
/**
 * 打开设置弹窗命令
 */
var OpenSetCommand = /** @class */ (function (_super) {
    __extends(OpenSetCommand, _super);
    function OpenSetCommand() {
        return _super.call(this) || this;
    }
    OpenSetCommand.prototype.execute = function () {
        UIManager_1.default.instance.showWindow(TipView_1.default, true, UIManager_1.default.instance.popupLayer, [0]);
        this.done();
    };
    return OpenSetCommand;
}(riggerIOC.Command));
exports.default = OpenSetCommand;
},{"../../../manager/UIManager":164,"../../briefModule/views/TipView":187}],191:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Utils_1 = require("../../../utils/Utils");
var ConnectService_1 = require("../../../gameServices/connectService/ConnectService");
var openReportCommand = /** @class */ (function (_super) {
    __extends(openReportCommand, _super);
    function openReportCommand() {
        return _super.call(this) || this;
    }
    openReportCommand.prototype.execute = function () {
        if (Utils_1.default.isInLobby()) {
            var website = ConnectService_1.default.instance._getMetaValue("recordUrl");
            if (website) {
                document.location.href = "jplobby://cmd=openReport//url=" + website;
            }
        }
        else {
            Utils_1.default.IS_SHOW_LOG = true;
        }
        this.done();
    };
    return openReportCommand;
}(riggerIOC.Command));
exports.default = openReportCommand;
},{"../../../gameServices/connectService/ConnectService":160,"../../../utils/Utils":306}],192:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
* 大厅上下文
*/
var EntryServer_1 = require("./servers/EntryServer");
var EntryView_1 = require("./views/EntryView");
var openReportSignal_1 = require("./signals/openReportSignal");
var openReportCommand_1 = require("./commands/openReportCommand");
var OpenHelpViewSignal_1 = require("./signals/OpenHelpViewSignal");
var OpenSetViewSignal_1 = require("./signals/OpenSetViewSignal");
var OpenHelpCommand_1 = require("./commands/OpenHelpCommand");
var OpenSetCommand_1 = require("./commands/OpenSetCommand");
var EntryContext = /** @class */ (function (_super) {
    __extends(EntryContext, _super);
    function EntryContext(appContext) {
        return _super.call(this, appContext) || this;
    }
    EntryContext.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
    };
    EntryContext.prototype.bindInjections = function () {
        this.injectionBinder.bind(EntryView_1.default).toSingleton();
        this.injectionBinder.bind(EntryServer_1.default).toSingleton();
        this.injectionBinder.bind(openReportSignal_1.default).toSingleton();
        this.injectionBinder.bind(OpenHelpViewSignal_1.default).toSingleton();
        this.injectionBinder.bind(OpenSetViewSignal_1.default).toSingleton();
    };
    EntryContext.prototype.bindCommands = function () {
        this.commandBinder.bind(openReportSignal_1.default).to(openReportCommand_1.default);
        this.commandBinder.bind(OpenHelpViewSignal_1.default).to(OpenHelpCommand_1.default);
        this.commandBinder.bind(OpenSetViewSignal_1.default).to(OpenSetCommand_1.default);
    };
    EntryContext.prototype.bindMediators = function () {
    };
    EntryContext.prototype.onStart = function () {
        this.doneCommand.execute();
    };
    return EntryContext;
}(riggerIOC.ModuleContext));
exports.default = EntryContext;
},{"./commands/OpenHelpCommand":189,"./commands/OpenSetCommand":190,"./commands/openReportCommand":191,"./servers/EntryServer":193,"./signals/OpenHelpViewSignal":194,"./signals/OpenSetViewSignal":195,"./signals/openReportSignal":196,"./views/EntryView":198}],193:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var EntryServer = /** @class */ (function (_super) {
    __extends(EntryServer, _super);
    function EntryServer() {
        var _this = _super.call(this) || this;
        _this.addProtocolListener();
        return _this;
    }
    EntryServer.prototype.addProtocolListener = function () {
    };
    EntryServer.prototype.removeProtocolListener = function () {
    };
    EntryServer.prototype.dispose = function () {
        // this.loginRespSignal = null;
        // this.loginSuccessSignal = null;
    };
    return EntryServer;
}(riggerIOC.Server));
exports.default = EntryServer;
},{}],194:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 打开帮助弹窗信号
 */
var OpenHelpViewSignal = /** @class */ (function (_super) {
    __extends(OpenHelpViewSignal, _super);
    function OpenHelpViewSignal() {
        return _super.call(this) || this;
    }
    return OpenHelpViewSignal;
}(riggerIOC.Signal));
exports.default = OpenHelpViewSignal;
},{}],195:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 打开设置弹窗
 */
var OpenSetViewSignal = /** @class */ (function (_super) {
    __extends(OpenSetViewSignal, _super);
    function OpenSetViewSignal() {
        return _super.call(this) || this;
    }
    return OpenSetViewSignal;
}(riggerIOC.Signal));
exports.default = OpenSetViewSignal;
},{}],196:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 打开报表的信号
 */
var openReportSignal = /** @class */ (function (_super) {
    __extends(openReportSignal, _super);
    function openReportSignal() {
        return _super.call(this) || this;
    }
    return openReportSignal;
}(riggerIOC.Signal));
exports.default = openReportSignal;
},{}],197:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var FUIMenuView_1 = require("../../../fui/entry/FUIMenuView");
var UIManager_1 = require("../../../manager/UIManager");
var TipView_1 = require("../../briefModule/views/TipView");
var ConnectService_1 = require("../../../gameServices/connectService/ConnectService");
var inject = riggerIOC.inject;
var openReportSignal_1 = require("../signals/openReportSignal");
var OpenHelpViewSignal_1 = require("../signals/OpenHelpViewSignal");
var OpenSetViewSignal_1 = require("../signals/OpenSetViewSignal");
var OnClickReturnBtnSignal_1 = require("../../loginModule/signals/OnClickReturnBtnSignal");
var InfoView = /** @class */ (function (_super) {
    __extends(InfoView, _super);
    function InfoView() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.menuBtnName = ['bydr_dt_btn_shezhi', 'bydr_dt_btn_paihang', 'bydr_dt_btn_bangzhu', 'bydr_dt_btn_baobiao',
            'bydr_dt_btn_dt'];
        return _this;
    }
    InfoView.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
        this.init();
        this.addEventListener();
    };
    InfoView.prototype.init = function () {
        this.m_settingBtnList.itemRenderer = Laya.Handler.create(this, this.onRender, null, false);
        this.m_settingBtnList.numItems = this.menuBtnName.length;
        var recordBtn = this.m_settingBtnList.getChild('bydr_dt_btn_baobiao');
        var lobbyBtn = this.m_settingBtnList.getChild('bydr_dt_btn_dt');
        if (!ConnectService_1.default.instance._getMetaValue('recordUrl'))
            recordBtn && this.m_settingBtnList.removeChild(recordBtn);
        if (Laya.Browser.onPC || !ConnectService_1.default.instance.lobbyUrl)
            lobbyBtn && this.m_settingBtnList.removeChild(lobbyBtn);
    };
    InfoView.prototype.addEventListener = function () {
        this.m_settingBtnList.on(fairygui.Events.CLICK_ITEM, this, this.onClickItem);
    };
    InfoView.prototype.removeEventListener = function () {
        this.m_settingBtnList.off(fairygui.Events.CLICK_ITEM, this, this.onClickItem);
    };
    InfoView.prototype.onRender = function (idx, item) {
        if (item) {
            item.m_n10.url = 'ui://entry/' + this.menuBtnName[idx];
            item.name = this.menuBtnName[idx];
        }
    };
    InfoView.prototype.onClickItem = function (item) {
        var name = item.name;
        if (!name)
            return;
        switch (name) {
            case 'bydr_dt_btn_shezhi':
                this.openSetViewSignal.dispatch();
                break;
            case 'bydr_dt_btn_paihang':
                UIManager_1.default.instance.showWindow(TipView_1.default, true, UIManager_1.default.instance.popupLayer, [1]);
                break;
            case 'bydr_dt_btn_bangzhu':
                this.openHelpViewSignal.dispatch();
                break;
            case 'bydr_dt_btn_baobiao':
                this.openReportSignal.dispatch();
                break;
            case 'bydr_dt_btn_dt':
                this.onClickReturnBtnSignal.dispatch();
                break;
            default:
                break;
        }
    };
    InfoView.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this.removeEventListener();
    };
    __decorate([
        inject(openReportSignal_1.default)
    ], InfoView.prototype, "openReportSignal", void 0);
    __decorate([
        inject(OpenHelpViewSignal_1.default)
    ], InfoView.prototype, "openHelpViewSignal", void 0);
    __decorate([
        inject(OpenSetViewSignal_1.default)
    ], InfoView.prototype, "openSetViewSignal", void 0);
    __decorate([
        inject(OnClickReturnBtnSignal_1.default)
    ], InfoView.prototype, "onClickReturnBtnSignal", void 0);
    return InfoView;
}(FUIMenuView_1.default));
exports.default = InfoView;
},{"../../../fui/entry/FUIMenuView":96,"../../../gameServices/connectService/ConnectService":160,"../../../manager/UIManager":164,"../../briefModule/views/TipView":187,"../../loginModule/signals/OnClickReturnBtnSignal":220,"../signals/OpenHelpViewSignal":194,"../signals/OpenSetViewSignal":195,"../signals/openReportSignal":196}],198:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var inject = riggerIOC.inject;
var UIWindow_1 = require("../../../utils/UIWindow");
var FUIEntryView_1 = require("../../../fui/entry/FUIEntryView");
var FUIEntryItem_1 = require("../../../fui/entry/FUIEntryItem");
var ScreenMode_1 = require("../../../definitions/ScreenMode");
var PlayerModel_1 = require("../../playerModule/models/PlayerModel");
var EntryServer_1 = require("../../../moduleContexts/entryModule/servers/EntryServer");
var EnterRoomSignal_1 = require("../../roomModule/signals/EnterRoomSignal");
var PlayerInfoUpdateSignal_1 = require("../../playerModule/signals/PlayerInfoUpdateSignal");
var UIManager_1 = require("../../../manager/UIManager");
var VideoPlayerView_1 = require("../../../commonView/VideoPlayerView");
var VideoType_1 = require("../../../definitions/VideoType");
var PlayerServer_1 = require("../../playerModule/servers/PlayerServer");
var TipView_1 = require("../../briefModule/views/TipView");
var DataLv_1 = require("../../../data/tpls/DataLv");
var BalanceUpdateSignal_1 = require("../../roomModule/signals/BalanceUpdateSignal");
var EntryView = /** @class */ (function (_super) {
    __extends(EntryView, _super);
    function EntryView() {
        var _this = _super.call(this) || this;
        /**list */
        _this.nameArr = ["cj", "zj", "gj"];
        _this.needMask = false;
        _this.isCache = true;
        return _this;
    }
    EntryView.getUrl = function () {
        return FUIEntryView_1.default.URL;
    };
    EntryView.prototype.onInit = function () {
        _super.prototype.onInit.call(this);
        this.createAni();
        this.createList();
    };
    EntryView.prototype.onShown = function () {
        _super.prototype.onShown.call(this);
        this.onResize(UIManager_1.default.instance.changedScreenMode);
        this.addEvent();
        this.playerServer.userInfoReq();
    };
    /**添加绑定 */
    EntryView.prototype.addEvent = function () {
        this.playerInfoUpdateSignal.on(this, this.updata);
        this.balanceUpdateSignal.on(this, this.onBalanceUpdate);
        this.contentPane.m_infoview.m_headBox.onClick(this, this.showInfoView);
        this.contentPane.m_context.on(fairygui.Events.CLICK_ITEM, this, this.clickList);
    };
    /**移除绑定 */
    EntryView.prototype.removeEvent = function () {
        this.playerInfoUpdateSignal.off(this, this.updata);
        this.balanceUpdateSignal.off(this, this.onBalanceUpdate);
        this.contentPane.m_infoview.m_headBox.offClick(this, this.showInfoView);
        this.contentPane.m_context.off(fairygui.Events.CLICK_ITEM, this, this.clickList);
    };
    /**背景动画 */
    EntryView.prototype.createAni = function () {
        var player = new VideoPlayerView_1.default();
        var params = new VideoPlayerView_1.VideoPlayerViewParams();
        params.url = "res/spine/dating/dating.sk";
        params.type = VideoType_1.VideoType.Skeleton;
        params.screenMode = ScreenMode_1.ScreenMode.None;
        player.init(params);
        player.setScale(1, 1);
        player.play("1", true);
        this.contentPane.m_bgAniBox.addChild(player);
    };
    EntryView.prototype.createList = function () {
        // 动画参数
        var params = new VideoPlayerView_1.VideoPlayerViewParams();
        params.url = "res/spine/icon/icon.sk";
        params.type = VideoType_1.VideoType.Skeleton;
        params.screenMode = ScreenMode_1.ScreenMode.None;
        for (var i = 0, len = 3; i < len; i++) {
            var icon = FUIEntryItem_1.default.createInstance();
            var player = new VideoPlayerView_1.default();
            player.init(params);
            player.setScale(1, 1);
            player.play(i + 1 + "", true);
            icon.name = this.nameArr[i];
            icon.addChild(player);
            this.contentPane.m_context.addChild(icon);
        }
    };
    /**点击列表 */
    EntryView.prototype.clickList = function (btn) {
        var name = btn.name;
        var index = 0;
        switch (name) {
            case "cj":
                index = 1;
                break;
            case "zj":
                index = 2;
                break;
            case "gj":
                index = 3;
                break;
        }
        this.reqEnterRoom(index);
    };
    /**更新玩家数据 */
    EntryView.prototype.updata = function () {
        var maxLv = DataLv_1.default.getData(DataLv_1.default.getIds().length).lv;
        var info = this.playerModule.playerSelfInfo;
        var view = this.contentPane.m_infoview.m_headBox;
        var exp = this.playerModule.playerSelfInfo.exp;
        var curLv = info.lv;
        var persent;
        if (curLv >= maxLv) {
            persent = 1;
            curLv = maxLv;
        }
        else {
            var needExp = DataLv_1.default.getData(curLv + 1).exp;
            persent = exp / needExp;
        }
        var width = view.m_exeModule.width * persent;
        if (width == 0)
            width = 1;
        view.m_lvNum.text = "v" + curLv;
        view.m_idText.text = "" + info.name;
        view.m_persentText.text = Math.round(persent * 100) + "%";
        view.m_exeRect.width = width;
        var headImgNum = (curLv == 0) ? 1 : DataLv_1.default.getData(curLv).headId;
        view.m_headImg.url = "ui://briefUI/bydr_dt_icon_toux" + headImgNum;
        this.contentPane.m_infoview.m_goldText.text = "" + (info.balance / 100).toFixed(2);
    };
    /**玩家余额更新,处理充值更新 */
    EntryView.prototype.onBalanceUpdate = function (_a) {
        var id = _a[0], change = _a[1];
        if (id == this.playerModule.playerSelfInfo.userId) {
            this.contentPane.m_infoview.m_goldText.text = "" + (this.playerModule.playerSelfInfo.balance / 100).toFixed(2);
        }
    };
    /**点击请求进入房间 */
    EntryView.prototype.reqEnterRoom = function (index) {
        this.enterRoomSignal.dispatch(index);
    };
    /**显示信息面板 */
    EntryView.prototype.showInfoView = function () {
        UIManager_1.default.instance.showWindow(TipView_1.default, true, UIManager_1.default.instance.popupLayer, [3]);
    };
    /**适配 */
    EntryView.prototype.layout = function () {
        // 横背景
        var bgGroup = new riggerLayout.Group(this.contentPane.m_bg);
        bgGroup.name = 'bgGroup';
        bgGroup.height = riggerLayout.LayoutSpec.create(1, 1334 / 750, "100%");
        bgGroup.width = [
            riggerLayout.LayoutSpec.create(1334 / 750, -1, "100%"),
            riggerLayout.LayoutSpec.create(-1, 1, "100%"),
        ];
        bgGroup.verticalCenter = RiggerLayoutHelper.createScreenL("0%");
        bgGroup.horizontalCenter = 0;
        bgGroup.top = RiggerLayoutHelper.createScreenP(110);
        RiggerLayout.layer.addChild(bgGroup);
        // 横背景
        var bgAniGroup = new riggerLayout.Group(this.contentPane.m_bgAniBox);
        bgAniGroup.name = 'bgAniGroup';
        bgAniGroup.height = riggerLayout.LayoutSpec.create(1, 1334 / 750, "100%");
        bgAniGroup.width = [
            riggerLayout.LayoutSpec.create(1334 / 750, -1, "100%"),
            riggerLayout.LayoutSpec.create(-1, 1, "100%"),
        ];
        bgAniGroup.verticalCenter = RiggerLayoutHelper.createScreenL("0%");
        bgAniGroup.horizontalCenter = 0;
        bgAniGroup.top = RiggerLayoutHelper.createScreenP(110);
        RiggerLayout.layer.addChild(bgAniGroup);
        // 竖背景
        var bg2Group = new riggerLayout.Group(this.contentPane.m_bg2);
        bg2Group.name = 'bg2Group';
        bg2Group.height = riggerLayout.LayoutSpec.create(-1, 750 / 1334, "100%");
        bg2Group.width = riggerLayout.LayoutSpec.create(750 / 1334, 1, "100%");
        RiggerLayout.layer.addChild(bg2Group);
        // 信息
        var infoGroup = new riggerLayout.Group(this.contentPane.m_infoview);
        infoGroup.name = 'infoGroup';
        infoGroup.width = [
            riggerLayout.LayoutSpec.create(1, 1334 / 750, "72%"),
            riggerLayout.LayoutSpec.create(-1, 1, "100%")
        ];
        infoGroup.height = riggerLayout.LayoutSpec.create(1334 / 750, -1, "33.3%");
        RiggerLayout.layer.addChild(infoGroup);
        // list
        var contextGroup = new riggerLayout.Group(this.contentPane.m_context);
        contextGroup.name = 'contextGroup';
        contextGroup.horizontalCenter = 0;
        contextGroup.verticalCenter = RiggerLayoutHelper.createScreenL("0%");
        contextGroup.width = [
            riggerLayout.LayoutSpec.create(1, 1334 / 750, "83.5%"),
            riggerLayout.LayoutSpec.create(-1, 1, "83.5%")
        ];
        contextGroup.height = riggerLayout.LayoutSpec.create(1334 / 750, -1, "52.2%");
        contextGroup.top = RiggerLayoutHelper.createScreenP(150);
        RiggerLayout.layer.addChild(contextGroup);
        // 菜单
        var menuGroup = new riggerLayout.Group(this.contentPane.m_menu);
        menuGroup.name = 'menuGroup';
        menuGroup.top = RiggerLayoutHelper.createScreenL("1.5%");
        menuGroup.right = RiggerLayoutHelper.createScreenL("1%");
        menuGroup.height = [
            RiggerLayoutHelper.createScreenL("74%"),
            riggerLayout.LayoutSpec.create(750 / 1334, 1, "38.6%")
        ];
        menuGroup.width = riggerLayout.LayoutSpec.create(-1, 750 / 1334, "78.6%");
        menuGroup.horizontalCenter = RiggerLayoutHelper.createScreenP(0);
        menuGroup.bottom = RiggerLayoutHelper.createScreenP("10%");
        RiggerLayout.layer.addChild(menuGroup);
        // jackPot
        // let jkPortGroup: riggerLayout.Group = new riggerLayout.Group(this.contentPane.m_jkPort);
        // jkPortGroup.name = 'jkPortGroup';
        // jkPortGroup.bottom = RiggerLayoutHelper.createScreenL("0.05%");
        // jkPortGroup.left = RiggerLayoutHelper.createScreenL("1.5%");
        // jkPortGroup.top = RiggerLayoutHelper.createScreenP("2%");
        // jkPortGroup.right = RiggerLayoutHelper.createScreenP("4%");
        // jkPortGroup.height = [
        //     RiggerLayoutHelper.createScreenL("23%"),
        //     riggerLayout.LayoutSpec.create(750 / 1334, 1, "13%")
        // ];
        // jkPortGroup.width = [
        //     riggerLayout.LayoutSpec.create(-1, 750 / 1334, "29.2%")
        // ]
        // RiggerLayout.layer.addChild(jkPortGroup);
    };
    /**移除适配 */
    EntryView.prototype.removeLayout = function () {
        RiggerLayout.layer.remove(this.contentPane.m_bg);
        RiggerLayout.layer.remove(this.contentPane.m_bg2);
        RiggerLayout.layer.remove(this.contentPane.m_bgAniBox);
        RiggerLayout.layer.remove(this.contentPane.m_infoview);
        RiggerLayout.layer.remove(this.contentPane.m_context);
        RiggerLayout.layer.remove(this.contentPane.m_menu);
        // RiggerLayout.layer.remove(this.contentPane.m_jkPort);
    };
    /**
     * 屏幕尺寸变化的回调
     */
    EntryView.prototype.onResize = function (changedScreenMode) {
        var infoGroup = RiggerLayout.layer.getElementByName("infoGroup");
        var menuGroup = RiggerLayout.layer.getElementByName("menuGroup");
        var ratio = Laya.stage.width / Laya.stage.height;
        if (ratio == 1 || !this.contentPane)
            return;
        if (ratio > 1) {
            // 横屏
            this.contentPane.m_c1.selectedIndex = 0;
            this.contentPane.m_menu.width = 102;
            this.contentPane.m_menu.height = 567;
        }
        else {
            // 竖屏
            this.contentPane.m_c1.selectedIndex = 1;
            this.contentPane.m_menu.width = 556;
            this.contentPane.m_menu.height = 495;
        }
        infoGroup && infoGroup.onChildRectangleChange();
        menuGroup && menuGroup.onChildRectangleChange();
    };
    EntryView.prototype.onHide = function () {
        _super.prototype.onHide.call(this);
        this.removeEvent();
    };
    EntryView.prototype.dispose = function () {
        this.entryServer = null;
        _super.prototype.dispose.call(this);
    };
    __decorate([
        inject(EntryServer_1.default)
    ], EntryView.prototype, "entryServer", void 0);
    __decorate([
        inject(EnterRoomSignal_1.default)
    ], EntryView.prototype, "enterRoomSignal", void 0);
    __decorate([
        inject(PlayerInfoUpdateSignal_1.default)
    ], EntryView.prototype, "playerInfoUpdateSignal", void 0);
    __decorate([
        inject(PlayerModel_1.default)
    ], EntryView.prototype, "playerModule", void 0);
    __decorate([
        inject(PlayerServer_1.default)
    ], EntryView.prototype, "playerServer", void 0);
    __decorate([
        inject(BalanceUpdateSignal_1.default)
    ], EntryView.prototype, "balanceUpdateSignal", void 0);
    return EntryView;
}(UIWindow_1.default));
exports.default = EntryView;
},{"../../../commonView/VideoPlayerView":51,"../../../data/tpls/DataLv":59,"../../../definitions/ScreenMode":68,"../../../definitions/VideoType":69,"../../../fui/entry/FUIEntryItem":92,"../../../fui/entry/FUIEntryView":93,"../../../manager/UIManager":164,"../../../moduleContexts/entryModule/servers/EntryServer":193,"../../../utils/UIWindow":305,"../../briefModule/views/TipView":187,"../../playerModule/models/PlayerModel":226,"../../playerModule/servers/PlayerServer":227,"../../playerModule/signals/PlayerInfoUpdateSignal":228,"../../roomModule/signals/BalanceUpdateSignal":242,"../../roomModule/signals/EnterRoomSignal":245}],199:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var fightServer_1 = require("./servers/fightServer");
var FightModel_1 = require("./models/FightModel");
var FreshFishSignal_1 = require("./signals/FreshFishSignal");
var BulletDestorySignal_1 = require("./signals/BulletDestorySignal");
var FireBulletSignal_1 = require("./signals/FireBulletSignal");
var AttackPatternChangedSignal_1 = require("./signals/AttackPatternChangedSignal");
var AttartPatternCommand_1 = require("./commands/AttartPatternCommand");
var FishInfoUpdateSignal_1 = require("./signals/FishInfoUpdateSignal");
var FightContext = /** @class */ (function (_super) {
    __extends(FightContext, _super);
    function FightContext(appContext) {
        return _super.call(this, appContext) || this;
    }
    FightContext.prototype.dispose = function () {
        this.dispose();
    };
    FightContext.prototype.bindInjections = function () {
        this.injectionBinder.bind(fightServer_1.default).toValue(new fightServer_1.default());
        this.injectionBinder.bind(FightModel_1.default).toValue(new FightModel_1.default());
        this.injectionBinder.bind(FreshFishSignal_1.default).toSingleton();
        this.injectionBinder.bind(BulletDestorySignal_1.default).toSingleton();
        this.injectionBinder.bind(FireBulletSignal_1.default).toSingleton();
        this.injectionBinder.bind(AttackPatternChangedSignal_1.default).toSingleton();
        this.injectionBinder.bind(FishInfoUpdateSignal_1.default).toSingleton();
    };
    FightContext.prototype.bindCommands = function () {
        this.commandBinder.bind(AttackPatternChangedSignal_1.default).to(AttartPatternCommand_1.default);
    };
    FightContext.prototype.bindMediators = function () {
    };
    FightContext.prototype.onStart = function () {
        this.done();
    };
    return FightContext;
}(riggerIOC.ModuleContext));
exports.default = FightContext;
},{"./commands/AttartPatternCommand":200,"./models/FightModel":201,"./servers/fightServer":202,"./signals/AttackPatternChangedSignal":203,"./signals/BulletDestorySignal":204,"./signals/FireBulletSignal":205,"./signals/FishInfoUpdateSignal":206,"./signals/FreshFishSignal":207}],200:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var FightModel_1 = require("../models/FightModel");
var inject = riggerIOC.inject;
var AttartPatternCommand = /** @class */ (function (_super) {
    __extends(AttartPatternCommand, _super);
    function AttartPatternCommand() {
        return _super.call(this) || this;
    }
    AttartPatternCommand.prototype.execute = function (pattern) {
        this.fightModel.attactPattern = pattern;
    };
    __decorate([
        inject(FightModel_1.default)
    ], AttartPatternCommand.prototype, "fightModel", void 0);
    return AttartPatternCommand;
}(riggerIOC.Command));
exports.default = AttartPatternCommand;
},{"../models/FightModel":201}],201:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 战斗
 */
var FightModel = /** @class */ (function (_super) {
    __extends(FightModel, _super);
    function FightModel() {
        var _this = _super.call(this) || this;
        _this._attactPattern = AttactPattern.normal;
        return _this;
    }
    Object.defineProperty(FightModel.prototype, "attactPattern", {
        /**
         * 当前攻击模式
         */
        get: function () {
            return this._attactPattern;
        },
        set: function (value) {
            this._attactPattern = value;
        },
        enumerable: true,
        configurable: true
    });
    FightModel.prototype.dispose = function () {
    };
    return FightModel;
}(riggerIOC.Model));
exports.default = FightModel;
/**
 * 攻击模式
 */
var AttactPattern;
(function (AttactPattern) {
    //锁定模式
    AttactPattern[AttactPattern["lock"] = 0] = "lock";
    //自动模式
    AttactPattern[AttactPattern["auto"] = 1] = "auto";
    //自由模式
    AttactPattern[AttactPattern["normal"] = 2] = "normal";
})(AttactPattern = exports.AttactPattern || (exports.AttactPattern = {}));
},{}],202:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 战斗服务
 */
var inject = riggerIOC.inject;
var protocol = require("../../../protocol/protocols/protocols");
var protocolSignals = require("../../../protocol/signals/signals");
var FishManager_1 = require("../../roomModule/models/FishManager");
var FreshFishSignal_1 = require("../signals/FreshFishSignal");
var BulletManager_1 = require("../../roomModule/models/BulletManager");
var NetworkChannelNames_1 = require("../../../definitions/NetworkChannelNames");
var CommandCodes_1 = require("../../../protocol/CommandCodes");
var FireBulletSignal_1 = require("../signals/FireBulletSignal");
var BulletDestorySignal_1 = require("../signals/BulletDestorySignal");
var AbstractFish_1 = require("../../../script/fish/fishScript/AbstractFish");
var FishInfoUpdateSignal_1 = require("../signals/FishInfoUpdateSignal");
var FightServer = /** @class */ (function (_super) {
    __extends(FightServer, _super);
    function FightServer() {
        var _this = _super.call(this) || this;
        _this.addProtocolListener();
        return _this;
    }
    FightServer.prototype.dispose = function () {
        this.removeProtocolListener();
    };
    FightServer.prototype.addProtocolListener = function () {
        this.monRefreshRespSignal.on(this, this.onMonRefreshResp);
        this.fireRespSignal.on(this, this.onFireResp);
        this.shellRespSignal.on(this, this.onShellResp);
        this.fishTideRespSignal.on(this, this.onFishTideResp);
        this.monUpdateRespSignal.on(this, this.onMonUpdateResp);
    };
    FightServer.prototype.removeProtocolListener = function () {
        this.monRefreshRespSignal.off(this, this.onMonRefreshResp);
        this.fireRespSignal.off(this, this.onFireResp);
        this.shellRespSignal.off(this, this.onShellResp);
        this.fishTideRespSignal.off(this, this.onFishTideResp);
        this.monUpdateRespSignal.off(this, this.onMonUpdateResp);
    };
    /**
     * 子弹发射请求
     * @param fishId
     * @param fireClickX
     * @param fireClickY
     */
    FightServer.prototype.fireReq = function (fishId, fireClickX, fireClickY) {
        var req = new protocol.FireReq();
        req.monId = fishId;
        req.x = fireClickX;
        req.y = fireClickY;
        rigger.service.NetworkService.instance.send(NetworkChannelNames_1.default.GameChannel, CommandCodes_1.default.PPFireReq, req);
    };
    /**
     * 子弹击中或出屏幕请求
     * @param bulletId
     * @param fishId
     * @param fishTypeId
     * @param releated
     */
    FightServer.prototype.shellReq = function (bulletId, fishId, fishTypeId, releated) {
        var req = new protocol.ShellReq();
        req.shellId = bulletId;
        req.monId = fishId;
        req.monTypeId = fishTypeId;
        req.expandList = releated;
        rigger.service.NetworkService.instance.send(NetworkChannelNames_1.default.GameChannel, CommandCodes_1.default.PPShellReq, req);
        // console.log(`shellReq===${bulletId}`);
    };
    /**
     * 鱼的刷新
     * @param resp
     */
    FightServer.prototype.onMonRefreshResp = function (resp) {
        // console.log(`onMonRefreshResp====${resp.monList.length}`);
        // console.log(`refreshFish`);
        FishManager_1.default.instance.fishInfo = FishManager_1.default.instance.fishInfo.concat(resp.monList);
        //派发刷新鱼的信号
        this.freshFishSignal.dispatch(resp.monList);
    };
    /**
     * 鱼数据更新
     * @param resp
     */
    FightServer.prototype.onMonUpdateResp = function (resp) {
        var fishInfo = resp.monList;
        for (var i = 0; i < fishInfo.length; i++) {
            var id = fishInfo[i].monId;
            var oldFish = FishManager_1.default.instance.getFishInfoById(id);
            if (oldFish) {
                //更新本地存储数据
                oldFish = fishInfo[i];
                this.fishInfoUpdateSignal.dispatch(fishInfo);
            }
            return;
        }
    };
    /**
     * 子弹发射返回
     * @param resp
     */
    FightServer.prototype.onFireResp = function (resp) {
        //存储子弹信息
        BulletManager_1.default.instance.bulletInfo = BulletManager_1.default.instance.bulletInfo.concat(resp.shellInfo);
        //派发发射子弹的信号
        this.fireBulletSignal.dispatch(resp.shellInfo);
    };
    /**
     * 子弹击中或出屏幕返回
     * @param resp
     */
    FightServer.prototype.onShellResp = function (resp) {
        //派发子弹击中或出屏幕的信号
        this.bulletDestorySignal.dispatch(resp);
    };
    /**
     * 调整炮台等级
     * @param lv 炮台等级
     */
    FightServer.prototype.changeBatteryLvReq = function (lv) {
        var req = new protocol.ChangeBatteryLvReq();
        req.batteryLv = lv;
        rigger.service.NetworkService.instance.send(NetworkChannelNames_1.default.GameChannel, CommandCodes_1.default.PPChangeBatteryLvReq, req);
    };
    /**
     * 自动捕鱼设置请求
     * @param key // 0:请求数据 1:自动捕鱼
     * @param value // key=0时，value=请求的key
     */
    FightServer.prototype.huntingSettingReq = function (key, value) {
        var req = new protocol.HuntingSettingReq();
        req.key = key;
        req.value = value;
        rigger.service.NetworkService.instance.send(NetworkChannelNames_1.default.GameChannel, CommandCodes_1.default.PPHuntingSettingReq, req);
    };
    /**
     * 鱼潮来袭
     */
    FightServer.prototype.onFishTideResp = function () {
        console.log("\u9C7C\u6F6E\u6765\u88AD!");
        var fishList = FishManager_1.default.instance.fishCreatedIdList();
        for (var i = 0; i < fishList.length; i++) {
            var fish = FishManager_1.default.instance.getFishgObjectById(fishList[i]);
            var fishScript = fish.displayObject.getComponent(AbstractFish_1.default);
            var isOutOfWall = fishScript.checkOutOfWall();
            if (isOutOfWall) {
                FishManager_1.default.instance.deleteFishInfoById(fishScript.fishId);
                fishScript.recover();
                fishScript.reset();
            }
            else {
                fishScript.runUpTime = 1000;
                fishScript.coliderActive = false;
            }
        }
    };
    __decorate([
        inject(protocolSignals.MonRefreshRespSignal)
    ], FightServer.prototype, "monRefreshRespSignal", void 0);
    __decorate([
        inject(FreshFishSignal_1.default)
    ], FightServer.prototype, "freshFishSignal", void 0);
    __decorate([
        inject(protocolSignals.FireRespSignal)
    ], FightServer.prototype, "fireRespSignal", void 0);
    __decorate([
        inject(protocolSignals.ShellRespSignal)
    ], FightServer.prototype, "shellRespSignal", void 0);
    __decorate([
        inject(BulletDestorySignal_1.default)
    ], FightServer.prototype, "bulletDestorySignal", void 0);
    __decorate([
        inject(FireBulletSignal_1.default)
    ], FightServer.prototype, "fireBulletSignal", void 0);
    __decorate([
        inject(protocolSignals.FishTideRespSignal)
    ], FightServer.prototype, "fishTideRespSignal", void 0);
    __decorate([
        inject(protocolSignals.MonUpdateRespSignal)
    ], FightServer.prototype, "monUpdateRespSignal", void 0);
    __decorate([
        inject(FishInfoUpdateSignal_1.default)
    ], FightServer.prototype, "fishInfoUpdateSignal", void 0);
    return FightServer;
}(riggerIOC.Server));
exports.default = FightServer;
},{"../../../definitions/NetworkChannelNames":64,"../../../protocol/CommandCodes":271,"../../../protocol/protocols/protocols":272,"../../../protocol/signals/signals":273,"../../../script/fish/fishScript/AbstractFish":283,"../../roomModule/models/BulletManager":235,"../../roomModule/models/FishManager":236,"../signals/BulletDestorySignal":204,"../signals/FireBulletSignal":205,"../signals/FishInfoUpdateSignal":206,"../signals/FreshFishSignal":207}],203:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 攻击模式改变的信号
 */
var AttactPatternChangedSignal = /** @class */ (function (_super) {
    __extends(AttactPatternChangedSignal, _super);
    function AttactPatternChangedSignal() {
        return _super.call(this) || this;
    }
    return AttactPatternChangedSignal;
}(riggerIOC.Signal));
exports.default = AttactPatternChangedSignal;
},{}],204:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var BulletDestorySignal = /** @class */ (function (_super) {
    __extends(BulletDestorySignal, _super);
    function BulletDestorySignal() {
        return _super.call(this) || this;
    }
    return BulletDestorySignal;
}(riggerIOC.Signal));
exports.default = BulletDestorySignal;
},{}],205:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FireBulletSignal = /** @class */ (function (_super) {
    __extends(FireBulletSignal, _super);
    function FireBulletSignal() {
        return _super.call(this) || this;
    }
    return FireBulletSignal;
}(riggerIOC.Signal));
exports.default = FireBulletSignal;
},{}],206:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
* 鱼数据更新信号
*/
var FishInfoUpdateSignal = /** @class */ (function (_super) {
    __extends(FishInfoUpdateSignal, _super);
    function FishInfoUpdateSignal() {
        return _super.call(this) || this;
    }
    return FishInfoUpdateSignal;
}(riggerIOC.Signal));
exports.default = FishInfoUpdateSignal;
},{}],207:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FreshFishSignal = /** @class */ (function (_super) {
    __extends(FreshFishSignal, _super);
    function FreshFishSignal() {
        return _super.call(this) || this;
    }
    return FreshFishSignal;
}(riggerIOC.Signal));
exports.default = FreshFishSignal;
},{}],208:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ServerItemView_1 = require("./views/ServerItemView");
var FUIServerItemView_1 = require("../../fui/loginUi/FUIServerItemView");
var loginUiBinder_1 = require("../../fui/loginUi/loginUiBinder");
var FUIMaskView_1 = require("../../fui/commonUI/FUIMaskView");
var MaskView_1 = require("../../commonView/MaskView");
/**
 * Common包类需要进行的自定义扩展放在这
 */
var loginConfig = /** @class */ (function () {
    function loginConfig() {
        rigger.service.FairyGUIPackagePlugin.packageMap["loginUiBinder"] = loginUiBinder_1.default;
        rigger.service.FairyGUIPackagePlugin.packageMap["loginUi"] = this;
        rigger.service.PackageUrlPlugin.packageMap["loginUi"] = this;
    }
    loginConfig.prototype.bindCustom = function () {
        fairygui.UIObjectFactory.setPackageItemExtension(FUIServerItemView_1.default.URL, ServerItemView_1.ServerItemView);
        // fairygui.UIObjectFactory.setPackageItemExtension(FUIServerItemView.URL, ServerItemView);
        // laya.utils.ClassUtils.   
        fairygui.UIObjectFactory.setPackageItemExtension(FUIMaskView_1.default.URL, MaskView_1.default);
    };
    loginConfig.prototype.getPreLoadingAssets = function () {
        return [
            { url: "res/fui/loginUi/loginUi_atlas0.png", type: Laya.Loader.IMAGE }
        ];
    };
    return loginConfig;
}());
exports.default = loginConfig;
},{"../../commonView/MaskView":50,"../../fui/commonUI/FUIMaskView":89,"../../fui/loginUi/FUIServerItemView":112,"../../fui/loginUi/loginUiBinder":114,"./views/ServerItemView":222}],209:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var inject = riggerIOC.inject;
var ConnectGameServerCommand_1 = require("./commands/ConnectGameServerCommand");
var LoginGameServerCommand_1 = require("./commands/LoginGameServerCommand");
var OnClickReturnBtnSignal_1 = require("./signals/OnClickReturnBtnSignal");
var OnClickGameReportBtnSignal_1 = require("./signals/OnClickGameReportBtnSignal");
var LoginSuccessCommand_1 = require("./commands/LoginSuccessCommand");
var LoginsuccessSignal_1 = require("./signals/LoginsuccessSignal");
var ReturnToLobbyCommand_1 = require("./commands/ReturnToLobbyCommand");
var GameReportCommand_1 = require("./commands/GameReportCommand");
var ConnectGameServerSignal_1 = require("./signals/ConnectGameServerSignal");
var LoginServer_1 = require("./servers/LoginServer");
var LoginModel_1 = require("./models/LoginModel");
var DisconnectedView_1 = require("./views/DisconnectedView");
var LoginContext = /** @class */ (function (_super) {
    __extends(LoginContext, _super);
    function LoginContext(appContext) {
        return _super.call(this, appContext) || this;
    }
    LoginContext.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this.connectGameServerSignal.dispose();
        this.connectGameServerSignal = null;
    };
    LoginContext.prototype.bindInjections = function () {
        this.injectionBinder.bind(LoginModel_1.default).toSingleton();
        this.injectionBinder.bind(LoginServer_1.default).toSingleton();
        this.injectionBinder.bind(LoginsuccessSignal_1.default).toSingleton();
        // this.injectionBinder.bind(IDisconnectedView).to(DisconnectedView);
        this.injectionBinder.bind(DisconnectedView_1.default).toSingleton();
        this.injectionBinder.bind(OnClickGameReportBtnSignal_1.default).toSingleton();
    };
    LoginContext.prototype.bindCommands = function () {
        // 连接，登陆游戏服的流程
        this.commandBinder.bind(ConnectGameServerSignal_1.default)
            .inSequence()
            .once()
            // 连接游戏服
            .to(ConnectGameServerCommand_1.default)
            // 登陆游戏服
            .to(LoginGameServerCommand_1.default)
            // 事了拂衣去
            .toValue(this.doneCommand);
        // 返回大厅的命令
        this.commandBinder.bind(OnClickReturnBtnSignal_1.default).to(ReturnToLobbyCommand_1.default);
        this.commandBinder.bind(OnClickGameReportBtnSignal_1.default).to(GameReportCommand_1.default);
        this.commandBinder.bind(LoginsuccessSignal_1.default).to(LoginSuccessCommand_1.default);
    };
    LoginContext.prototype.bindMediators = function () {
    };
    LoginContext.prototype.onStart = function () {
        this.connectGameServerSignal.dispatch();
    };
    __decorate([
        inject(ConnectGameServerSignal_1.default)
    ], LoginContext.prototype, "connectGameServerSignal", void 0);
    __decorate([
        inject(LoginsuccessSignal_1.default)
    ], LoginContext.prototype, "LoginSuccessSignal", void 0);
    return LoginContext;
}(riggerIOC.ModuleContext));
exports.default = LoginContext;
},{"./commands/ConnectGameServerCommand":210,"./commands/GameReportCommand":211,"./commands/LoginGameServerCommand":212,"./commands/LoginSuccessCommand":213,"./commands/ReturnToLobbyCommand":214,"./models/LoginModel":215,"./servers/LoginServer":216,"./signals/ConnectGameServerSignal":217,"./signals/LoginsuccessSignal":218,"./signals/OnClickGameReportBtnSignal":219,"./signals/OnClickReturnBtnSignal":220,"./views/DisconnectedView":221}],210:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var UIManager_1 = require("../../../manager/UIManager");
var LoginServer_1 = require("../servers/LoginServer");
var FUIServerListView_1 = require("../../../fui/loginUi/FUIServerListView");
var NetworkChannelNames_1 = require("../../../definitions/NetworkChannelNames");
/**
* name
*/
///<reference path="../servers/LoginServer.ts" />
var ConnectGameServerCommand = /** @class */ (function (_super) {
    __extends(ConnectGameServerCommand, _super);
    function ConnectGameServerCommand() {
        return _super.call(this) || this;
    }
    ConnectGameServerCommand.prototype.execute = function () {
        this.server.connectGameServer();
        rigger.service.NetworkService.instance.onConnect(NetworkChannelNames_1.default.GameChannel, this, this.onGameServerConnected);
    };
    ConnectGameServerCommand.prototype.onGameServerConnected = function () {
        console.log("connected");
        Laya.timer.clearAll(this);
        UIManager_1.default.instance.hideWindowByName(FUIServerListView_1.default.URL);
        this.done();
    };
    __decorate([
        riggerIOC.inject(LoginServer_1.default)
    ], ConnectGameServerCommand.prototype, "server", void 0);
    return ConnectGameServerCommand;
}(riggerIOC.Command));
exports.default = ConnectGameServerCommand;
},{"../../../definitions/NetworkChannelNames":64,"../../../fui/loginUi/FUIServerListView":113,"../../../manager/UIManager":164,"../servers/LoginServer":216}],211:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Utils_1 = require("../../../utils/Utils");
/**
* name
*/
var GameReportCommand = /** @class */ (function (_super) {
    __extends(GameReportCommand, _super);
    function GameReportCommand() {
        return _super.call(this) || this;
    }
    GameReportCommand.prototype.execute = function () {
        Utils_1.default.IS_SHOW_LOG = true;
        this.done();
    };
    return GameReportCommand;
}(riggerIOC.Command));
exports.default = GameReportCommand;
},{"../../../utils/Utils":306}],212:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
* name
*/
var inject = riggerIOC.inject;
var TimeService = rigger.service.TimeService;
var LoginModel_1 = require("../models/LoginModel");
var LoginServer_1 = require("../servers/LoginServer");
var MyApplication_1 = require("../../../MyApplication");
var LoginsuccessSignal_1 = require("../signals/LoginsuccessSignal");
var PlayerModel_1 = require("../../playerModule/models/PlayerModel");
var LoginGameServerCommand = /** @class */ (function (_super) {
    __extends(LoginGameServerCommand, _super);
    function LoginGameServerCommand() {
        return _super.call(this) || this;
        // this.EnterRoomRespSignal.once(this, this.onEnterRoomResp);
    }
    LoginGameServerCommand.prototype.execute = function () {
        if (this.model.initiallizied) {
            // 重新登陆
            this.server.loginGameServer();
            this.loginSuccessSignal.once(this, this.onLoginSuccess);
        }
        else {
            console.log("game server connected");
            MyApplication_1.default.instance.nowGameState = MyApplication_1.GameState.ConnectedGameServer;
            this.server.loginGameServer();
            this.loginSuccessSignal.once(this, this.onLoginSuccess);
            this.model.initiallizied = true;
        }
    };
    /**
      * 登陆成功
      * @param resp
      */
    LoginGameServerCommand.prototype.onLoginSuccess = function (resp) {
        console.log("login success");
        this.model.loginInfo = resp;
        this.playerModel.init();
        MyApplication_1.default.instance.nowGameState = MyApplication_1.GameState.LoginedGameServer;
        if (resp.gm == 1) {
            // UIManager.instance.showWindow(GmBtnView, false, UIManager.instance.tipsLayer);
        }
        // 启动心跳
        rigger.service.HeartBeatService.instance.startHeartBeat();
        MyApplication_1.default.instance.nowGameState = MyApplication_1.GameState.EnteredGame;
        // 设置服务器时间
        TimeService.instance.setServerTime(resp.serverSec * 1000);
        // console.log(`loginTime===${resp.serverSec}`);
        this.done();
    };
    __decorate([
        inject(LoginModel_1.default)
    ], LoginGameServerCommand.prototype, "model", void 0);
    __decorate([
        inject(LoginServer_1.default)
    ], LoginGameServerCommand.prototype, "server", void 0);
    __decorate([
        inject(LoginsuccessSignal_1.default)
    ], LoginGameServerCommand.prototype, "loginSuccessSignal", void 0);
    __decorate([
        inject(PlayerModel_1.default)
    ], LoginGameServerCommand.prototype, "playerModel", void 0);
    return LoginGameServerCommand;
}(riggerIOC.Command));
exports.default = LoginGameServerCommand;
},{"../../../MyApplication":48,"../../playerModule/models/PlayerModel":226,"../models/LoginModel":215,"../servers/LoginServer":216,"../signals/LoginsuccessSignal":218}],213:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var UIManager_1 = require("../../../manager/UIManager");
var FUIServerListView_1 = require("../../../fui/loginUi/FUIServerListView");
var EntryView_1 = require("../../../moduleContexts/entryModule/views/EntryView");
var inject = riggerIOC.inject;
var SoundController_1 = require("../../soundModule/SoundController");
var SceneName_1 = require("../../../definitions/SceneName");
/**
* 登陆成功的命令
*/
var LoginSuccessCommand = /** @class */ (function (_super) {
    __extends(LoginSuccessCommand, _super);
    function LoginSuccessCommand() {
        return _super.call(this) || this;
    }
    LoginSuccessCommand.prototype.execute = function (resp) {
        //隐藏加载界面、服务器列表选择界面
        UIManager_1.default.instance.hideLoadingView();
        UIManager_1.default.instance.hideWindowByName(FUIServerListView_1.default.URL, UIManager_1.default.instance.sceneLayer);
        // 打开界面
        this.soundController.enterScene(SceneName_1.default.LobbyScene, SceneName_1.default.LoginScene);
        UIManager_1.default.instance.showWindow(EntryView_1.default, true, UIManager_1.default.instance.sceneLayer);
        this.done();
    };
    __decorate([
        inject(SoundController_1.default)
    ], LoginSuccessCommand.prototype, "soundController", void 0);
    return LoginSuccessCommand;
}(riggerIOC.Command));
exports.default = LoginSuccessCommand;
},{"../../../definitions/SceneName":67,"../../../fui/loginUi/FUIServerListView":113,"../../../manager/UIManager":164,"../../../moduleContexts/entryModule/views/EntryView":198,"../../soundModule/SoundController":268}],214:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Utils_1 = require("../../../utils/Utils");
/**
* name
*/
var ReturnToLobbyCommand = /** @class */ (function (_super) {
    __extends(ReturnToLobbyCommand, _super);
    function ReturnToLobbyCommand() {
        return _super.call(this) || this;
    }
    ReturnToLobbyCommand.prototype.execute = function () {
        Utils_1.default.returnToLobby();
        this.done();
    };
    return ReturnToLobbyCommand;
}(riggerIOC.Command));
exports.default = ReturnToLobbyCommand;
},{"../../../utils/Utils":306}],215:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var LoginModel = /** @class */ (function (_super) {
    __extends(LoginModel, _super);
    function LoginModel() {
        var _this = _super.call(this) || this;
        _this.initiallizied = false;
        return _this;
    }
    Object.defineProperty(LoginModel.prototype, "loginInfo", {
        get: function () {
            return this.mLoginInfo;
        },
        set: function (info) {
            this.mLoginInfo = info;
        },
        enumerable: true,
        configurable: true
    });
    LoginModel.prototype.dispose = function () {
    };
    return LoginModel;
}(riggerIOC.Model));
exports.default = LoginModel;
},{}],216:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
* 登陆服务器
*/
var inject = riggerIOC.inject;
var ConnectService_1 = require("../../../gameServices/connectService/ConnectService");
var LoginsuccessSignal_1 = require("../signals/LoginsuccessSignal");
var protocolSignals = require("../../../protocol/signals/signals");
var CoinLackSignal_1 = require("../../roomModule/signals/CoinLackSignal");
var ShowTipsSignal_1 = require("../../roomModule/signals/ShowTipsSignal");
var LoginServer = /** @class */ (function (_super) {
    __extends(LoginServer, _super);
    function LoginServer() {
        var _this = _super.call(this) || this;
        _this.loginRespSignal.once(_this, _this.onLoginResp);
        _this.errRespSignal.on(_this, _this.onErrResp);
        return _this;
        // EventServiceUtil.addProtocolListener(CommandCodes.PPLoginResp, this, this.onLoginResp);
    }
    /**
      * 连接游戏服
      */
    LoginServer.prototype.connectGameServer = function () {
        // 连接游戏服
        ConnectService_1.default.instance.connectGameServer();
    };
    /**
      * 登陆游戏服
      */
    LoginServer.prototype.loginGameServer = function () {
        ConnectService_1.default.instance.loginGameServer();
    };
    /**
      * 登陆成功
      * @param resp
      */
    LoginServer.prototype.onLoginResp = function (resp) {
        // 派发成功信息			
        this.loginSuccessSignal.dispatch(resp);
    };
    // 发送准备完成协议
    LoginServer.prototype.sendhuntReadyReq = function () {
        // let req: protocol.huntReadyReq = new protocol.huntReadyReq();
        // rigger.service.NetworkService.instance.send(NetworkChannelNames.GameChannel, CommandCodes.PPhuntReadyReq, req);
    };
    /**
     * 错误码
     * @param resp
     */
    LoginServer.prototype.onErrResp = function (resp) {
        var cmd = resp.cmd;
        var code = resp.errCode ? resp.errCode : null;
        var msg = resp.errMsg ? resp.errMsg : null;
        if (code == 40010)
            return;
        if (code == 40003)
            this.coinLackSignal.dispatch();
        if (code == 40011)
            this.showTipsSignal.dispatch(2);
        console.log("Err====cmd==" + cmd + ",,,code==" + code + ",,,msg===" + msg);
    };
    LoginServer.prototype.dispose = function () {
        this.loginRespSignal = null;
        this.loginSuccessSignal = null;
    };
    __decorate([
        inject(LoginsuccessSignal_1.default)
    ], LoginServer.prototype, "loginSuccessSignal", void 0);
    __decorate([
        inject(protocolSignals.LoginRespSignal)
    ], LoginServer.prototype, "loginRespSignal", void 0);
    __decorate([
        inject(protocolSignals.ErrRespSignal)
    ], LoginServer.prototype, "errRespSignal", void 0);
    __decorate([
        inject(ShowTipsSignal_1.default)
    ], LoginServer.prototype, "showTipsSignal", void 0);
    __decorate([
        inject(CoinLackSignal_1.default)
    ], LoginServer.prototype, "coinLackSignal", void 0);
    return LoginServer;
}(riggerIOC.Server));
exports.default = LoginServer;
},{"../../../gameServices/connectService/ConnectService":160,"../../../protocol/signals/signals":273,"../../roomModule/signals/CoinLackSignal":244,"../../roomModule/signals/ShowTipsSignal":252,"../signals/LoginsuccessSignal":218}],217:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
* name
*/
var ConnectGameServerSignal = /** @class */ (function (_super) {
    __extends(ConnectGameServerSignal, _super);
    function ConnectGameServerSignal() {
        return _super.call(this) || this;
    }
    return ConnectGameServerSignal;
}(riggerIOC.Signal));
exports.default = ConnectGameServerSignal;
},{}],218:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var LoginSuccessSignal = /** @class */ (function (_super) {
    __extends(LoginSuccessSignal, _super);
    function LoginSuccessSignal() {
        return _super.call(this) || this;
    }
    return LoginSuccessSignal;
}(riggerIOC.Signal));
exports.default = LoginSuccessSignal;
},{}],219:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
* 点击了游戏报表的按钮
*/
var OnClickGameReportBtnSignal = /** @class */ (function (_super) {
    __extends(OnClickGameReportBtnSignal, _super);
    function OnClickGameReportBtnSignal() {
        return _super.call(this) || this;
    }
    return OnClickGameReportBtnSignal;
}(riggerIOC.Signal));
exports.default = OnClickGameReportBtnSignal;
},{}],220:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
* 点击了返回大厅的按钮
*/
var OnClickReturnBtnSignal = /** @class */ (function (_super) {
    __extends(OnClickReturnBtnSignal, _super);
    function OnClickReturnBtnSignal() {
        return _super.call(this) || this;
    }
    return OnClickReturnBtnSignal;
}(riggerIOC.Signal));
exports.default = OnClickReturnBtnSignal;
},{}],221:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var UIWindow_1 = require("../../../utils/UIWindow");
var FUIDisconnectedView_1 = require("../../../fui/loginUi/FUIDisconnectedView");
var OnClickReturnBtnSignal_1 = require("../signals/OnClickReturnBtnSignal");
/**
* name
*/
var DisconnectedView = /** @class */ (function (_super) {
    __extends(DisconnectedView, _super);
    function DisconnectedView() {
        var _this = _super.call(this) || this;
        _this.needMask = true;
        return _this;
    }
    DisconnectedView.getUrl = function () {
        return FUIDisconnectedView_1.default.URL;
    };
    DisconnectedView.prototype.onShown = function () {
        _super.prototype.onShown.call(this);
        this.contentPane.m_okBtn.onClick(this, this.onClickOk);
    };
    DisconnectedView.prototype.onHide = function () {
        _super.prototype.onHide.call(this);
        this.contentPane.m_okBtn.offClick(this, this.onClickOk);
    };
    DisconnectedView.prototype.onClickOk = function () {
        this.onClickReturnBtnSignal.dispatch();
    };
    DisconnectedView.prototype.layout = function () {
        _super.prototype.layout.call(this);
        var disconnectedGroup = new riggerLayout.Group(this.contentPane);
        disconnectedGroup.name = "DisconnectedGroup";
        disconnectedGroup.horizontalCenter = 0;
        disconnectedGroup.verticalCenter = 0;
        disconnectedGroup.width = [riggerLayout.LayoutSpec.create(1, this.contentPane.width / this.contentPane.height, "60%"), RiggerLayoutHelper.createScreenP("60%")];
        disconnectedGroup.height = riggerLayout.LayoutSpec.create(this.contentPane.width / this.contentPane.height, -1, "60%");
        RiggerLayout.layer.addChild(disconnectedGroup);
    };
    __decorate([
        riggerIOC.inject(OnClickReturnBtnSignal_1.default)
    ], DisconnectedView.prototype, "onClickReturnBtnSignal", void 0);
    return DisconnectedView;
}(UIWindow_1.default));
exports.default = DisconnectedView;
},{"../../../fui/loginUi/FUIDisconnectedView":107,"../../../utils/UIWindow":305,"../signals/OnClickReturnBtnSignal":220}],222:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FUIServerItemView_1 = require("../../../fui/loginUi/FUIServerItemView");
/**
* 服务器荐
*/
var ServerInfo = /** @class */ (function () {
    function ServerInfo() {
    }
    return ServerInfo;
}());
exports.ServerInfo = ServerInfo;
var ServerItemView = /** @class */ (function (_super) {
    __extends(ServerItemView, _super);
    function ServerItemView() {
        var _this = _super.call(this) || this;
        _this._info = null;
        return _this;
    }
    Object.defineProperty(ServerItemView.prototype, "info", {
        get: function () {
            return this._info;
        },
        enumerable: true,
        configurable: true
    });
    ServerItemView.prototype.setInfo = function (info) {
        this._info = info;
        this.title = info.serverName;
        this.tooltips = info.serverIp + ":" + info.serverPort;
    };
    return ServerItemView;
}(FUIServerItemView_1.default));
exports.ServerItemView = ServerItemView;
},{"../../../fui/loginUi/FUIServerItemView":112}],223:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var UIWindow_1 = require("../../../utils/UIWindow");
var ConnectService_1 = require("../../../gameServices/connectService/ConnectService");
var ServerConfig = require("../../../configs/ServerConfig");
var FUIServerListView_1 = require("../../../fui/loginUi/FUIServerListView");
/**
* name
*/
var ServerListView = /** @class */ (function (_super) {
    __extends(ServerListView, _super);
    function ServerListView() {
        return _super.call(this) || this;
    }
    ServerListView.getUrl = function () {
        return FUIServerListView_1.default.URL;
    };
    ServerListView.prototype.onInit = function () {
        this.contentPane.m_context.m_serverList.itemRenderer = Laya.Handler.create(this, this._onItemRender, null, false);
        this.contentPane.m_context.m_serverList.numItems = ServerConfig.debugServerList.length;
        this.contentPane.m_context.m_serverList.on(fairygui.Events.CLICK_ITEM, this, this._onSelectServer);
        var serverId = 0;
        if (localStorage["fg_server"])
            serverId = JSON.parse(localStorage["fg_server"]);
        if (serverId > this.contentPane.m_context.m_serverList.numItems - 1)
            serverId = 0;
        this.contentPane.m_context.m_serverList.selectedIndex = serverId;
        this._onSelectServer();
        this.contentPane.m_enter.m_startBtn.onClick(this, this._onClickEnter);
        var token;
        if (localStorage["fg_token"])
            token = JSON.parse(localStorage["fg_token"]);
        if (token)
            this.contentPane.m_enter.m_token_input.text = token;
        else
            this.contentPane.m_enter.m_token_input.text = ConnectService_1.default.getRunningService(ConnectService_1.default.serviceName).token;
    };
    ServerListView.prototype.layout = function () {
        // 内容
        var contextGroup = new riggerLayout.Group(this.contentPane.m_context);
        contextGroup.name = "contextGroup";
        contextGroup.horizontalCenter = 0;
        contextGroup.width = [
            RiggerLayoutHelper.createScreenP("80%"),
            RiggerLayoutHelper.createScreenL("66%")
        ];
        RiggerLayout.layer.addChild(contextGroup);
        // 背景
        var bgGroup = new riggerLayout.Group(this.contentPane.m_bgGraphic);
        bgGroup.name = "bgGroup";
        bgGroup.width = riggerLayout.LayoutSpec.create(1334 / 750, -1, "100%");
        bgGroup.height = [
            riggerLayout.LayoutSpec.create(1, 1334 / 750, "100%"),
            riggerLayout.LayoutSpec.create(750 / 1334, 1, "100%"),
            riggerLayout.LayoutSpec.create(-1, 750 / 1334, "100%")
        ];
        RiggerLayout.layer.addChild(bgGroup);
        // 按钮
        var btnGroup = new riggerLayout.Group(this.contentPane.m_enter);
        btnGroup.name = "btnGroup";
        btnGroup.horizontalCenter = 0;
        btnGroup.width = [
            RiggerLayoutHelper.createScreenP("35%"),
            RiggerLayoutHelper.createScreenL("20%")
        ];
        btnGroup.bottom = [
            RiggerLayoutHelper.createScreenP("20%"),
            RiggerLayoutHelper.createScreenL("20%")
        ];
        RiggerLayout.layer.addChild(btnGroup);
    };
    ServerListView.prototype._onItemRender = function (idx, item) {
        item && item.setInfo(ServerConfig.debugServerList[idx]);
    };
    ServerListView.prototype._onSelectServer = function () {
        // let items:ServerItemView[] = this.contentPane.m_context.m_serverList.getSelection();
        var item = this.contentPane.m_context.m_serverList.getChildAt(this.contentPane.m_context.m_serverList.selectedIndex);
        // console.log(`selected server name:${item.info.serverName}`);
        this._updateSelectedServerInfo(item.info);
    };
    ServerListView.prototype._updateSelectedServerInfo = function (server) {
        this.contentPane.m_context.m_serverInfoLabel.text =
            "\u670D\u52A1\u5668\u540D\uFF1A" + server.serverName + "\n\t\t\t\u670D\u52A1\u5668IP:" + server.serverIp + "\n\t\t\t\u670D\u52A1\u5668\u7AEF\u53E3:" + server.serverPort;
    };
    ServerListView.prototype._onClickEnter = function () {
        var selectedIndex = this.contentPane.m_context.m_serverList.selectedIndex;
        if (selectedIndex < 0) {
            alert("Please select at least one server to enter!");
            return;
        }
        if (this.contentPane.m_enter.m_token_input.text == "") {
            alert("Please input token!");
            return;
        }
        ConnectService_1.default.instance.token = this.contentPane.m_enter.m_token_input.text;
        localStorage["fg_token"] = JSON.stringify(ConnectService_1.default.instance.token);
        localStorage["fg_server"] = JSON.stringify(selectedIndex);
        var item = this.contentPane.m_context.m_serverList.getChildAt(selectedIndex);
        ConnectService_1.default.instance.serverIP = item.info.serverIp;
        ConnectService_1.default.instance.serverPort = item.info.serverPort;
        ConnectService_1.default.instance.connectGameServer();
    };
    return ServerListView;
}(UIWindow_1.default));
exports.default = ServerListView;
},{"../../../configs/ServerConfig":55,"../../../fui/loginUi/FUIServerListView":113,"../../../gameServices/connectService/ConnectService":160,"../../../utils/UIWindow":305}],224:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var PlayerServer_1 = require("./servers/PlayerServer");
var PlayerModel_1 = require("./models/PlayerModel");
var PlayerInfoUpdateSignal_1 = require("./signals/PlayerInfoUpdateSignal");
var PlayerContext = /** @class */ (function (_super) {
    __extends(PlayerContext, _super);
    function PlayerContext(appContext) {
        return _super.call(this, appContext) || this;
    }
    PlayerContext.prototype.dispose = function () {
        this.dispose();
    };
    PlayerContext.prototype.bindInjections = function () {
        this.injectionBinder.bind(PlayerModel_1.default).toValue(new PlayerModel_1.default());
        this.injectionBinder.bind(PlayerServer_1.default).toValue(new PlayerServer_1.default());
        this.injectionBinder.bind(PlayerInfoUpdateSignal_1.default).toSingleton();
    };
    PlayerContext.prototype.bindCommands = function () {
    };
    PlayerContext.prototype.bindMediators = function () {
    };
    PlayerContext.prototype.onStart = function () {
        this.done();
    };
    return PlayerContext;
}(riggerIOC.ModuleContext));
exports.default = PlayerContext;
},{"./models/PlayerModel":226,"./servers/PlayerServer":227,"./signals/PlayerInfoUpdateSignal":228}],225:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var PlayerInfo = /** @class */ (function () {
    function PlayerInfo() {
    }
    return PlayerInfo;
}());
exports.default = PlayerInfo;
},{}],226:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var PlayerInfo_1 = require("./PlayerInfo");
var LoginModel_1 = require("../../loginModule/models/LoginModel");
var inject = riggerIOC.inject;
var PlayerModel = /** @class */ (function (_super) {
    __extends(PlayerModel, _super);
    function PlayerModel() {
        var _this = _super.call(this) || this;
        // this.init();
        _this.addProtocolListener();
        return _this;
    }
    PlayerModel.prototype.dispose = function () {
        this.removeProtocolListener();
    };
    PlayerModel.prototype.addProtocolListener = function () {
    };
    PlayerModel.prototype.removeProtocolListener = function () {
    };
    PlayerModel.prototype.init = function () {
        this.playerSelfInfo = new PlayerInfo_1.default();
        this.playerSelfInfo.balance = this.loginModel.loginInfo.balance;
        this.playerSelfInfo.type = this.loginModel.loginInfo.type;
    };
    __decorate([
        inject(LoginModel_1.default)
    ], PlayerModel.prototype, "loginModel", void 0);
    return PlayerModel;
}(riggerIOC.Model));
exports.default = PlayerModel;
},{"../../loginModule/models/LoginModel":215,"./PlayerInfo":225}],227:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 玩家服务
 */
var protocol = require("../../../protocol/protocols/protocols");
var protocolSignals = require("../../../protocol/signals/signals");
var NetworkChannelNames_1 = require("../../../definitions/NetworkChannelNames");
var CommandCodes_1 = require("../../../protocol/CommandCodes");
var inject = riggerIOC.inject;
var PlayerModel_1 = require("../models/PlayerModel");
var PlayerInfoUpdateSignal_1 = require("../signals/PlayerInfoUpdateSignal");
var BalanceUpdateSignal_1 = require("../../roomModule/signals/BalanceUpdateSignal");
var PlayerServer = /** @class */ (function (_super) {
    __extends(PlayerServer, _super);
    function PlayerServer() {
        var _this = _super.call(this) || this;
        _this.addProtocolListener();
        return _this;
        // this.userInfoReq();
    }
    PlayerServer.prototype.dispose = function () {
        this.removeProtoclListener();
    };
    PlayerServer.prototype.addProtocolListener = function () {
        this.huntingInfoRespSignal.on(this, this.onHuntingInfoResp);
        this.userInfoRespSignal.on(this, this.onUserInfoResp);
        this.balancePushSignal.on(this, this.onBalancePush);
    };
    PlayerServer.prototype.removeProtoclListener = function () {
        this.huntingInfoRespSignal.off(this, this.onHuntingInfoResp);
        this.userInfoRespSignal.off(this, this.onUserInfoResp);
        this.balancePushSignal.off(this, this.onBalancePush);
    };
    /**
     * 玩家基础数据请求(Id、昵称、等级、经验)
     */
    PlayerServer.prototype.userInfoReq = function () {
        //等级、经验
        var req = new protocol.HuntingInfoReq();
        rigger.service.NetworkService.instance.send(NetworkChannelNames_1.default.GameChannel, CommandCodes_1.default.PPHuntingInfoReq, req);
        //id、昵称
        var req2 = new protocol.UserInfoReq();
        rigger.service.NetworkService.instance.send(NetworkChannelNames_1.default.GameChannel, CommandCodes_1.default.PPUserInfoReq, req2);
    };
    /**
     * 玩家数据返回
     * @param resp 等级、经验
     */
    PlayerServer.prototype.onHuntingInfoResp = function (resp) {
        this.playerModel.playerSelfInfo.lv = resp.lv;
        this.playerModel.playerSelfInfo.exp = resp.exp;
        //派发玩家数据更新的信号
        this.playerInfoUpdateSignal.dispatch();
    };
    /**
     * 玩家数据返回
     * @param resp id、昵称
     */
    PlayerServer.prototype.onUserInfoResp = function (resp) {
        this.playerModel.playerSelfInfo.userId = resp.userId;
        this.playerModel.playerSelfInfo.name = resp.userName;
        //派发玩家数据更新的信号
        this.playerInfoUpdateSignal.dispatch();
    };
    /**
     * 玩家充值更新
     * @param resp
     */
    PlayerServer.prototype.onBalancePush = function (resp) {
        this.playerModel.playerSelfInfo.balance += resp.change;
        this.balanceUpdateSignal.dispatch([this.playerModel.playerSelfInfo.userId, resp.change]);
    };
    __decorate([
        inject(protocolSignals.HuntingInfoRespSignal)
    ], PlayerServer.prototype, "huntingInfoRespSignal", void 0);
    __decorate([
        inject(protocolSignals.UserInfoRespSignal)
    ], PlayerServer.prototype, "userInfoRespSignal", void 0);
    __decorate([
        inject(PlayerInfoUpdateSignal_1.default)
    ], PlayerServer.prototype, "playerInfoUpdateSignal", void 0);
    __decorate([
        inject(PlayerModel_1.default)
    ], PlayerServer.prototype, "playerModel", void 0);
    __decorate([
        inject(protocolSignals.BalancePushSignal)
    ], PlayerServer.prototype, "balancePushSignal", void 0);
    __decorate([
        inject(BalanceUpdateSignal_1.default)
    ], PlayerServer.prototype, "balanceUpdateSignal", void 0);
    return PlayerServer;
}(riggerIOC.Server));
exports.default = PlayerServer;
},{"../../../definitions/NetworkChannelNames":64,"../../../protocol/CommandCodes":271,"../../../protocol/protocols/protocols":272,"../../../protocol/signals/signals":273,"../../roomModule/signals/BalanceUpdateSignal":242,"../models/PlayerModel":226,"../signals/PlayerInfoUpdateSignal":228}],228:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 玩家信息更新信号
 */
var PlayerInfoUpdateSignal = /** @class */ (function (_super) {
    __extends(PlayerInfoUpdateSignal, _super);
    function PlayerInfoUpdateSignal() {
        return _super.call(this) || this;
    }
    return PlayerInfoUpdateSignal;
}(riggerIOC.Signal));
exports.default = PlayerInfoUpdateSignal;
},{}],229:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var roomSceneBinder_1 = require("../../fui/roomScene/roomSceneBinder");
var FUIFishContent_1 = require("../../fui/roomScene/FUIFishContent");
var FishView_1 = require("./views/FishView");
var FUIBulletView_1 = require("../../fui/roomScene/FUIBulletView");
var BulletView_1 = require("./views/BulletView");
var FUIRoomTipsView_1 = require("../../fui/roomScene/FUIRoomTipsView");
var RoomTipsView_1 = require("./views/RoomTipsView");
var CatchAllAniView_1 = require("../../script/fish/fishScript/CatchAllAniView");
var FUIcatchAllLineView_1 = require("../../fui/roomScene/FUIcatchAllLineView");
var FUIFishDeadTipsView_1 = require("../../fui/roomScene/FUIFishDeadTipsView");
var SpecialDeadTipsView_1 = require("../../script/fish/fishScript/SpecialDeadTipsView");
var FUInet_1 = require("../../fui/roomScene/FUInet");
var NetView_1 = require("../../script/net/NetView");
var FUIwaveAniView_1 = require("../../fui/roomScene/FUIwaveAniView");
var BgWaveAniView_1 = require("./views/BgWaveAniView");
var FUIFullScreenGoldAniView_1 = require("../../fui/roomScene/FUIFullScreenGoldAniView");
var FullScreenGoldAniView_1 = require("./views/FullScreenGoldAniView");
var FUIShowGoldListView_1 = require("../../fui/roomScene/FUIShowGoldListView");
var ShowGoldListView_1 = require("./views/ShowGoldListView");
var FUIGoldListItemView_1 = require("../../fui/roomScene/FUIGoldListItemView");
var GoldListItemView_1 = require("./views/GoldListItemView");
var roomSceneConfig = /** @class */ (function () {
    function roomSceneConfig() {
        rigger.service.FairyGUIPackagePlugin.packageMap["roomSceneBinder"] = roomSceneBinder_1.default;
        rigger.service.FairyGUIPackagePlugin.packageMap["roomScene"] = this;
        rigger.service.PackageUrlPlugin.packageMap["roomScene"] = this;
    }
    /**
     * Common包类需要进行的自定义扩展放在这
     */
    roomSceneConfig.prototype.bindCustom = function () {
        fairygui.UIObjectFactory.setPackageItemExtension(FUIFishContent_1.default.URL, FishView_1.default); //鱼界面
        fairygui.UIObjectFactory.setPackageItemExtension(FUIBulletView_1.default.URL, BulletView_1.default); //子弹界面
        fairygui.UIObjectFactory.setPackageItemExtension(FUIRoomTipsView_1.default.URL, RoomTipsView_1.default); //提示界面
        fairygui.UIObjectFactory.setPackageItemExtension(FUIcatchAllLineView_1.default.URL, CatchAllAniView_1.default); //一网打尽特效界面
        fairygui.UIObjectFactory.setPackageItemExtension(FUIFishDeadTipsView_1.default.URL, SpecialDeadTipsView_1.default); //特殊鱼死亡提示界面
        fairygui.UIObjectFactory.setPackageItemExtension(FUInet_1.default.URL, NetView_1.NetView); //渔网界面
        fairygui.UIObjectFactory.setPackageItemExtension(FUIwaveAniView_1.default.URL, BgWaveAniView_1.BgWaveAniView); //海底动画
        fairygui.UIObjectFactory.setPackageItemExtension(FUIFullScreenGoldAniView_1.default.URL, FullScreenGoldAniView_1.FullScreenGoldAniView); //全屏金币动画;
        fairygui.UIObjectFactory.setPackageItemExtension(FUIShowGoldListView_1.default.URL, ShowGoldListView_1.ShowGoldListView);
        fairygui.UIObjectFactory.setPackageItemExtension(FUIGoldListItemView_1.default.URL, GoldListItemView_1.GoldListItemView);
    };
    roomSceneConfig.prototype.getPreLoadingAssets = function () {
        //--- gulp update_preload_config ---
        return [
            //鱼登场spine动画
            { url: "res/spine/FishInAni/juesedengchang.sk", type: Laya.Loader.BUFFER },
            { url: "res/spine/FishInAni/juesedengchang.png", type: Laya.Loader.IMAGE },
            { url: "res/spine/FishInAni/juesedengchang2.png", type: Laya.Loader.IMAGE },
            { url: "res/spine/FishInAni/juesedengchang3.png", type: Laya.Loader.IMAGE },
            { url: "res/spine/FishInAni/juesedengchang4.png", type: Laya.Loader.IMAGE },
            { url: "res/spine/FishInAni/juesedengchang5.png", type: Laya.Loader.IMAGE },
            { url: "res/spine/FishInAni/juesedengchang6.png", type: Laya.Loader.IMAGE },
            { url: "res/spine/FishInAni/juesedengchang7.png", type: Laya.Loader.IMAGE },
            { url: "res/spine/FishInAni/juesedengchang8.png", type: Laya.Loader.IMAGE },
            { url: "res/spine/FishInAni/juesedengchang9.png", type: Laya.Loader.IMAGE }
        ];
        //--- gulp update_preload_config ---
    };
    return roomSceneConfig;
}());
exports.default = roomSceneConfig;
},{"../../fui/roomScene/FUIBulletView":122,"../../fui/roomScene/FUIFishContent":124,"../../fui/roomScene/FUIFishDeadTipsView":125,"../../fui/roomScene/FUIFullScreenGoldAniView":127,"../../fui/roomScene/FUIGoldListItemView":128,"../../fui/roomScene/FUIRoomTipsView":135,"../../fui/roomScene/FUIShowGoldListView":137,"../../fui/roomScene/FUIcatchAllLineView":142,"../../fui/roomScene/FUInet":153,"../../fui/roomScene/FUIwaveAniView":157,"../../fui/roomScene/roomSceneBinder":159,"../../script/fish/fishScript/CatchAllAniView":284,"../../script/fish/fishScript/SpecialDeadTipsView":287,"../../script/net/NetView":294,"./views/BgWaveAniView":256,"./views/BulletView":257,"./views/FishView":258,"./views/FullScreenGoldAniView":259,"./views/GoldListItemView":260,"./views/RoomTipsView":262,"./views/ShowGoldListView":265}],230:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var EnterRoomSignal_1 = require("./signals/EnterRoomSignal");
var EnterRoomCommand_1 = require("./commands/EnterRoomCommand");
var ShowRoomSignal_1 = require("./signals/ShowRoomSignal");
var ShowRoomCommand_1 = require("./commands/ShowRoomCommand");
var RoomModel_1 = require("./models/RoomModel");
var RoomServer_1 = require("./servers/RoomServer");
var ExitRoomSignal_1 = require("./signals/ExitRoomSignal");
var PlayerExitRoomSIgnal_1 = require("./signals/PlayerExitRoomSIgnal");
var ExitRoomCommand_1 = require("./commands/ExitRoomCommand");
var RoomView_1 = require("./views/RoomView");
var RoomViewMediator_1 = require("./views/RoomViewMediator");
var NewPlayerSignal_1 = require("./signals/NewPlayerSignal");
var RoomInfoInitSignal_1 = require("./signals/RoomInfoInitSignal");
var BalanceUpdateSignal_1 = require("./signals/BalanceUpdateSignal");
var BatteryLvUpdateSignal_1 = require("./signals/BatteryLvUpdateSignal");
var AutoHuntingView_1 = require("./views/AutoHuntingView");
var AutoHuntingViewMediator_1 = require("./views/AutoHuntingViewMediator");
var AutoHuntingSignal_1 = require("./signals/AutoHuntingSignal");
var AutoHuntingFishHuntedSignal_1 = require("./signals/AutoHuntingFishHuntedSignal");
var CoinLackSignal_1 = require("./signals/CoinLackSignal");
var RoomViewLoadSignal_1 = require("./signals/RoomViewLoadSignal");
var RoomViewLoadCommand_1 = require("./commands/RoomViewLoadCommand");
var ShowTipsSignal_1 = require("./signals/ShowTipsSignal");
var RoomContext = /** @class */ (function (_super) {
    __extends(RoomContext, _super);
    function RoomContext(appContext) {
        return _super.call(this, appContext) || this;
    }
    RoomContext.prototype.dispose = function () {
        this.dispose();
    };
    RoomContext.prototype.bindInjections = function () {
        this.injectionBinder.bind(RoomModel_1.default).toValue(new RoomModel_1.default());
        this.injectionBinder.bind(RoomServer_1.default).toValue(new RoomServer_1.default());
        this.injectionBinder.bind(EnterRoomSignal_1.default).toSingleton();
        this.injectionBinder.bind(ShowRoomSignal_1.default).toSingleton();
        this.injectionBinder.bind(ExitRoomSignal_1.default).toSingleton();
        this.injectionBinder.bind(PlayerExitRoomSIgnal_1.default).toSingleton();
        this.injectionBinder.bind(NewPlayerSignal_1.default).toSingleton();
        this.injectionBinder.bind(RoomInfoInitSignal_1.default).toSingleton();
        this.injectionBinder.bind(BalanceUpdateSignal_1.default).toSingleton();
        this.injectionBinder.bind(BatteryLvUpdateSignal_1.default).toSingleton();
        this.injectionBinder.bind(AutoHuntingSignal_1.default).toSingleton();
        this.injectionBinder.bind(AutoHuntingFishHuntedSignal_1.default).toSingleton();
        this.injectionBinder.bind(CoinLackSignal_1.default).toSingleton();
        this.injectionBinder.bind(RoomViewLoadSignal_1.default).toSingleton();
        this.injectionBinder.bind(ShowTipsSignal_1.default).toSingleton();
    };
    RoomContext.prototype.bindCommands = function () {
        // 请求进入房间的命令
        this.commandBinder.bind(EnterRoomSignal_1.default).to(EnterRoomCommand_1.default);
        //显示房间界面的命令
        this.commandBinder.bind(ShowRoomSignal_1.default).to(ShowRoomCommand_1.default);
        //房间资源初始化完毕的命令
        this.commandBinder.bind(RoomViewLoadSignal_1.default).to(RoomViewLoadCommand_1.default);
        //退出房间的命令
        this.commandBinder.bind(ExitRoomSignal_1.default).to(ExitRoomCommand_1.default);
    };
    RoomContext.prototype.bindMediators = function () {
        this.mediationBinder.bind(RoomView_1.default).to(RoomViewMediator_1.default);
        this.mediationBinder.bind(AutoHuntingView_1.default).to(AutoHuntingViewMediator_1.default);
    };
    RoomContext.prototype.onStart = function () {
        this.done();
    };
    return RoomContext;
}(riggerIOC.ModuleContext));
exports.default = RoomContext;
},{"./commands/EnterRoomCommand":231,"./commands/ExitRoomCommand":232,"./commands/RoomViewLoadCommand":233,"./commands/ShowRoomCommand":234,"./models/RoomModel":238,"./servers/RoomServer":239,"./signals/AutoHuntingFishHuntedSignal":240,"./signals/AutoHuntingSignal":241,"./signals/BalanceUpdateSignal":242,"./signals/BatteryLvUpdateSignal":243,"./signals/CoinLackSignal":244,"./signals/EnterRoomSignal":245,"./signals/ExitRoomSignal":246,"./signals/NewPlayerSignal":247,"./signals/PlayerExitRoomSIgnal":248,"./signals/RoomInfoInitSignal":249,"./signals/RoomViewLoadSignal":250,"./signals/ShowRoomSignal":251,"./signals/ShowTipsSignal":252,"./views/AutoHuntingView":254,"./views/AutoHuntingViewMediator":255,"./views/RoomView":263,"./views/RoomViewMediator":264}],231:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 请求进入房间
 */
var protocol = require("../../../protocol/protocols/protocols");
var NetworkChannelNames_1 = require("../../../definitions/NetworkChannelNames");
var CommandCodes_1 = require("../../../protocol/CommandCodes");
var inject = riggerIOC.inject;
var PlayerModel_1 = require("../../playerModule/models/PlayerModel");
var UIManager_1 = require("../../../manager/UIManager");
var RoomView_1 = require("../views/RoomView");
var RoomModel_1 = require("../models/RoomModel");
var DataHuntingRoom_1 = require("../../../data/tpls/DataHuntingRoom");
var SoundController_1 = require("../../soundModule/SoundController");
var EnterRoomCommand = /** @class */ (function (_super) {
    __extends(EnterRoomCommand, _super);
    function EnterRoomCommand() {
        return _super.call(this) || this;
    }
    EnterRoomCommand.prototype.execute = function (id) {
        if (!id) {
            console.log("\u623F\u95F4id\u9519\u8BEF");
            return;
        }
        //请求进入房间前，需客服端自行判断余额是否满足下限
        var limt = DataHuntingRoom_1.default.getData(id).balanceLimit;
        if (this.playerModel.playerSelfInfo.balance >= limt) {
            this.roomModel.reset(); //清空房间旧数据
            this.roomModel.roomType = id;
            var req = new protocol.HuntingEnterRoomReq();
            req.roomTypeId = id;
            rigger.service.NetworkService.instance.send(NetworkChannelNames_1.default.GameChannel, CommandCodes_1.default.PPHuntingEnterRoomReq, req);
            //显示房间界面. <动态加载>
            UIManager_1.default.instance.showWindow(RoomView_1.default, true, UIManager_1.default.instance.sceneLayer);
        }
        this.done();
    };
    __decorate([
        inject(PlayerModel_1.default)
    ], EnterRoomCommand.prototype, "playerModel", void 0);
    __decorate([
        inject(RoomModel_1.default)
    ], EnterRoomCommand.prototype, "roomModel", void 0);
    __decorate([
        inject(SoundController_1.default)
    ], EnterRoomCommand.prototype, "soundController", void 0);
    return EnterRoomCommand;
}(riggerIOC.Command));
exports.default = EnterRoomCommand;
},{"../../../data/tpls/DataHuntingRoom":58,"../../../definitions/NetworkChannelNames":64,"../../../manager/UIManager":164,"../../../protocol/CommandCodes":271,"../../../protocol/protocols/protocols":272,"../../playerModule/models/PlayerModel":226,"../../soundModule/SoundController":268,"../models/RoomModel":238,"../views/RoomView":263}],232:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 离开房间的命令
 */
var protocol = require("../../../protocol/protocols/protocols");
var NetworkChannelNames_1 = require("../../../definitions/NetworkChannelNames");
var CommandCodes_1 = require("../../../protocol/CommandCodes");
var UIManager_1 = require("../../../manager/UIManager");
var EntryView_1 = require("../../entryModule/views/EntryView");
var inject = riggerIOC.inject;
var RoomModel_1 = require("../models/RoomModel");
var SoundController_1 = require("../../soundModule/SoundController");
var SceneName_1 = require("../../../definitions/SceneName");
var ExitRoomCommand = /** @class */ (function (_super) {
    __extends(ExitRoomCommand, _super);
    function ExitRoomCommand() {
        return _super.call(this) || this;
    }
    ExitRoomCommand.prototype.execute = function () {
        var req = new protocol.HuntingExitRoomReq();
        rigger.service.NetworkService.instance.send(NetworkChannelNames_1.default.GameChannel, CommandCodes_1.default.PPHuntingExitRoomReq, req);
        //显示大厅界面. <暂定>
        this.soundController.enterScene(SceneName_1.default.LobbyScene, SceneName_1.default.RoomScene);
        UIManager_1.default.instance.showWindow(EntryView_1.default, true, UIManager_1.default.instance.sceneLayer);
        this.done();
    };
    __decorate([
        inject(RoomModel_1.default)
    ], ExitRoomCommand.prototype, "roomModel", void 0);
    __decorate([
        inject(SoundController_1.default)
    ], ExitRoomCommand.prototype, "soundController", void 0);
    return ExitRoomCommand;
}(riggerIOC.Command));
exports.default = ExitRoomCommand;
},{"../../../definitions/NetworkChannelNames":64,"../../../definitions/SceneName":67,"../../../manager/UIManager":164,"../../../protocol/CommandCodes":271,"../../../protocol/protocols/protocols":272,"../../entryModule/views/EntryView":198,"../../soundModule/SoundController":268,"../models/RoomModel":238}],233:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var SoundController_1 = require("../../soundModule/SoundController");
var inject = riggerIOC.inject;
var SceneName_1 = require("../../../definitions/SceneName");
var protocol = require("../../../protocol/protocols/protocols");
var NetworkChannelNames_1 = require("../../../definitions/NetworkChannelNames");
var CommandCodes_1 = require("../../../protocol/CommandCodes");
var RoomViewLoadCommand = /** @class */ (function (_super) {
    __extends(RoomViewLoadCommand, _super);
    function RoomViewLoadCommand() {
        return _super.call(this) || this;
    }
    /**
     * 通知服务器,房间资源加载完成,准备接收数据
     */
    RoomViewLoadCommand.prototype.execute = function () {
        var req = new protocol.HuntingEnterRoomOkReq();
        rigger.service.NetworkService.instance.send(NetworkChannelNames_1.default.GameChannel, CommandCodes_1.default.PPHuntingEnterRoomOkReq, req);
        //隐藏房间加载界面,播放房间背景音乐
        this.soundController.enterScene(SceneName_1.default.RoomScene, SceneName_1.default.LobbyScene);
    };
    __decorate([
        inject(SoundController_1.default)
    ], RoomViewLoadCommand.prototype, "soundController", void 0);
    return RoomViewLoadCommand;
}(riggerIOC.Command));
exports.default = RoomViewLoadCommand;
},{"../../../definitions/NetworkChannelNames":64,"../../../definitions/SceneName":67,"../../../protocol/CommandCodes":271,"../../../protocol/protocols/protocols":272,"../../soundModule/SoundController":268}],234:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 显示房间界面
 */
var ShowRoomCommand = /** @class */ (function (_super) {
    __extends(ShowRoomCommand, _super);
    function ShowRoomCommand() {
        return _super.call(this) || this;
    }
    ShowRoomCommand.prototype.execute = function () {
        // UIManager.instance.showWindow(roomView)
    };
    return ShowRoomCommand;
}(riggerIOC.Command));
exports.default = ShowRoomCommand;
},{}],235:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var BulletManager = /** @class */ (function () {
    function BulletManager() {
        this._bulletInfo = [];
        this._bullethgObjectGroup = [];
    }
    Object.defineProperty(BulletManager, "instance", {
        get: function () {
            if (!this._instance) {
                this._instance = new BulletManager();
            }
            return this._instance;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BulletManager.prototype, "bulletInfo", {
        /**子弹信息 */
        get: function () {
            return this._bulletInfo;
        },
        set: function (value) {
            this._bulletInfo = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BulletManager.prototype, "bullethgObjectGroup", {
        /**
         * 子弹的实例集合
         */
        get: function () {
            return this._bullethgObjectGroup;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 获取子弹信息
     * @param id
     */
    BulletManager.prototype.getBulletInfoById = function (id) {
        for (var i = 0; i < this._bulletInfo.length; i++) {
            if (this._bulletInfo[i].shellId == id) {
                return this._bulletInfo[i];
            }
        }
        return null;
    };
    /**
     * 根据子弹id获取对应的组件
     * @param id
     */
    BulletManager.prototype.getBullethgObjectById = function (id) {
        for (var i = 0; i < this._bullethgObjectGroup.length; i++) {
            if (this._bullethgObjectGroup[i].data == id) {
                return this._bullethgObjectGroup[i];
            }
        }
        return null;
    };
    /**
     * 返回指定玩家的所有子弹实例集合
     * @param ownerId
     */
    BulletManager.prototype.findBulletObjectByOwnerId = function (ownerId) {
        var bullet = [];
        for (var i = 0; i < this.bulletInfo.length; i++) {
            if (this.bulletInfo[i].userId == ownerId) {
                var obj = this.getBullethgObjectById(this.bulletInfo[i].shellId);
                obj && bullet.push(obj);
            }
        }
        return bullet;
    };
    /**
     * 删除指定id子弹
     * @param id
     */
    BulletManager.prototype.deleteBulletById = function (id) {
        for (var i = 0; i < this._bulletInfo.length; i++) {
            if (this._bulletInfo[i].shellId == id) {
                this._bulletInfo.splice(i, 1);
                break;
            }
        }
        for (var j = 0; j < this._bullethgObjectGroup.length; j++) {
            if (this._bullethgObjectGroup[j].data == id) {
                this._bullethgObjectGroup.splice(j, 1);
                break;
            }
        }
    };
    BulletManager.prototype.reset = function () {
        this._bulletInfo = [];
        this._bullethgObjectGroup = [];
    };
    return BulletManager;
}());
exports.default = BulletManager;
},{}],236:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var FishManager = /** @class */ (function () {
    function FishManager() {
        this._fishInfo = [];
        this._fishgObjectGroup = [];
    }
    Object.defineProperty(FishManager, "instance", {
        get: function () {
            if (!this._instance) {
                this._instance = new FishManager();
            }
            return this._instance;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FishManager.prototype, "fishInfo", {
        /**
         * 鱼信息
         */
        get: function () {
            return this._fishInfo;
        },
        set: function (value) {
            this._fishInfo = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 根据id返回鱼信息
     * @param id
     */
    FishManager.prototype.getFishInfoById = function (id) {
        for (var i = 0; i < this._fishInfo.length; i++) {
            if (this._fishInfo[i].monId == id) {
                return this._fishInfo[i];
            }
        }
        return null;
    };
    Object.defineProperty(FishManager.prototype, "fishgObjectGroup", {
        /**
         * 鱼的实例集合
         */
        get: function () {
            return this._fishgObjectGroup;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 根据鱼id获取对应的组件
     * @param id
     */
    FishManager.prototype.getFishgObjectById = function (id) {
        for (var i = 0; i < this._fishgObjectGroup.length; i++) {
            if (this._fishgObjectGroup[i].data == id) {
                return this._fishgObjectGroup[i];
            }
        }
        return null;
    };
    /**
     * 获取已经创建实例的鱼的id列表
     */
    FishManager.prototype.fishCreatedIdList = function () {
        var idList = [];
        for (var i = 0; i < this._fishgObjectGroup.length; i++) {
            idList.push(this._fishgObjectGroup[i].data);
        }
        return idList;
    };
    /**
     * 根据鱼id删除存储的数据、组件
     * @param id
     */
    FishManager.prototype.deleteFishInfoById = function (id) {
        for (var i = 0; i < this._fishInfo.length; i++) {
            if (this._fishInfo[i].monId == id) {
                this._fishInfo.splice(i, 1);
                break;
            }
        }
        for (var j = 0; j < this._fishgObjectGroup.length; j++) {
            if (this._fishgObjectGroup[j].data == id) {
                this._fishgObjectGroup.splice(j, 1);
                break;
            }
        }
    };
    FishManager.prototype.reset = function () {
        this._fishInfo = [];
        this._fishgObjectGroup = [];
    };
    return FishManager;
}());
exports.default = FishManager;
},{}],237:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var inject = riggerIOC.inject;
var PlayerModel_1 = require("../../playerModule/models/PlayerModel");
var PlayerManager = /** @class */ (function () {
    function PlayerManager() {
        this._playerInfo = [];
    }
    Object.defineProperty(PlayerManager, "instance", {
        get: function () {
            if (!this._instance) {
                this._instance = new PlayerManager();
            }
            return this._instance;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PlayerManager.prototype, "playerInfo", {
        get: function () {
            return this._playerInfo;
        },
        set: function (value) {
            this._playerInfo = value;
            this.updatePlayerSelfInfo();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 更新玩家自身信息
     */
    PlayerManager.prototype.updatePlayerSelfInfo = function () {
        if (!this.playerInfo)
            return;
        for (var i = 0; i < this.playerInfo.length; i++) {
            if (this.playerInfo[i].userId == this.playerModel.playerSelfInfo.userId) {
                this.playerModel.playerSelfInfo.balance = this.playerInfo[i].balance;
                this.playerModel.playerSelfInfo.pos = this.playerInfo[i].pos;
                this.playerModel.playerSelfInfo.battery_lv = this.playerInfo[i].batteryLv;
            }
        }
    };
    /**
     * 通过Id返回玩家信息
     * @param id
     */
    PlayerManager.prototype.findPlayerInfoById = function (id) {
        for (var i = 0; i < this._playerInfo.length; i++) {
            if (this._playerInfo[i].userId == id) {
                return this._playerInfo[i];
            }
        }
        return null;
    };
    /**
     * 删除指定玩家信息
     * @param id
     */
    PlayerManager.prototype.deletePlayerInfoById = function (id) {
        for (var i = 0; i < this._playerInfo.length; i++) {
            if (this._playerInfo[i].userId == id) {
                this._playerInfo.splice(i, 1);
            }
        }
    };
    PlayerManager.prototype.reset = function () {
        this._playerInfo = [];
    };
    __decorate([
        inject(PlayerModel_1.default)
    ], PlayerManager.prototype, "playerModel", void 0);
    return PlayerManager;
}());
exports.default = PlayerManager;
},{"../../playerModule/models/PlayerModel":226}],238:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var FishManager_1 = require("./FishManager");
var BulletManager_1 = require("./BulletManager");
var PlayerManager_1 = require("./PlayerManager");
var inject = riggerIOC.inject;
var FreshFishSignal_1 = require("../../fightModule/signals/FreshFishSignal");
var RoomModel = /** @class */ (function (_super) {
    __extends(RoomModel, _super);
    function RoomModel() {
        var _this = _super.call(this) || this;
        _this.roomType = null;
        _this.addProtocolListener();
        return _this;
    }
    RoomModel.prototype.dispose = function () {
        this.removeProtocolListener();
    };
    RoomModel.prototype.addProtocolListener = function () {
    };
    RoomModel.prototype.removeProtocolListener = function () {
    };
    RoomModel.prototype.initRoomModelInfo = function (value) {
        // let time = new Date();
        // console.log(`initRoomModelInfo====` + time.getTime());
        FishManager_1.default.instance.fishInfo = value.monList; //鱼列表
        BulletManager_1.default.instance.bulletInfo = value.shellList; //子弹列表
        PlayerManager_1.default.instance.playerInfo = value.playerList; //玩家列表
        //派发刷新鱼的信号
        this.freshFishSignal.dispatch(value.monList);
    };
    RoomModel.prototype.reset = function () {
        FishManager_1.default.instance.reset();
        BulletManager_1.default.instance.reset();
        PlayerManager_1.default.instance.reset();
        this.roomType = null;
    };
    __decorate([
        inject(FreshFishSignal_1.default)
    ], RoomModel.prototype, "freshFishSignal", void 0);
    return RoomModel;
}(riggerIOC.Model));
exports.default = RoomModel;
},{"../../fightModule/signals/FreshFishSignal":207,"./BulletManager":235,"./FishManager":236,"./PlayerManager":237}],239:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 房间服务
 */
var protocolSignals = require("../../../protocol/signals/signals");
var inject = riggerIOC.inject;
var ShowRoomSignal_1 = require("../signals/ShowRoomSignal");
var RoomModel_1 = require("../models/RoomModel");
var PlayerExitRoomSIgnal_1 = require("../signals/PlayerExitRoomSIgnal");
var PlayerManager_1 = require("../models/PlayerManager");
var NewPlayerSignal_1 = require("../signals/NewPlayerSignal");
var RoomInfoInitSignal_1 = require("../signals/RoomInfoInitSignal");
var PlayerModel_1 = require("../../playerModule/models/PlayerModel");
var BalanceUpdateSignal_1 = require("../signals/BalanceUpdateSignal");
var BatteryLvUpdateSignal_1 = require("../signals/BatteryLvUpdateSignal");
var RoomServer = /** @class */ (function (_super) {
    __extends(RoomServer, _super);
    function RoomServer() {
        var _this = _super.call(this) || this;
        _this._isFirstInRoom = true;
        _this.addProtocolListener();
        return _this;
    }
    RoomServer.prototype.dispose = function () {
        this.removeProtocolListener();
    };
    RoomServer.prototype.addProtocolListener = function () {
        this.huntingRoomInfoRespSignal.on(this, this.onHuntingRoomInfoResp);
        this.huntingExitRoomRespSignal.on(this, this.onHuntingExitRoomResp);
        this.huntingEnterRoomRespSignal.on(this, this.onHuntingEnterRoomResp);
        this.updatePlayerRespSignal.on(this, this.onUpdatePlayerResp);
    };
    RoomServer.prototype.removeProtocolListener = function () {
        this.huntingRoomInfoRespSignal.off(this, this.onHuntingRoomInfoResp);
        this.huntingExitRoomRespSignal.off(this, this.onHuntingExitRoomResp);
        this.huntingEnterRoomRespSignal.off(this, this.onHuntingEnterRoomResp);
        this.updatePlayerRespSignal.off(this, this.onUpdatePlayerResp);
    };
    /**
     * 房间信息回包
     * @param resp
     */
    RoomServer.prototype.onHuntingRoomInfoResp = function (resp) {
        if (this._isFirstInRoom) {
            this.showRoomSignal.dispatch();
            this._isFirstInRoom = false;
        }
        //更新房间数据
        this.roomModel.initRoomModelInfo(resp);
        //派发房间数据初始化完毕
        this.roomInfoInitSignal.dispatch();
    };
    Object.defineProperty(RoomServer.prototype, "isFirstInRoom", {
        get: function () {
            return this._isFirstInRoom;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 玩家房间数据更新
     * @param resp
     */
    RoomServer.prototype.onUpdatePlayerResp = function (resp) {
        var id = resp.userId;
        var playerInfo = PlayerManager_1.default.instance.findPlayerInfoById(id);
        if (!playerInfo)
            return;
        if (resp.key == 1) {
            var change = resp.value - PlayerManager_1.default.instance.findPlayerInfoById(id).balance;
            PlayerManager_1.default.instance.findPlayerInfoById(id).balance = resp.value;
            if (id == this.playerModel.playerSelfInfo.userId)
                this.playerModel.playerSelfInfo.balance = resp.value;
            //派发玩家余额更新信号
            this.balanceUpdateSignal.dispatch([id, change]);
        }
        else {
            PlayerManager_1.default.instance.findPlayerInfoById(id).batteryLv = resp.value;
            if (id == this.playerModel.playerSelfInfo.userId)
                this.playerModel.playerSelfInfo.battery_lv = resp.value;
            //派发玩家炮台等级更新信号
            this.batteryLvUpdateSignal.dispatch(id);
        }
    };
    /**
     * 玩家加入房间
     * @param resp
     */
    RoomServer.prototype.onHuntingEnterRoomResp = function (resp) {
        PlayerManager_1.default.instance.playerInfo = PlayerManager_1.default.instance.playerInfo.concat(resp.playerInfo);
        //派发新玩家加入房间信号
        this.newPlayerSignal.dispatch(resp.playerInfo.userId);
    };
    /**
     * 玩家退出房间
     * @param resp userid
     */
    RoomServer.prototype.onHuntingExitRoomResp = function (resp) {
        this.playerExitRoomSignal.dispatch(resp.userId);
    };
    __decorate([
        inject(protocolSignals.HuntingRoomInfoRespSignal)
    ], RoomServer.prototype, "huntingRoomInfoRespSignal", void 0);
    __decorate([
        inject(RoomInfoInitSignal_1.default)
    ], RoomServer.prototype, "roomInfoInitSignal", void 0);
    __decorate([
        inject(ShowRoomSignal_1.default)
    ], RoomServer.prototype, "showRoomSignal", void 0);
    __decorate([
        inject(RoomModel_1.default)
    ], RoomServer.prototype, "roomModel", void 0);
    __decorate([
        inject(PlayerModel_1.default)
    ], RoomServer.prototype, "playerModel", void 0);
    __decorate([
        inject(protocolSignals.HuntingExitRoomRespSignal)
    ], RoomServer.prototype, "huntingExitRoomRespSignal", void 0);
    __decorate([
        inject(PlayerExitRoomSIgnal_1.default)
    ], RoomServer.prototype, "playerExitRoomSignal", void 0);
    __decorate([
        inject(protocolSignals.HuntingEnterRoomRespSignal)
    ], RoomServer.prototype, "huntingEnterRoomRespSignal", void 0);
    __decorate([
        inject(NewPlayerSignal_1.default)
    ], RoomServer.prototype, "newPlayerSignal", void 0);
    __decorate([
        inject(protocolSignals.UpdatePlayerRespSignal)
    ], RoomServer.prototype, "updatePlayerRespSignal", void 0);
    __decorate([
        inject(BalanceUpdateSignal_1.default)
    ], RoomServer.prototype, "balanceUpdateSignal", void 0);
    __decorate([
        inject(BatteryLvUpdateSignal_1.default)
    ], RoomServer.prototype, "batteryLvUpdateSignal", void 0);
    return RoomServer;
}(riggerIOC.Server));
exports.default = RoomServer;
},{"../../../protocol/signals/signals":273,"../../playerModule/models/PlayerModel":226,"../models/PlayerManager":237,"../models/RoomModel":238,"../signals/BalanceUpdateSignal":242,"../signals/BatteryLvUpdateSignal":243,"../signals/NewPlayerSignal":247,"../signals/PlayerExitRoomSIgnal":248,"../signals/RoomInfoInitSignal":249,"../signals/ShowRoomSignal":251}],240:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 自动捕鱼模式下,鱼被捕获的信号,携带参数鱼id,金币奖励
 */
var AutoHuntingFishHuntedSignal = /** @class */ (function (_super) {
    __extends(AutoHuntingFishHuntedSignal, _super);
    function AutoHuntingFishHuntedSignal() {
        return _super.call(this) || this;
    }
    return AutoHuntingFishHuntedSignal;
}(riggerIOC.Signal));
exports.default = AutoHuntingFishHuntedSignal;
},{}],241:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 自动捕鱼的信号,带参数 鱼id列表
 */
var AutoHuntingSignal = /** @class */ (function (_super) {
    __extends(AutoHuntingSignal, _super);
    function AutoHuntingSignal() {
        return _super.call(this) || this;
    }
    return AutoHuntingSignal;
}(riggerIOC.Signal));
exports.default = AutoHuntingSignal;
},{}],242:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 玩家余额更新,带参数玩家id
 */
var BalanceUpdateSignal = /** @class */ (function (_super) {
    __extends(BalanceUpdateSignal, _super);
    function BalanceUpdateSignal() {
        return _super.call(this) || this;
    }
    return BalanceUpdateSignal;
}(riggerIOC.Signal));
exports.default = BalanceUpdateSignal;
},{}],243:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 炮台等级更新,带参数玩家id
 */
var BatteryLvUpdateSignal = /** @class */ (function (_super) {
    __extends(BatteryLvUpdateSignal, _super);
    function BatteryLvUpdateSignal() {
        return _super.call(this) || this;
    }
    return BatteryLvUpdateSignal;
}(riggerIOC.Signal));
exports.default = BatteryLvUpdateSignal;
},{}],244:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 余额不足
 */
var CoinLackSignal = /** @class */ (function (_super) {
    __extends(CoinLackSignal, _super);
    function CoinLackSignal() {
        return _super.call(this) || this;
    }
    return CoinLackSignal;
}(riggerIOC.Signal));
exports.default = CoinLackSignal;
},{}],245:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 请求进入房间信号,带房间id
 */
var EnterRoomSignal = /** @class */ (function (_super) {
    __extends(EnterRoomSignal, _super);
    function EnterRoomSignal() {
        return _super.call(this) || this;
    }
    return EnterRoomSignal;
}(riggerIOC.Signal));
exports.default = EnterRoomSignal;
},{}],246:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 退出房间信号
 */
var ExitRoomSignal = /** @class */ (function (_super) {
    __extends(ExitRoomSignal, _super);
    function ExitRoomSignal() {
        return _super.call(this) || this;
    }
    return ExitRoomSignal;
}(riggerIOC.Signal));
exports.default = ExitRoomSignal;
},{}],247:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 新玩家加入房间
 */
var NewPlayerSignal = /** @class */ (function (_super) {
    __extends(NewPlayerSignal, _super);
    function NewPlayerSignal() {
        return _super.call(this) || this;
    }
    return NewPlayerSignal;
}(riggerIOC.Signal));
exports.default = NewPlayerSignal;
},{}],248:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 玩家退出房间,参数携带玩家id
 */
var PlayerExitRoomSignal = /** @class */ (function (_super) {
    __extends(PlayerExitRoomSignal, _super);
    function PlayerExitRoomSignal() {
        return _super.call(this) || this;
    }
    return PlayerExitRoomSignal;
}(riggerIOC.Signal));
exports.default = PlayerExitRoomSignal;
},{}],249:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 房间数据初始化完毕
 */
var RoomInfoInitSignal = /** @class */ (function (_super) {
    __extends(RoomInfoInitSignal, _super);
    function RoomInfoInitSignal() {
        return _super.call(this) || this;
    }
    return RoomInfoInitSignal;
}(riggerIOC.Signal));
exports.default = RoomInfoInitSignal;
},{}],250:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 房间资源动态加载完毕
 */
var RoomViewLoadSignal = /** @class */ (function (_super) {
    __extends(RoomViewLoadSignal, _super);
    function RoomViewLoadSignal() {
        return _super.call(this) || this;
    }
    return RoomViewLoadSignal;
}(riggerIOC.Signal));
exports.default = RoomViewLoadSignal;
},{}],251:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 展示房间界面信号
 */
var ShowRoomSignal = /** @class */ (function (_super) {
    __extends(ShowRoomSignal, _super);
    function ShowRoomSignal() {
        return _super.call(this) || this;
    }
    return ShowRoomSignal;
}(riggerIOC.Signal));
exports.default = ShowRoomSignal;
},{}],252:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Tips信号
 */
var ShowTipsSignal = /** @class */ (function (_super) {
    __extends(ShowTipsSignal, _super);
    function ShowTipsSignal() {
        return _super.call(this) || this;
    }
    return ShowTipsSignal;
}(riggerIOC.Signal));
exports.default = ShowTipsSignal;
},{}],253:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var UIWindow_1 = require("../../../utils/UIWindow");
var UIManager_1 = require("../../../manager/UIManager");
var inject = riggerIOC.inject;
var FUIAutoHuntTipsView_1 = require("../../../fui/roomScene/FUIAutoHuntTipsView");
var AttackPatternChangedSignal_1 = require("../../fightModule/signals/AttackPatternChangedSignal");
var FightModel_1 = require("../../fightModule/models/FightModel");
var AutoHuntTipsView = /** @class */ (function (_super) {
    __extends(AutoHuntTipsView, _super);
    function AutoHuntTipsView() {
        var _this = _super.call(this) || this;
        _this.needMask = true;
        _this.isCache = true;
        return _this;
    }
    AutoHuntTipsView.getUrl = function () {
        return FUIAutoHuntTipsView_1.default.URL;
    };
    AutoHuntTipsView.prototype.onInit = function () {
        _super.prototype.onInit.call(this);
    };
    AutoHuntTipsView.prototype.onShown = function () {
        _super.prototype.onShown.call(this);
        this.addEventListener();
        this.addProtocolListener();
        Laya.KeyBoardManager.enabled = false;
    };
    AutoHuntTipsView.prototype.onHide = function () {
        _super.prototype.onHide.call(this);
        this.removerEventListener();
        this.removerProtocolListener();
        Laya.KeyBoardManager.enabled = true;
    };
    AutoHuntTipsView.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
    };
    AutoHuntTipsView.prototype.layout = function () {
        var autoHuntGroup = new riggerLayout.Group(this.contentPane);
        autoHuntGroup.horizontalCenter = 0;
        autoHuntGroup.verticalCenter = 0;
        autoHuntGroup.width = riggerLayout.LayoutSpec.create(1, this.contentPane.width / this.contentPane.height, "60%");
        autoHuntGroup.height = riggerLayout.LayoutSpec.create(this.contentPane.width / this.contentPane.height, -1, "60%");
        RiggerLayout.layer.addChild(autoHuntGroup);
    };
    AutoHuntTipsView.prototype.removeLayout = function () {
        RiggerLayout.layer.remove(this.contentPane);
    };
    AutoHuntTipsView.prototype.funEx = function () {
    };
    AutoHuntTipsView.prototype.addEventListener = function () {
        this.contentPane.on(Laya.Event.CLICK, this, this.onTipsClick);
    };
    AutoHuntTipsView.prototype.removerEventListener = function () {
        this.contentPane.off(Laya.Event.CLICK, this, this.onTipsClick);
    };
    AutoHuntTipsView.prototype.addProtocolListener = function () {
    };
    AutoHuntTipsView.prototype.removerProtocolListener = function () {
    };
    AutoHuntTipsView.prototype.onTipsClick = function (e) {
        var name = e.target.parent['$owner'].name;
        if (!name)
            return;
        switch (name) {
            case 'enterBtn':
                this.attactPatternChangedSignal.dispatch(FightModel_1.AttactPattern.normal);
                this.closeWindow();
                break;
            case 'cancelBtn':
            case 'closeBtn':
                this.closeWindow();
                break;
            default:
                break;
        }
    };
    AutoHuntTipsView.prototype.closeWindow = function () {
        UIManager_1.default.instance.hideWindow(this);
    };
    __decorate([
        inject(AttackPatternChangedSignal_1.default)
    ], AutoHuntTipsView.prototype, "attactPatternChangedSignal", void 0);
    return AutoHuntTipsView;
}(UIWindow_1.default));
exports.default = AutoHuntTipsView;
},{"../../../fui/roomScene/FUIAutoHuntTipsView":117,"../../../manager/UIManager":164,"../../../utils/UIWindow":305,"../../fightModule/models/FightModel":201,"../../fightModule/signals/AttackPatternChangedSignal":203}],254:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var UIWindow_1 = require("../../../utils/UIWindow");
var FUIAutoHuntingView_1 = require("../../../fui/roomScene/FUIAutoHuntingView");
var UIManager_1 = require("../../../manager/UIManager");
var DataMon_1 = require("../../../data/tpls/DataMon");
var inject = riggerIOC.inject;
var protocolSignals = require("../../../protocol/signals/signals");
var fightServer_1 = require("../../fightModule/servers/fightServer");
var AutoHuntingSignal_1 = require("../signals/AutoHuntingSignal");
var AttackPatternChangedSignal_1 = require("../../fightModule/signals/AttackPatternChangedSignal");
var FightModel_1 = require("../../fightModule/models/FightModel");
var AutoHuntingFishHuntedSignal_1 = require("../signals/AutoHuntingFishHuntedSignal");
var FishManager_1 = require("../models/FishManager");
var FUIhuntingFishItem_1 = require("../../../fui/roomScene/FUIhuntingFishItem");
var FishEnum_1 = require("../../../script/enum/FishEnum");
var ShowTipsSignal_1 = require("../signals/ShowTipsSignal");
var FUITipsView_1 = require("../../../fui/roomScene/FUITipsView");
var AutoHuntingView = /** @class */ (function (_super) {
    __extends(AutoHuntingView, _super);
    function AutoHuntingView() {
        var _this = _super.call(this) || this;
        _this.fishList = [];
        //已选择的鱼Id
        _this.selectFishId = [];
        _this.selectConfig = '';
        _this.fishHuntedList = [];
        _this.needMask = true;
        _this.isCache = true;
        return _this;
    }
    AutoHuntingView.getUrl = function () {
        return FUIAutoHuntingView_1.default.URL;
    };
    AutoHuntingView.prototype.onInit = function () {
        _super.prototype.onInit.call(this);
        this.fishList = this.fishTypeList();
        this.contentPane.m_fishList.itemRenderer = Laya.Handler.create(this, this.renderFishListItem, null, false);
        this.contentPane.m_fishList.numItems = this.fishList.length;
        this.autoHuntingFishHuntedSignal.on(this, this.onFishHunted);
        this.attactPatternChangedSignal.on(this, this.onAttactPatternChanged);
    };
    AutoHuntingView.prototype.onShown = function () {
        _super.prototype.onShown.call(this);
        this.addEventListener();
        this.addProtocolListener();
        Laya.KeyBoardManager.enabled = false;
        this.loadConfig();
    };
    AutoHuntingView.prototype.onHide = function () {
        _super.prototype.onHide.call(this);
        this.removerEventListener();
        this.removerProtocolListener();
        Laya.KeyBoardManager.enabled = true;
    };
    AutoHuntingView.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this.autoHuntingFishHuntedSignal.off(this, this.onFishHunted);
        this.attactPatternChangedSignal.off(this, this.onAttactPatternChanged);
    };
    /**
     * 鱼列表渲染回调
     * @param index
     * @param item
     */
    AutoHuntingView.prototype.renderFishListItem = function (index, item) {
        var fishData = DataMon_1.default.getData(this.fishList[index]);
        if ([-1].indexOf(fishData.uiId) != -1)
            fishData.uiId = 1;
        var ui = "ui://briefUI/static_fish_" + fishData.uiId;
        item.m_fishRatioTxt.font = 'ui://75q2l4mud7af729';
        var rate = fishData.rate[0] == fishData.rate[1] ? fishData.rate[0] : fishData.rate[0] + "-" + fishData.rate[1];
        if ([22, 23, 24, 25, 26, 27].indexOf(fishData.fishType) != -1) {
            item.m_nameLoader.visible = true;
            item.m_fishRatioTxt.visible = false;
            item.m_nameLoader.url = "ui://briefUI/fish_" + fishData.fishType + "_name";
        }
        else {
            item.m_nameLoader.visible = true;
            item.m_fishRatioTxt.visible = true;
        }
        item.m_fishLoader.setScale(1, 1);
        switch (fishData.buffType) {
            case FishEnum_1.fishTypeEnum.triStar:
                ui = 'ui://briefUI/static_triStar';
                break;
            case FishEnum_1.fishTypeEnum.four:
                ui = 'ui://briefUI/static_four';
                break;
            case FishEnum_1.fishTypeEnum.jackPot:
                ui = 'ui://briefUI/static_jackPot';
                break;
            case FishEnum_1.fishTypeEnum.catchAll:
                ui = "ui://briefUI/static_catchAll";
                item.m_fishLoader.setScale(2, 2);
                break;
            case FishEnum_1.fishTypeEnum.frozen:
                break;
            case FishEnum_1.fishTypeEnum.boom:
                break;
            default:
                break;
        }
        item.m_fishLoader.url = ui;
        item.m_fishRatioTxt.text = "" + rate;
        item.m_c1.selectedIndex = 0;
        item.data = fishData.id;
    };
    AutoHuntingView.prototype.layout = function () {
        var autoHuntGroup = new riggerLayout.Group(this.contentPane);
        autoHuntGroup.horizontalCenter = 0;
        autoHuntGroup.verticalCenter = 0;
        autoHuntGroup.width = riggerLayout.LayoutSpec.create(1, this.contentPane.width / this.contentPane.height, "80%");
        autoHuntGroup.height = riggerLayout.LayoutSpec.create(this.contentPane.width / this.contentPane.height, -1, "70%");
        RiggerLayout.layer.addChild(autoHuntGroup);
    };
    AutoHuntingView.prototype.removeLayout = function () {
        RiggerLayout.layer.remove(this.contentPane);
    };
    AutoHuntingView.prototype.funEx = function (index) {
        if (index === void 0) { index = 0; }
        this.contentPane.m_c1.selectedIndex = index;
    };
    AutoHuntingView.prototype.addEventListener = function () {
        this.contentPane.m_closeBtn.on(Laya.Event.CLICK, this, this.closeWindow);
        this.contentPane.m_fishList.on(fairygui.Events.CLICK_ITEM, this, this.onSelectFishItem);
        this.contentPane.on(Laya.Event.CLICK, this, this.onViewClick);
    };
    AutoHuntingView.prototype.removerEventListener = function () {
        this.contentPane.m_closeBtn.off(Laya.Event.CLICK, this, this.closeWindow);
        this.contentPane.m_fishList.off(fairygui.Events.CLICK_ITEM, this, this.onSelectFishItem);
        this.contentPane.off(Laya.Event.CLICK, this, this.onViewClick);
    };
    AutoHuntingView.prototype.addProtocolListener = function () {
        this.huntingSettingRespSignal.on(this, this.onHuntingSettingResp);
        // this.autoHuntingFishHuntedSignal.on(this, this.onFishHunted);
    };
    AutoHuntingView.prototype.removerProtocolListener = function () {
        this.huntingSettingRespSignal.off(this, this.onHuntingSettingResp);
        // this.autoHuntingFishHuntedSignal.off(this, this.onFishHunted);
    };
    /**
     * 自动捕鱼配置返回
     * @param resp
     */
    AutoHuntingView.prototype.onHuntingSettingResp = function (resp) {
        if (resp.key == 1) {
            this.selectFishId = [];
            this.selectConfig = resp.value;
            var config = ("" + this.selectConfig).split('');
            for (var i = 0; i < config.length; i++) {
                var item = this.contentPane.m_fishList.getChildAt(i);
                item.m_c1.selectedIndex = Number(config[i]);
                if (Number(config[i]) == 1)
                    this.selectFishId.push(Number(item.data));
            }
        }
    };
    AutoHuntingView.prototype.onViewClick = function (e) {
        var target = e.target["$owner"];
        if (!target || !target.parent)
            return;
        var name = target.parent.name;
        switch (name) {
            case 'selectAllBtn':
                this.selectAll();
                break;
            case 'reselectBtn':
                this.reselectAll();
                break;
            case 'loadConfigBtn':
                this.loadConfig();
                break;
            case 'startHuntBtn':
                this.startHunt();
                break;
            case 'changeAutoBtn':
                this.changeAutoConfig();
                break;
            case 'cancelAutoBtn':
                this.cancelAutoHunting();
                break;
            default:
                break;
        }
    };
    AutoHuntingView.prototype.closeWindow = function () {
        // this.selectFishId = []; //清空选择鱼的id列表
        UIManager_1.default.instance.hideWindow(this);
    };
    /**
     * 返回鱼的种类列表(已去重)
     */
    AutoHuntingView.prototype.fishTypeList = function () {
        var fishIndexList = DataMon_1.default.getIds();
        var fishType = [];
        var fishTypeList = [];
        for (var i = 0; i < fishIndexList.length; i++) {
            var fishData = DataMon_1.default.getData(fishIndexList[i]);
            if (fishType.indexOf(fishData.fishType) == -1) {
                fishTypeList.push(fishIndexList[i]);
                fishType.push(fishData.fishType);
            }
        }
        return fishTypeList;
    };
    /**
     * 自动捕鱼配置选择
     * @param item
     */
    AutoHuntingView.prototype.onSelectFishItem = function (item) {
        item.m_c1.selectedIndex = 1 - item.m_c1.selectedIndex;
        if (this.selectFishId.indexOf(Number(item.data)) == -1) {
            this.selectFishId.push(Number(item.data));
        }
        else {
            for (var i = 0; i < this.selectFishId.length; i++) {
                if (this.selectFishId[i] == Number(item.data)) {
                    this.selectFishId.splice(i, 1);
                    return;
                }
            }
        }
    };
    /**
     * 选择全部
     */
    AutoHuntingView.prototype.selectAll = function () {
        this.selectFishId = [];
        var length = this.contentPane.m_fishList.numChildren;
        for (var i = 0; i < length; i++) {
            var item = this.contentPane.m_fishList.getChildAt(i);
            item.m_c1.selectedIndex = 1;
            this.selectFishId.push(Number(item.data));
        }
    };
    /**
     * 重新选择
     */
    AutoHuntingView.prototype.reselectAll = function () {
        this.selectFishId = [];
        var length = this.contentPane.m_fishList.numChildren;
        for (var i = 0; i < length; i++) {
            var item = this.contentPane.m_fishList.getChildAt(i);
            item.m_c1.selectedIndex = 0;
        }
    };
    /**
     * 加载上次配置
     */
    AutoHuntingView.prototype.loadConfig = function () {
        this.fightServer.huntingSettingReq(0, '1');
    };
    /**
     * 每个item认为0-未选择 1-选择,组合为00001类的十进制数
     */
    AutoHuntingView.prototype.createConfig = function () {
        var selectConfig = '';
        var length = this.contentPane.m_fishList.numChildren;
        for (var i = 0; i < length; i++) {
            var item = this.contentPane.m_fishList.getChildAt(i);
            if (item.m_c1.selectedIndex == 1) {
                selectConfig += '1';
            }
            else {
                selectConfig += '0';
            }
        }
        return selectConfig;
    };
    /**
     * 更改自动
     */
    AutoHuntingView.prototype.changeAutoConfig = function () {
        this.contentPane.m_c1.selectedIndex = 0;
    };
    /**
     * 取消自动
     */
    AutoHuntingView.prototype.cancelAutoHunting = function () {
        this.attactPatternChangedSignal.dispatch(FightModel_1.AttactPattern.normal);
        this.closeWindow();
    };
    AutoHuntingView.prototype.onAttactPatternChanged = function (pattern) {
        if (pattern == FightModel_1.AttactPattern.normal) {
            Laya.timer.clearAll(this);
        }
    };
    /**
     * 鱼被捕获的信号
     * @param param0
     */
    AutoHuntingView.prototype.onFishHunted = function (_a) {
        var fishId = _a[0], coin = _a[1];
        var fishInfo = FishManager_1.default.instance.getFishInfoById(fishId);
        var fishType = DataMon_1.default.getData(fishInfo.monTypeId).fishType;
        var flag = false;
        for (var i = 0; i < this.fishHuntedList.length; i++) {
            if (this.fishHuntedList[i].fishType == fishType) {
                this.fishHuntedList[i].num += 1;
                this.fishHuntedList[i].totalCoin += coin;
                flag = true;
            }
        }
        if (!flag) {
            this.fishHuntedList.push({ dataId: DataMon_1.default.getData(fishInfo.monTypeId).id, fishType: fishType, num: 1, totalCoin: coin });
        }
        this.fishHuntedList = this.fishHuntedList.sort(this.sortFishHunted);
        this.updateFishHuntedList();
    };
    /**
     * 按照鱼类型 升序
     * @param fishA
     * @param fishB
     */
    AutoHuntingView.prototype.sortFishHunted = function (fishA, fishB) {
        return fishA.fishType - fishB.fishType;
    };
    /**
     * 更新在自动捕鱼模式下,已捕获鱼的列表
     */
    AutoHuntingView.prototype.updateFishHuntedList = function () {
        this.contentPane.m_huntingList.removeChildren(0, -1, true);
        for (var i = 0; i < this.fishHuntedList.length; i++) {
            var huntingFishItem = FUIhuntingFishItem_1.default.createInstance();
            var dataId = this.fishHuntedList[i].dataId;
            var fishData = DataMon_1.default.getData(dataId);
            var rate = fishData.rate[0];
            if ([-1].indexOf(fishData.uiId) != -1)
                fishData.uiId = 1; //无素材替代
            var ui = "ui://briefUI/static_fish_" + fishData.uiId;
            var buffType = fishData.buffType;
            huntingFishItem.m_pricesTxt.font = 'ui://0lwk28v8n8sw75w';
            huntingFishItem.m_nameLoader.url = '';
            if ([22, 23, 24, 25, 26, 27].indexOf(fishData.fishType) != -1) {
                huntingFishItem.m_nameLoader.visible = true;
                huntingFishItem.m_pricesTxt.visible = false;
                huntingFishItem.m_nameLoader.url = "ui://briefUI/fish_" + fishData.fishType + "_name";
            }
            else {
                huntingFishItem.m_nameLoader.visible = true;
                huntingFishItem.m_pricesTxt.visible = true;
            }
            switch (buffType) {
                case FishEnum_1.fishTypeEnum.triStar:
                    ui = 'ui://briefUI/static_triStar';
                    break;
                case FishEnum_1.fishTypeEnum.four:
                    ui = 'ui://briefUI/static_four';
                    break;
                case FishEnum_1.fishTypeEnum.jackPot:
                    ui = 'ui://roomScene/jackPot';
                    break;
                case FishEnum_1.fishTypeEnum.catchAll:
                    ui = "ui://roomScene/catchAll";
                    break;
                case FishEnum_1.fishTypeEnum.frozen:
                    break;
                case FishEnum_1.fishTypeEnum.boom:
                    break;
                default:
                    break;
            }
            huntingFishItem.m_fishLoader.url = ui;
            huntingFishItem.m_countTxt.text = this.fishHuntedList[i].num + '';
            huntingFishItem.m_pricesTxt.text = rate + '';
            huntingFishItem.m_totalWinTxt.text = this.fishHuntedList[i].totalCoin / 100 + '';
            this.contentPane.m_huntingList.addChild(huntingFishItem);
        }
    };
    /**
     * 开始自动捕鱼
     */
    AutoHuntingView.prototype.startHunt = function () {
        var _this = this;
        if (!this.selectFishId || this.selectFishId.length <= 0) {
            // this.closeWindow();
            var tipsView_1 = FUITipsView_1.default.createInstance();
            tipsView_1.m_tipsLoader.url = "ui://roomScene/tips" + 3;
            tipsView_1.setXY(850, 480);
            this.addChild(tipsView_1);
            tipsView_1.m_t0.play(Laya.Handler.create(this, function () {
                tipsView_1 && tipsView_1.removeFromParent();
            }), 1);
            return;
        }
        this.selectConfig = '';
        this.selectConfig = this.createConfig();
        this.fightServer.huntingSettingReq(1, this.selectConfig); //服务器存储配置
        this.selectFishId = this.selectFishId.sort(this.fishWorthSort); //排序
        var selectFishType = this.idToType(); //转换鱼Id为鱼类型,唯一标识
        this.attactPatternChangedSignal.dispatch(FightModel_1.AttactPattern.auto); //战斗模式改为自动捕鱼
        Laya.timer.clearAll(this);
        Laya.timer.loop(24, this, function () {
            _this.autoHuntingSignal.dispatch(selectFishType); //派发开始自动捕鱼的信号
        });
        this.closeWindow();
    };
    /**
     * 按照鱼的价值降序
     * @param fishAId
     * @param fishBId
     */
    AutoHuntingView.prototype.fishWorthSort = function (fishAId, fishBId) {
        var fishARate = DataMon_1.default.getData(fishAId).rate[0];
        var fishBRate = DataMon_1.default.getData(fishBId).rate[0];
        return fishBRate - fishARate;
    };
    /**
     * 所选择鱼id列表转为 鱼类型列表
     */
    AutoHuntingView.prototype.idToType = function () {
        var fishType = [];
        for (var i = 0; i < this.selectFishId.length; i++) {
            fishType.push(DataMon_1.default.getData(this.selectFishId[i]).fishType);
        }
        return fishType;
    };
    __decorate([
        inject(fightServer_1.default)
    ], AutoHuntingView.prototype, "fightServer", void 0);
    __decorate([
        inject(protocolSignals.HuntingSettingRespSignal)
    ], AutoHuntingView.prototype, "huntingSettingRespSignal", void 0);
    __decorate([
        inject(AutoHuntingSignal_1.default)
    ], AutoHuntingView.prototype, "autoHuntingSignal", void 0);
    __decorate([
        inject(AttackPatternChangedSignal_1.default)
    ], AutoHuntingView.prototype, "attactPatternChangedSignal", void 0);
    __decorate([
        inject(AutoHuntingFishHuntedSignal_1.default)
    ], AutoHuntingView.prototype, "autoHuntingFishHuntedSignal", void 0);
    __decorate([
        inject(ShowTipsSignal_1.default)
    ], AutoHuntingView.prototype, "showTipsSignal", void 0);
    return AutoHuntingView;
}(UIWindow_1.default));
exports.default = AutoHuntingView;
},{"../../../data/tpls/DataMon":60,"../../../fui/roomScene/FUIAutoHuntingView":118,"../../../fui/roomScene/FUITipsView":138,"../../../fui/roomScene/FUIhuntingFishItem":147,"../../../manager/UIManager":164,"../../../protocol/signals/signals":273,"../../../script/enum/FishEnum":282,"../../../utils/UIWindow":305,"../../fightModule/models/FightModel":201,"../../fightModule/servers/fightServer":202,"../../fightModule/signals/AttackPatternChangedSignal":203,"../models/FishManager":236,"../signals/AutoHuntingFishHuntedSignal":240,"../signals/AutoHuntingSignal":241,"../signals/ShowTipsSignal":252}],255:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var inject = riggerIOC.inject;
var AutoHuntingView_1 = require("./AutoHuntingView");
var AutoHuntingViewMediator = /** @class */ (function (_super) {
    __extends(AutoHuntingViewMediator, _super);
    function AutoHuntingViewMediator() {
        return _super.call(this) || this;
    }
    AutoHuntingViewMediator.prototype.onInit = function () {
    };
    AutoHuntingViewMediator.prototype.onShown = function () {
    };
    AutoHuntingViewMediator.prototype.onHide = function () {
    };
    AutoHuntingViewMediator.prototype.dispose = function () {
    };
    __decorate([
        inject(AutoHuntingView_1.default)
    ], AutoHuntingViewMediator.prototype, "autoHuntingView", void 0);
    return AutoHuntingViewMediator;
}(riggerIOC.Mediator));
exports.default = AutoHuntingViewMediator;
},{"./AutoHuntingView":254}],256:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FUIwaveAniView_1 = require("../../../fui/roomScene/FUIwaveAniView");
var VideoPlayerView_1 = require("../../../commonView/VideoPlayerView");
var VideoType_1 = require("../../../definitions/VideoType");
var ScreenMode_1 = require("../../../definitions/ScreenMode");
var BgWaveAniView = /** @class */ (function (_super) {
    __extends(BgWaveAniView, _super);
    function BgWaveAniView() {
        return _super.call(this) || this;
    }
    BgWaveAniView.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
        this.initBgWaveAni();
    };
    BgWaveAniView.prototype.initBgWaveAni = function () {
        var videoPlayer1 = new VideoPlayerView_1.default();
        var videoPlayer2 = new VideoPlayerView_1.default();
        var params = new VideoPlayerView_1.VideoPlayerViewParams();
        params.url = "res/spine/bgWaveAni/water.sk";
        params.type = VideoType_1.VideoType.Skeleton;
        params.screenMode = ScreenMode_1.ScreenMode.None;
        videoPlayer1.init(params);
        videoPlayer1.setScale(1, 1);
        videoPlayer1.play("1", true);
        videoPlayer1.setXY(650, 500);
        videoPlayer2.init(params);
        videoPlayer2.setScale(1, 1);
        videoPlayer2.play("2", true);
        videoPlayer2.setXY(800, 200);
        this.addChild(videoPlayer1);
        this.addChild(videoPlayer2);
    };
    return BgWaveAniView;
}(FUIwaveAniView_1.default));
exports.BgWaveAniView = BgWaveAniView;
},{"../../../commonView/VideoPlayerView":51,"../../../definitions/ScreenMode":68,"../../../definitions/VideoType":69,"../../../fui/roomScene/FUIwaveAniView":157}],257:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var FUIBulletView_1 = require("../../../fui/roomScene/FUIBulletView");
var BulletUtils_1 = require("../../../script/bullet/utils/BulletUtils");
var NormalBullet_1 = require("../../../script/bullet/bulletScript/NormalBullet");
var FishManager_1 = require("../models/FishManager");
var PlayerManager_1 = require("../models/PlayerManager");
var BulletManager_1 = require("../models/BulletManager");
var inject = riggerIOC.inject;
var PlayerModel_1 = require("../../playerModule/models/PlayerModel");
var AttackPatternChangedSignal_1 = require("../../fightModule/signals/AttackPatternChangedSignal");
var FightModel_1 = require("../../fightModule/models/FightModel");
var fightServer_1 = require("../../fightModule/servers/fightServer");
var RoomModel_1 = require("../models/RoomModel");
var DataHuntingRoom_1 = require("../../../data/tpls/DataHuntingRoom");
var UIManager_1 = require("../../../manager/UIManager");
var AutoHuntingView_1 = require("./AutoHuntingView");
var AutoHuntTipsView_1 = require("./AutoHuntTipsView");
var VideoPlayerView_1 = require("../../../commonView/VideoPlayerView");
var ScreenMode_1 = require("../../../definitions/ScreenMode");
var VideoType_1 = require("../../../definitions/VideoType");
var BulletView = /** @class */ (function (_super) {
    __extends(BulletView, _super);
    function BulletView() {
        return _super.call(this) || this;
    }
    BulletView.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
        this.addEventListener();
        this.initViewController();
        this.initAttackModelAni();
        this._playerUiArr = new Object();
    };
    BulletView.prototype.dispose = function () {
        this.removeEventListener();
    };
    BulletView.prototype.addEventListener = function () {
        this.m_lockBtn.on(Laya.Event.CLICK, this, this.onLockClick);
        this.m_autoFireBtn.on(Laya.Event.CLICK, this, this.onAutoFireClick);
        this.onClick(this, this.onBulletViewClick);
        Laya.stage.on(Laya.Event.KEY_DOWN, this, this.onKeyDown);
    };
    BulletView.prototype.removeEventListener = function () {
        this.m_lockBtn.off(Laya.Event.CLICK, this, this.onLockClick);
        this.m_autoFireBtn.off(Laya.Event.CLICK, this, this.onAutoFireClick);
        this.offClick(this, this.onBulletViewClick);
        Laya.stage.off(Laya.Event.KEY_DOWN, this, this.onKeyDown);
    };
    /**
     * 初始化玩家入座,子弹
     */
    BulletView.prototype.init = function () {
        var playerInfo = PlayerManager_1.default.instance.playerInfo;
        for (var i = 0; i < playerInfo.length; i++) {
            this.showViewById(playerInfo[i].userId);
        }
        if (BulletManager_1.default.instance.bulletInfo) {
            for (var j = 0; j < BulletManager_1.default.instance.bulletInfo.length; j++) {
                this.addBullet(BulletManager_1.default.instance.bulletInfo[j]);
            }
        }
    };
    BulletView.prototype.initAttackModelAni = function () {
        var params = new VideoPlayerView_1.VideoPlayerViewParams();
        params.url = 'res/spine/attackModelAni/suoding.sk';
        params.screenMode = ScreenMode_1.ScreenMode.None;
        params.type = VideoType_1.VideoType.Skeleton;
        if (!this.attackModelVideoPlayer) {
            this.attackModelVideoPlayer = new VideoPlayerView_1.default();
            this.attackModelVideoPlayer.init(params);
            this.attackModelVideoPlayer.setScale(1, 1);
        }
        this.attackModelVideoPlayer.setXY(130, 130);
        this.attackModelVideoPlayer.play('1', true);
        this.m_attackModelAniView.addChild(this.attackModelVideoPlayer);
    };
    /**
     * 初始化座位
     */
    BulletView.prototype.initViewController = function () {
        //left
        this.m_player1.m_c1.selectedIndex = 0;
        this.m_player3.m_c1.selectedIndex = 0;
        //right
        this.m_player2.m_c1.selectedIndex = 1;
        this.m_player4.m_c1.selectedIndex = 1;
        //bottom
        this.m_player1.m_gunView.m_c1.selectedIndex = 0;
        this.m_player2.m_gunView.m_c1.selectedIndex = 0;
        //top
        this.m_player3.m_gunView.m_c1.selectedIndex = 1;
        this.m_player4.m_gunView.m_c1.selectedIndex = 1;
        this.m_player3.m_gunView.m_gun.rotation = 180;
        this.m_player4.m_gunView.m_gun.rotation = 180;
        for (var i = 0; i < 4; i++) {
            this["m_player" + (i + 1)].m_c2.selectedIndex = 1;
            this["m_player" + (i + 1)].m_gunView.m_gun.m_c1.selectedIndex = 0;
            this["m_player" + (i + 1)].m_gunView.m_gun.m_gunLoader.playing = false;
            this["m_player" + (i + 1)].m_gunView.m_gun.m_gunLoader.frame = 1;
        }
    };
    Object.defineProperty(BulletView.prototype, "playerUiArr", {
        /**玩家炮台ui集合 */
        get: function () {
            return this._playerUiArr;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 玩家入座
     * @param id
     */
    BulletView.prototype.showViewById = function (id) {
        var roomRate = Number(DataHuntingRoom_1.default.getData(this.roomModel.roomType).rate.toFixed(1));
        var playerInfo = PlayerManager_1.default.instance.findPlayerInfoById(id);
        var batteryLv = playerInfo.batteryLv;
        var pos = playerInfo.pos;
        //视图未固定
        // this._playerUiArr[pos] = this[`m_player${pos}`];
        //固定视图, 始终为从下至上的打击
        if ([3, 4].indexOf(this.playerModel.playerSelfInfo.pos) != -1) {
            //上方,需翻转界面
            var arr = [3, 4, 1, 2];
            this._playerUiArr[pos] = this["m_player" + arr[pos - 1]];
        }
        else {
            //下方,正常入座
            this._playerUiArr[pos] = this["m_player" + pos];
        }
        var player = this._playerUiArr[pos];
        player.data = 'invalid';
        player.m_c2.selectedIndex = 0;
        player.m_infoView.m_coinTxt.text = (playerInfo.balance / 100).toFixed(2) + '';
        if (player.m_infoView.m_coinTxt.text.indexOf(".") == -1)
            player.m_infoView.m_coinTxt.text += ".00";
        //name battery
        if (id == this.playerModel.playerSelfInfo.userId) {
            player.m_c3.selectedIndex = 0;
            player.m_infoView.m_nameTxt.text = playerInfo.name;
            player.m_goldList.init(playerInfo.pos);
            player.m_gunView.m_batteryLvAddBtn.visible = true;
            player.m_gunView.m_batteryLvSubBtn.visible = true;
            player.m_gunView.m_batteryLoader.url = "ui://roomScene/battery1";
        }
        else {
            player.m_c3.selectedIndex = 1;
            player.m_infoView.m_nameTxt.text = playerInfo.name.substring(0, playerInfo.name.length - 4) + '****';
            player.m_gunView.m_batteryLvAddBtn.visible = false;
            player.m_gunView.m_batteryLvSubBtn.visible = false;
            player.m_gunView.m_batteryLoader.url = "ui://roomScene/battery2";
        }
        //batteryLv
        var gunUiName = [0, 1, 2];
        var index;
        if (playerInfo.batteryLv < 10)
            index = 0;
        else if (playerInfo.batteryLv < 100)
            index = 1;
        else
            index = 2;
        player.m_gunView.m_gun.m_c1.selectedIndex = gunUiName[index];
        player.m_gunView.m_gunLvTxt.text = "" + batteryLv * roomRate;
        if (player.m_gunView.m_gunLvTxt.text.indexOf('.') != -1) {
            player.m_gunView.m_gunLvTxt.text = "" + (batteryLv * roomRate).toFixed(1);
        }
    };
    /**
     * 隐藏座位
     * @param pos
     */
    BulletView.prototype.hideViewById = function (id) {
        var playerInfo = PlayerManager_1.default.instance.findPlayerInfoById(id);
        var pos = playerInfo.pos;
        var player = this._playerUiArr[pos];
        player.m_c2.selectedIndex = 1;
        player.m_infoView.m_coinTxt.text = '';
        player.m_infoView.m_nameTxt.text = '';
        player.data = 'valid';
        this._playerUiArr[pos] = '';
        PlayerManager_1.default.instance.deletePlayerInfoById(id);
    };
    /**
     * 键盘事件
     * @param e
     */
    BulletView.prototype.onKeyDown = function (e) {
        var keyCode = e.keyCode;
        switch (keyCode) {
            case 87: //W 锁定攻击模式
                this.onLockClick();
                break;
            case 81: //Q 自动攻击模式
                this.onAutoFireClick();
                break;
            default:
                break;
        }
    };
    /**
     * 子弹界面点击处理,主要监听炮台等级调整按钮
     * @param e
     */
    BulletView.prototype.onBulletViewClick = function (e) {
        var target = e.target;
        if (!target.parent['$owner'])
            return;
        var name = target.parent['$owner'].name;
        if (!name)
            return;
        if (name.indexOf('batteryLv') != -1) {
            e.stopPropagation();
            if (name == 'batteryLvAddBtn') {
                this.changeBatteryLv('up');
            }
            else {
                this.changeBatteryLv('down');
            }
        }
    };
    /**
     * 改变炮台威力
     * @param v 'down'-减小, 'up'-增加
     */
    BulletView.prototype.changeBatteryLv = function (v) {
        var batteryList = DataHuntingRoom_1.default.getData(this.roomModel.roomType).batteryLvList;
        var nowLv = this.playerModel.playerSelfInfo.battery_lv;
        var index = batteryList.indexOf(nowLv);
        if (v == 'down') {
            index -= 1;
            if (index < 0)
                index = batteryList.length - 1;
            this.fightServer.changeBatteryLvReq(batteryList[index]);
        }
        else if (v == 'up') {
            index += 1;
            if (index > batteryList.length - 1)
                index = 0;
            this.fightServer.changeBatteryLvReq(batteryList[index]);
        }
    };
    /**
     * 键盘调整炮台角度
     * @param v 'left'-左, 'right'-右7
     */
    BulletView.prototype.changeBatteryAngle = function (v) {
        if (this.fightModel.attactPattern != FightModel_1.AttactPattern.normal)
            return;
        var pos = this.playerModel.playerSelfInfo.pos;
        // let playerDirection: string = [3, 4].indexOf(pos) != -1 ? 'top' : 'bottom';
        var ratio;
        if (v == 'left') {
            // ratio = playerDirection == 'top' ? 1 : -1;
            ratio = -1;
        }
        if (v == 'right') {
            // ratio = playerDirection == 'top' ? -1 : 1;
            ratio = 1;
        }
        var ui = this._playerUiArr[pos];
        var angle;
        // if(playerDirection == 'top') {
        //     if(ui.m_gunView.m_gun.rotation < 0) ui.m_gunView.m_gun.rotation = 360 + ui.m_gunView.m_gun.rotation;   //方向键控制炮台角度区间[0,360],与发射炮弹时通过向量算的角度[0, 180]U[-180,0]，需转换
        //     angle = ui.m_gunView.m_gun.rotation + ratio * 10;
        //     if(angle <= 90) angle = 90;
        //     if(angle >= 270) angle = 270;
        // }
        // else {
        angle = ui.m_gunView.m_gun.rotation + ratio * 10;
        if (angle <= -90)
            angle = -90;
        if (angle >= 90)
            angle = 90;
        // }
        ui.m_gunView.m_gun.rotation = angle;
    };
    /**
     * 战斗模式改变
     */
    BulletView.prototype.onLockClick = function (e) {
        e && e.stopPropagation();
        if (this.fightModel.attactPattern == FightModel_1.AttactPattern.lock) {
            this.attacePatternChangedSignal.dispatch(FightModel_1.AttactPattern.normal);
        }
        else if (this.fightModel.attactPattern == FightModel_1.AttactPattern.normal) {
            //派发战斗模式改变为锁定状态
            this.attacePatternChangedSignal.dispatch(FightModel_1.AttactPattern.lock);
        }
        else {
            //自动模式
            UIManager_1.default.instance.showWindow(AutoHuntTipsView_1.default, false, UIManager_1.default.instance.popupLayer);
        }
    };
    /**
     * 自动攻击
     */
    BulletView.prototype.onAutoFireClick = function (e) {
        e && e.stopPropagation();
        //自由攻击
        var arg;
        if (this.fightModel.attactPattern == FightModel_1.AttactPattern.auto)
            arg = 1;
        else
            arg = 0;
        UIManager_1.default.instance.showWindow(AutoHuntingView_1.default, false, UIManager_1.default.instance.popupLayer, arg);
    };
    /**
     * 添加子弹
     * @param bulletInfo
     */
    BulletView.prototype.addBullet = function (bulletInfo) {
        var bullet = BulletUtils_1.default.getBullet(); //暂定,后续根据子弹类型获取对应实例
        var targetFish = null;
        if (bulletInfo.monId > 0) {
            //获取锁定鱼的组件
            var fish = FishManager_1.default.instance.getFishgObjectById(bulletInfo.monId);
            var fishInfo = FishManager_1.default.instance.getFishInfoById(bulletInfo.monId);
            if (!fishInfo)
                return;
            // if (fishInfo.monTypeId <= 9) { //读表
            targetFish = fish;
            // }
        }
        var playerInfo = PlayerManager_1.default.instance.findPlayerInfoById(bulletInfo.userId);
        var batteryLv = playerInfo.batteryLv;
        var pos = playerInfo.pos; //炮台编号
        var player = this._playerUiArr[pos];
        var batteryPoint = this.getAxisPoint(player.m_gunView.m_gun); // 暂定,后续根据炮台编号读取对应炮台
        var startPoint = new Laya.Point(batteryPoint.x - bullet.width * bullet.pivotX, batteryPoint.y - bullet.height * bullet.pivotY); // 暂定,后续根据炮台编号读取对应炮台
        var fireClickPoint = new Laya.Point(bulletInfo.x, bulletInfo.y);
        if (bulletInfo.userId != this.playerModel.playerSelfInfo.userId) {
            //普通射击模式,bulletInfo.x,y为正常坐标,未经过Y翻转. 固只需处理其他玩家的子弹
            fireClickPoint.y = 750 - fireClickPoint.y;
        }
        if (targetFish) {
            fireClickPoint = new Laya.Point(targetFish.x, targetFish.y);
            //由于鱼组件在真实座位[3,4]玩家的视图下经过了Y的翻转,固真实座位[3,4]玩家的锁定鱼的坐标均需要y的翻转
            // if([3, 4].indexOf(pos) != -1 && bulletInfo.userId != this.playerModel.playerSelfInfo.userId) {
            //     fireClickPoint.y = 750 - fireClickPoint.y;
            // }
        }
        var rotation = this.shootDirection(startPoint, fireClickPoint); //射击角度
        //炮台后坐力动画
        player.m_gunView.m_gun.rotation = rotation; //暂定,后续根据炮台编号读取炮台组件
        // player.m_gunView.m_t0.play();
        if (player.m_gunView.m_gun.m_gunLoader.content instanceof fairygui.display.MovieClip) {
            if (!player.m_gunView.m_gun.m_gunLoader.playing) {
                player.m_gunView.m_gun.m_gunLoader.playing = true;
                player.m_gunView.m_gun.m_gunLoader.content.setPlaySettings(0, -1, 1, -1, Laya.Handler.create(this, function () {
                    player.m_gunView.m_gun.m_gunLoader.frame = 1;
                    player.m_gunView.m_gun.m_gunLoader.playing = false;
                }));
            }
        }
        var bulletUiName = [1, 2, 3];
        var index;
        if (playerInfo.batteryLv < 10)
            index = 0;
        else if (playerInfo.batteryLv < 100)
            index = 1;
        else
            index = 2;
        bullet.m_bulletLoader.url = "ui://roomScene/fish_bullet_" + bulletUiName[index];
        //子弹起始点,炮台炮口位置
        var bulletStartPoint = new Laya.Point();
        var radin = 2 * Math.PI / 360 * rotation;
        bulletStartPoint.x = startPoint.x + Math.sin(radin) * 113;
        // let r: number = [1,2].indexOf(pos) != -1 ? 1 : -1; 
        var r = ['player1', 'player2'].indexOf(player.name) != -1 ? 1 : -1;
        bulletStartPoint.y = startPoint.y - Math.abs(Math.cos(radin) * 113) * r;
        //初始化子弹脚本类
        bullet.displayObject.getComponent(NormalBullet_1.default).init(bulletInfo.userId, bulletInfo.shellId, bulletInfo.createTime, bulletStartPoint, playerInfo.batteryLv, fireClickPoint, bulletInfo.monId);
        this.addChild(bullet);
        this.adjustBatteryZindex(bullet.sortingOrder);
        // console.log(`====fireBullet===${bulletInfo.shellId},,,fish==${bulletInfo.monId}`);
        // if(bulletInfo.userId == this.playerModel.playerSelfInfo.userId) {
        // console.log(`fireBullet==${bulletInfo.shellId},,,ownerId==${bulletInfo.userId}`);
        // }
        return bullet;
    };
    /**
     * 射击角度
     * @param startPoint
     * @param fireClickPoint
     */
    BulletView.prototype.shootDirection = function (startPoint, fireClickPoint) {
        var direction = new Laya.Vector2(fireClickPoint.x - startPoint.x, fireClickPoint.y - startPoint.y);
        var normalDirection = new Laya.Vector2(0, 0);
        Laya.Vector2.normalize(direction, normalDirection);
        var dot = Laya.Vector2.dot(new Laya.Vector2(0, -1), normalDirection); //单位向量点积即为余弦夹角
        var radian = Math.acos(dot);
        var rotation = 180 / Math.PI * radian;
        if (fireClickPoint.x < startPoint.x) {
            rotation = -rotation;
        }
        if (fireClickPoint.x == startPoint.x)
            rotation = 0;
        // console.log(`rotation==${rotation},,,fireClickPoint===(${fireClickPoint.x}, ${fireClickPoint.y})`)
        return rotation;
    };
    /**
     * 调整炮台z-Index
     * @param zIndex
     */
    BulletView.prototype.adjustBatteryZindex = function (zIndex) {
        this.m_player1.sortingOrder = zIndex + 1;
        this.m_player2.sortingOrder = this.m_player1.sortingOrder + 1;
        this.m_player3.sortingOrder = this.m_player2.sortingOrder + 1;
        this.m_player4.sortingOrder = this.m_player3.sortingOrder + 1;
        this.m_lockBtn.sortingOrder = this.m_player4.sortingOrder + 1;
        this.m_autoFireBtn.sortingOrder = this.m_lockBtn.sortingOrder + 1;
        this.m_lockTipLoader.sortingOrder = this.m_autoFireBtn.sortingOrder + 1;
        this.m_autoTipLoader.sortingOrder = this.m_lockTipLoader.sortingOrder + 1;
    };
    /**
     * 获取炮台轴心坐标并转化为子弹界面坐标系
     * @param gComponent
     */
    BulletView.prototype.getAxisPoint = function (gComponent) {
        var point = new Laya.Point();
        point.x = gComponent.x + gComponent.width * gComponent.pivotX;
        point.y = gComponent.y + gComponent.height * gComponent.pivotY;
        var globalPoint = gComponent.parent.localToGlobal(point.x, point.y);
        var localPoint = this.globalToLocal(globalPoint.x, globalPoint.y);
        return new Laya.Point(Math.floor(localPoint.x), Math.floor(localPoint.y));
    };
    __decorate([
        inject(PlayerModel_1.default)
    ], BulletView.prototype, "playerModel", void 0);
    __decorate([
        inject(fightServer_1.default)
    ], BulletView.prototype, "fightServer", void 0);
    __decorate([
        inject(FightModel_1.default)
    ], BulletView.prototype, "fightModel", void 0);
    __decorate([
        inject(RoomModel_1.default)
    ], BulletView.prototype, "roomModel", void 0);
    __decorate([
        inject(AttackPatternChangedSignal_1.default)
    ], BulletView.prototype, "attacePatternChangedSignal", void 0);
    return BulletView;
}(FUIBulletView_1.default));
exports.default = BulletView;
},{"../../../commonView/VideoPlayerView":51,"../../../data/tpls/DataHuntingRoom":58,"../../../definitions/ScreenMode":68,"../../../definitions/VideoType":69,"../../../fui/roomScene/FUIBulletView":122,"../../../manager/UIManager":164,"../../../script/bullet/bulletScript/NormalBullet":279,"../../../script/bullet/utils/BulletUtils":281,"../../fightModule/models/FightModel":201,"../../fightModule/servers/fightServer":202,"../../fightModule/signals/AttackPatternChangedSignal":203,"../../playerModule/models/PlayerModel":226,"../models/BulletManager":235,"../models/FishManager":236,"../models/PlayerManager":237,"../models/RoomModel":238,"./AutoHuntTipsView":253,"./AutoHuntingView":254}],258:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var inject = riggerIOC.inject;
var FUIFishContent_1 = require("../../../fui/roomScene/FUIFishContent");
var FishUtils_1 = require("../../../script/fish/utils/FishUtils");
var AbstractFish_1 = require("../../../script/fish/fishScript/AbstractFish");
var PlayerModel_1 = require("../../playerModule/models/PlayerModel");
var FishEnum_1 = require("../../../script/enum/FishEnum");
var DataMon_1 = require("../../../data/tpls/DataMon");
var FishView = /** @class */ (function (_super) {
    __extends(FishView, _super);
    function FishView() {
        var _this = _super.call(this) || this;
        _this.testAniIdx = 0;
        _this.isFrozen = false;
        return _this;
    }
    FishView.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
        this.init();
    };
    FishView.prototype.init = function () {
        this.isFrozen = false;
        this.m_fullScreenBoomAniLoader.playing = false;
        // Laya.timer.loop(4000, this, this.playAniTest);
        // this.playFullScreenFrozenAni(1000*1000);
    };
    FishView.prototype.playAniTest = function () {
        var aniName = ['playFullScreenGoldAni', 'playFullScreenBoomAni', 'playFullScreenFrozenAni'];
        // if(this.testAniIdx == 2) this[`${aniName[this.testAniIdx]}`](3000);
        // else this[`${aniName[this.testAniIdx]}`]();
        // this.testAniIdx += 1;
        // if(this.testAniIdx > 2) this.testAniIdx = 0;
        this.playFullScreenGoldAni();
    };
    /**
     * 添加新鱼
     * @param fishInfo
     */
    FishView.prototype.addFish = function (fishInfo) {
        var buffType = DataMon_1.default.getData(fishInfo.monTypeId).buffType;
        // console.log(`time==${rigger.service.TimeService.instance.serverTime},,,,fishTime==${fishInfo.createTime}`);
        var fish;
        switch (buffType) {
            case FishEnum_1.fishTypeEnum.triStar:
                fish = FishUtils_1.default.getTriStarFish(); //大三元
                break;
            case FishEnum_1.fishTypeEnum.four:
                fish = FishUtils_1.default.getFourFish(); //大四喜
                break;
            default:
                fish = FishUtils_1.default.getNormalFish(); //其他类型
                break;
        }
        fish.displayObject.getComponent(AbstractFish_1.default).init(fishInfo);
        fish.alpha = 0;
        this.addChild(fish);
        this.adjustBatteryZindex(fish.sortingOrder);
        return fish;
    };
    /**
     * 调整层级
     * @param zIndex
     */
    FishView.prototype.adjustBatteryZindex = function (zIndex) {
        this.m_fullScreenFrozenAniLoader.sortingOrder = zIndex + 1;
        this.m_fullScreenBoomAniLoader.sortingOrder = zIndex + 2;
        this.m_fullScreenGoldAniView.sortingOrder = zIndex + 3;
    };
    /**
     * 全屏冰冻动画,因为层级关系,固从tipView移入该页面
     * @param time 冰冻时间
     */
    FishView.prototype.playFullScreenFrozenAni = function (time) {
        var _this = this;
        if (this.isFrozen)
            return;
        this.isFrozen = true;
        Laya.timer.once(time, this, function () {
            _this.m_fullScreenFrozenAniLoader.url = "";
            _this.isFrozen = false;
        });
        this.m_fullScreenFrozenAniLoader.url = "ui://roomScene/fullScreenFrozenAni";
        this.m_fullScreenFrozenAniLoader.playing = true;
        if (this.m_fullScreenFrozenAniLoader.content instanceof fairygui.display.MovieClip) {
            this.m_fullScreenFrozenAniLoader.content.setPlaySettings(0, -1, 1, -1, Laya.Handler.create(this, function () {
                _this.m_fullScreenFrozenAniLoader.playing = false;
                _this.m_fullScreenFrozenAniLoader.frame = 8;
            }));
        }
    };
    /**
     * 全屏金币动画
     */
    FishView.prototype.playFullScreenGoldAni = function () {
        this.m_fullScreenGoldAniView.playGoldAni();
    };
    /**
     * 全屏爆炸动画
     */
    FishView.prototype.playFullScreenBoomAni = function () {
        var _this = this;
        if (this.m_fullScreenBoomAniLoader.playing)
            return;
        this.m_fullScreenBoomAniLoader.url = "ui://roomScene/fullScreenBoomAni";
        this.m_fullScreenBoomAniLoader.playing = true;
        if (this.m_fullScreenBoomAniLoader.content instanceof fairygui.display.MovieClip) {
            this.m_fullScreenBoomAniLoader.content.setPlaySettings(0, -1, 1, -1, Laya.Handler.create(this, function () {
                _this.m_fullScreenBoomAniLoader.playing = false;
                _this.m_fullScreenBoomAniLoader.url = '';
            }));
        }
    };
    __decorate([
        inject(PlayerModel_1.default)
    ], FishView.prototype, "playerModel", void 0);
    return FishView;
}(FUIFishContent_1.default));
exports.default = FishView;
},{"../../../data/tpls/DataMon":60,"../../../fui/roomScene/FUIFishContent":124,"../../../script/enum/FishEnum":282,"../../../script/fish/fishScript/AbstractFish":283,"../../../script/fish/utils/FishUtils":290,"../../playerModule/models/PlayerModel":226}],259:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FUIFullScreenGoldAniView_1 = require("../../../fui/roomScene/FUIFullScreenGoldAniView");
var VideoPlayerView_1 = require("../../../commonView/VideoPlayerView");
var VideoType_1 = require("../../../definitions/VideoType");
var ScreenMode_1 = require("../../../definitions/ScreenMode");
var FullScreenGoldAniView = /** @class */ (function (_super) {
    __extends(FullScreenGoldAniView, _super);
    function FullScreenGoldAniView() {
        var _this = _super.call(this) || this;
        _this.isPlaying = false;
        return _this;
    }
    FullScreenGoldAniView.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
        this.ininGoldAni();
    };
    FullScreenGoldAniView.prototype.ininGoldAni = function () {
        var params = new VideoPlayerView_1.VideoPlayerViewParams();
        params.url = "res/spine/FullScreenGold/1001.sk";
        params.type = VideoType_1.VideoType.Skeleton;
        params.screenMode = ScreenMode_1.ScreenMode.None;
        if (!this.goldVideoPlayer) {
            this.goldVideoPlayer = new VideoPlayerView_1.default();
            this.goldVideoPlayer.init(params);
            this.goldVideoPlayer.setScale(1, 1);
            this.goldVideoPlayer.setXY(675, 360);
        }
    };
    FullScreenGoldAniView.prototype.playGoldAni = function () {
        var _this = this;
        if (this.isPlaying)
            return;
        if (!this.goldVideoPlayer)
            this.ininGoldAni();
        this.addChild(this.goldVideoPlayer);
        this.isPlaying = true;
        this.goldVideoPlayer.play("1", false, Laya.Handler.create(this, function () {
            _this.isPlaying = false;
            _this.goldVideoPlayer && _this.goldVideoPlayer.removeFromParent();
        }));
    };
    return FullScreenGoldAniView;
}(FUIFullScreenGoldAniView_1.default));
exports.FullScreenGoldAniView = FullScreenGoldAniView;
},{"../../../commonView/VideoPlayerView":51,"../../../definitions/ScreenMode":68,"../../../definitions/VideoType":69,"../../../fui/roomScene/FUIFullScreenGoldAniView":127}],260:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FUIGoldListItemView_1 = require("../../../fui/roomScene/FUIGoldListItemView");
var GoldListItemView = /** @class */ (function (_super) {
    __extends(GoldListItemView, _super);
    function GoldListItemView() {
        var _this = _super.call(this) || this;
        _this.maxCoinNum = 20;
        _this.coins = [];
        _this.coinSignal = 'COIN_SIGNAL';
        return _this;
    }
    GoldListItemView.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
    };
    GoldListItemView.prototype.setMoney = function (coin, bulletCost) {
        this.resetCoins();
        this.m_coinTxt.text = '+' + coin.toFixed(2);
        var coinNum = Math.floor(coin / bulletCost);
        if (coinNum > this.maxCoinNum)
            coinNum = this.maxCoinNum;
        if (coinNum > 0) {
            for (var i = 0; i < coinNum - 1; i++) { //组件自带一个金币
                this.coins.push(this.getCoinImg());
            }
        }
        this.arrangeCoinPos();
    };
    GoldListItemView.prototype.clear = function () {
        this.m_coinTxt.y = this.m_bottmCoin.y - 10;
        this.m_coinTxt.text = '';
        this.resetCoins();
    };
    GoldListItemView.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        this.resetCoins();
    };
    GoldListItemView.prototype.arrangeCoinPos = function () {
        var _this = this;
        var bottomCoinPos = new Laya.Point(this.m_bottmCoin.x, this.m_bottmCoin.y);
        this.coins.forEach(function (coin, idx) {
            _this.addChildAt(coin, _this.numChildren - 1);
            coin.x = bottomCoinPos.x;
            coin.y = bottomCoinPos.y - (idx + 1) * 4;
            _this.m_coinTxt.y = coin.y - 10;
        });
    };
    GoldListItemView.prototype.resetCoins = function () {
        var _this = this;
        if (!this.coins)
            return;
        this.coins.forEach(function (coin) {
            coin && coin.removeFromParent();
            _this.recoverCoinImg(coin);
        });
        this.coins = [];
    };
    GoldListItemView.prototype.getCoinImg = function () {
        return rigger.service.PoolService.instance.getItemByCreateFun(this.coinSignal, this.createCoinImg);
    };
    GoldListItemView.prototype.recoverCoinImg = function (img) {
        rigger.service.PoolService.instance.recover(this.coinSignal, img);
    };
    GoldListItemView.prototype.createCoinImg = function () {
        return fairygui.UIPackage.createObject('roomScene', 'brdr_ycjm_icon_jinbi');
    };
    return GoldListItemView;
}(FUIGoldListItemView_1.default));
exports.GoldListItemView = GoldListItemView;
},{"../../../fui/roomScene/FUIGoldListItemView":128}],261:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var UIWindow_1 = require("../../../utils/UIWindow");
var FUIGuideView_1 = require("../../../fui/roomScene/FUIGuideView");
var UIManager_1 = require("../../../manager/UIManager");
var Utils_1 = require("../../../utils/Utils");
var GuideView = /** @class */ (function (_super) {
    __extends(GuideView, _super);
    function GuideView() {
        var _this = _super.call(this) || this;
        _this.isCache = false;
        _this.needMask = true;
        return _this;
    }
    GuideView.getUrl = function () {
        return FUIGuideView_1.default.URL;
    };
    GuideView.prototype.onInit = function () {
        _super.prototype.onInit.call(this);
        Utils_1.default.IS_SHOW_GUID_VIEW = false;
    };
    GuideView.prototype.onShown = function () {
        _super.prototype.onShown.call(this);
        this.addEventListener();
        Laya.KeyBoardManager.enabled = false;
    };
    GuideView.prototype.onHide = function () {
        _super.prototype.onHide.call(this);
        this.removeEventListener();
        Laya.KeyBoardManager.enabled = true;
    };
    GuideView.prototype.addEventListener = function () {
        this.contentPane.on(Laya.Event.CLICK, this, this.onGuideClick);
    };
    GuideView.prototype.removeEventListener = function () {
        this.contentPane.off(Laya.Event.CLICK, this, this.onGuideClick);
    };
    GuideView.prototype.layout = function () {
        var guideGroup = new riggerLayout.Group(this.contentPane);
        guideGroup.horizontalCenter = 0;
        guideGroup.verticalCenter = 0;
        guideGroup.width = '100%';
        guideGroup.height = '100%';
        RiggerLayout.layer.addChild(guideGroup);
    };
    GuideView.prototype.removeLayout = function () {
        RiggerLayout.layer.remove(this.contentPane);
    };
    GuideView.prototype.onGuideClick = function () {
        UIManager_1.default.instance.hideWindow(this);
    };
    return GuideView;
}(UIWindow_1.default));
exports.default = GuideView;
},{"../../../fui/roomScene/FUIGuideView":129,"../../../manager/UIManager":164,"../../../utils/UIWindow":305,"../../../utils/Utils":306}],262:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var inject = riggerIOC.inject;
var FUIRoomTipsView_1 = require("../../../fui/roomScene/FUIRoomTipsView");
var ExitRoomSignal_1 = require("../signals/ExitRoomSignal");
var openReportSignal_1 = require("../../entryModule/signals/openReportSignal");
var OpenHelpViewSignal_1 = require("../../entryModule/signals/OpenHelpViewSignal");
var OpenSetViewSignal_1 = require("../../entryModule/signals/OpenSetViewSignal");
var VideoPlayerView_1 = require("../../../commonView/VideoPlayerView");
var VideoType_1 = require("../../../definitions/VideoType");
var ScreenMode_1 = require("../../../definitions/ScreenMode");
var ShowTipsSignal_1 = require("../signals/ShowTipsSignal");
var ConnectService_1 = require("../../../gameServices/connectService/ConnectService");
var RoomTipsView = /** @class */ (function (_super) {
    __extends(RoomTipsView, _super);
    function RoomTipsView() {
        var _this = _super.call(this) || this;
        //待播的入场动画
        _this.waitForPlay = [];
        /**
         * 真正处理播放鱼入场动画的逻辑
         */
        _this.fishVideoPlayerIsPlaying = false;
        return _this;
    }
    RoomTipsView.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
        this.init();
        this.addEventListener();
        // this.playFullScreenGoldAni();
        // this.playFullScreenBoomAni();
    };
    /**
     * 顶级页面调用
     */
    RoomTipsView.prototype.show = function () {
    };
    /**
     * 顶级页面调用
     */
    RoomTipsView.prototype.hide = function () {
    };
    RoomTipsView.prototype.init = function () {
        this.initMenuBtn();
        this.initFishInAni();
    };
    RoomTipsView.prototype.initMenuBtn = function () {
        this.m_menuView.m_c1.selectedIndex = 0;
        if (!ConnectService_1.default.instance._getMetaValue('recordUrl')) {
            var item = this.m_menuView.m_menuBtnListView.m_menuBtnList.getChild('reportBtn');
            item && this.m_menuView.m_menuBtnListView.m_menuBtnList.removeChildToPool(item);
        }
    };
    RoomTipsView.prototype.initFishInAni = function () {
        this.fishInVideoPlayer = new VideoPlayerView_1.default();
        var params = new VideoPlayerView_1.VideoPlayerViewParams();
        params.url = 'res/spine/FishInAni/juesedengchang.sk';
        params.type = VideoType_1.VideoType.Skeleton;
        params.screenMode = ScreenMode_1.ScreenMode.None;
        this.fishInVideoPlayer.init(params);
        this.fishInVideoPlayer.x = 0;
        this.fishInVideoPlayer.y = 0;
        this.fishInVideoPlayer.visible = false;
        this.fishInVideoPlayer.touchable = false;
    };
    RoomTipsView.prototype.addEventListener = function () {
        this.m_menuView.m_menuBtn.on(Laya.Event.CLICK, this, this.onShowMenuBtnClick);
        this.m_menuView.m_menuBtnListView.m_menuBtnList.on(fairygui.Events.CLICK_ITEM, this, this.onMenuItemClick);
        this.showTipsSignal.on(this, this.onShowTips);
    };
    RoomTipsView.prototype.removeEventListener = function () {
        this.m_menuView.m_menuBtn.off(Laya.Event.CLICK, this, this.onShowMenuBtnClick);
        this.m_menuView.m_menuBtnListView.m_menuBtnList.off(fairygui.Events.CLICK_ITEM, this, this.onMenuItemClick);
        this.showTipsSignal.off(this, this.onShowTips);
    };
    RoomTipsView.prototype.onShowTips = function (index) {
        this.playTips(index);
    };
    /**
     * 菜单界面收缩展开
     */
    RoomTipsView.prototype.onShowMenuBtnClick = function (e) {
        e.stopPropagation();
        this.m_menuView.m_c1.selectedIndex = 1 - this.m_menuView.m_c1.selectedIndex;
    };
    RoomTipsView.prototype.onMenuItemClick = function (btn) {
        var name = btn.name;
        switch (name) {
            case 'setBtn':
                this.openSetViewSignal.dispatch();
                break;
            case 'helpBtn':
                this.openHelpViewSignal.dispatch();
                break;
            case 'reportBtn':
                this.openReportSignal.dispatch();
                break;
            case 'returnBtn':
                this.exitRoomSignal.dispatch();
                break;
            default:
                break;
        }
    };
    /**
     * 鱼潮来袭动画
     */
    RoomTipsView.prototype.playFishBoomAni = function () {
        this.m_t0.play();
    };
    /**
     * 播放提示语句
     * @param index 1-余额不足
     */
    RoomTipsView.prototype.playTips = function (index) {
        var _this = this;
        if (this.m_tipsView.m_t0.playing)
            return;
        this.m_tipsView.m_tipsLoader.url = "ui://roomScene/tips" + index;
        this.m_tipsView.m_t0.play(Laya.Handler.create(this, function () {
            _this.m_tipsView.m_tipsLoader.url = '';
        }), 1);
    };
    /**
     * 播放鱼的入场动画
     * @param aniIndex 0-海盗船 1-黄金鲨鱼 2-美人鱼
     */
    RoomTipsView.prototype.playFishInAni = function (aniIndex) {
        var actName = ['1', '2', '3'];
        this.waitForPlay.push(actName[aniIndex]);
        if (!this.fishVideoPlayerIsPlaying) {
            this.playFishVideoplayer(this.waitForPlay[0]);
        }
    };
    RoomTipsView.prototype.playFishVideoplayer = function (actName) {
        var _this = this;
        if (!this.fishInVideoPlayer.parent) {
            this.addChild(this.fishInVideoPlayer);
        }
        this.fishInVideoPlayer.visible = true;
        this.fishVideoPlayerIsPlaying = true;
        this.waitForPlay.splice(0, 1);
        this.fishInVideoPlayer.play(actName, false, Laya.Handler.create(this, function () {
            _this.fishVideoPlayerIsPlaying = false;
            _this.fishInVideoPlayer.visible = false;
            //播放下一个动画
            if (_this.waitForPlay.length >= 1) {
                _this.playFishVideoplayer(_this.waitForPlay[0]);
            }
            else {
                _this.fishInVideoPlayer.removeFromParent();
            }
        }));
    };
    __decorate([
        inject(ExitRoomSignal_1.default)
    ], RoomTipsView.prototype, "exitRoomSignal", void 0);
    __decorate([
        inject(openReportSignal_1.default)
    ], RoomTipsView.prototype, "openReportSignal", void 0);
    __decorate([
        inject(OpenHelpViewSignal_1.default)
    ], RoomTipsView.prototype, "openHelpViewSignal", void 0);
    __decorate([
        inject(OpenSetViewSignal_1.default)
    ], RoomTipsView.prototype, "openSetViewSignal", void 0);
    __decorate([
        inject(ShowTipsSignal_1.default)
    ], RoomTipsView.prototype, "showTipsSignal", void 0);
    return RoomTipsView;
}(FUIRoomTipsView_1.default));
exports.default = RoomTipsView;
},{"../../../commonView/VideoPlayerView":51,"../../../definitions/ScreenMode":68,"../../../definitions/VideoType":69,"../../../fui/roomScene/FUIRoomTipsView":135,"../../../gameServices/connectService/ConnectService":160,"../../entryModule/signals/OpenHelpViewSignal":194,"../../entryModule/signals/OpenSetViewSignal":195,"../../entryModule/signals/openReportSignal":196,"../signals/ExitRoomSignal":246,"../signals/ShowTipsSignal":252}],263:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var UIWindow_1 = require("../../../utils/UIWindow");
var FUIRoomView_1 = require("../../../fui/roomScene/FUIRoomView");
var DynamicSource_1 = require("../../../definitions/DynamicSource");
var inject = riggerIOC.inject;
var RoomViewLoadSignal_1 = require("../signals/RoomViewLoadSignal");
var RoomView = /** @class */ (function (_super) {
    __extends(RoomView, _super);
    function RoomView() {
        var _this = _super.call(this) || this;
        _this.needMask = false;
        _this.isCache = false;
        return _this;
    }
    RoomView.getUrl = function () {
        return FUIRoomView_1.default.URL;
    };
    RoomView.prototype.onInit = function () {
        _super.prototype.onInit.call(this);
    };
    RoomView.prototype.onShown = function () {
        _super.prototype.onShown.call(this);
        this.addEventListener();
        this.addProtocolListener();
        // Laya.timer.frameLoop(4, this, this.bgMove);
        this.bgMove();
        if (!RoomView._loadingView) {
            this.roomViewLoadSignal.dispatch();
        }
        // this.initBgWaveAni();
    };
    RoomView.prototype.onHide = function () {
        _super.prototype.onHide.call(this);
        this.removerEventListener();
        this.removerProtocolListener();
        // Laya.timer.clear(this, this.bgMove);
        this.cancelBgMove();
    };
    Object.defineProperty(RoomView.prototype, "fishView", {
        /**
         * 获取鱼界面的实例
         */
        get: function () {
            return this.contentPane.m_content.m_fishView;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RoomView.prototype, "bulletView", {
        /**
         * 获取子弹界面的实例
         */
        get: function () {
            return this.contentPane.m_content.m_bulletView;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RoomView.prototype, "roomTipsView", {
        /**
         * 获取提示界面的实例
         */
        get: function () {
            return this.contentPane.m_content.m_tipsView;
        },
        enumerable: true,
        configurable: true
    });
    RoomView.prototype.layout = function () {
        var bgGroup = new riggerLayout.Group(this.contentPane.m_bg);
        bgGroup.horizontalCenter = 0;
        bgGroup.verticalCenter = 0;
        bgGroup.width = riggerLayout.LayoutSpec.create(1334 / 750, -1, '100%');
        bgGroup.height = riggerLayout.LayoutSpec.create(1, 1334 / 750, '100%');
        RiggerLayout.layer.addChild(bgGroup);
        var contentGroup = new riggerLayout.Group(this.contentPane.m_content);
        contentGroup.top = 0;
        contentGroup.left = 0;
        contentGroup.width = "100%";
        contentGroup.height = "100%";
        RiggerLayout.layer.addChild(contentGroup);
    };
    RoomView.prototype.removeLayout = function () {
        RiggerLayout.layer.remove(this.contentPane.m_bg);
        RiggerLayout.layer.remove(this.contentPane.m_content);
    };
    RoomView.prototype.funEx = function () {
    };
    RoomView.prototype.addEventListener = function () {
    };
    RoomView.prototype.removerEventListener = function () {
    };
    RoomView.prototype.addProtocolListener = function () {
    };
    RoomView.prototype.removerProtocolListener = function () {
    };
    // initBgWaveAni() {
    //     let videoPlayer1: VideoPlayerView = new VideoPlayerView();
    //     let videoPlayer2: VideoPlayerView = new VideoPlayerView();
    //     let params: VideoPlayerViewParams = new VideoPlayerViewParams();
    //     params.url = "res/spine/bgWaveAni/water.sk";
    //     params.type = VideoType.Skeleton;
    //     params.screenMode = ScreenMode.None;
    //     videoPlayer1.init(params);
    //     videoPlayer1.setScale(1, 1);
    //     videoPlayer1.play("1", true);
    //     videoPlayer1.setXY(650, 500);
    //     videoPlayer2.init(params);
    //     videoPlayer2.setScale(1, 1);
    //     videoPlayer2.play("2", true);
    //     videoPlayer2.setXY(800 , 200);
    //     // this.contentPane.m_bg.m_waveAniVew.addChild(videoPlayer1);
    //     // this.contentPane.m_bg.m_waveAniVew.addChild(videoPlayer2);
    // }
    RoomView.prototype.bgMove = function () {
        this.contentPane.m_bg.m_t0.setDuration('move1', 500);
        this.contentPane.m_bg.m_t1.setDuration('move2', 500);
        this.t1Play();
    };
    RoomView.prototype.t1Play = function () {
        this.contentPane.m_bg.m_t0.play(Laya.Handler.create(this, this.t2Play), 1, null, 0, -1);
    };
    RoomView.prototype.t2Play = function () {
        this.contentPane.m_bg.m_t1.play(Laya.Handler.create(this, this.t1Play), 1, null, 0, -1);
    };
    RoomView.prototype.cancelBgMove = function () {
        this.contentPane.m_bg.m_t0.stop();
        this.contentPane.m_bg.m_t1.stop();
    };
    /**
     * 动态加载资源
     */
    RoomView.prototype.configUISource = function () {
        //--- gulp update_preload_config ---
        this.addUISource(new DynamicSource_1.default(this, "res/fui/roomScene/roomScene_atlas0.png", Laya.Loader.IMAGE, "roomScene")),
            this.addUISource(new DynamicSource_1.default(this, "res/fui/roomScene/roomScene_atlas0_1.png", Laya.Loader.IMAGE, "roomScene")),
            this.addUISource(new DynamicSource_1.default(this, "res/fui/roomScene/roomScene_atlas_9lp31.png", Laya.Loader.IMAGE, "roomScene")),
            this.addUISource(new DynamicSource_1.default(this, "res/fui/roomScene/roomScene_atlas_9lp32.png", Laya.Loader.IMAGE, "roomScene")),
            this.addUISource(new DynamicSource_1.default(this, "res/fui/roomScene/roomScene_atlas_9lp33.png", Laya.Loader.IMAGE, "roomScene")),
            this.addUISource(new DynamicSource_1.default(this, "res/fui/roomScene/roomScene_atlas_9lp34.png", Laya.Loader.IMAGE, "roomScene")),
            this.addUISource(new DynamicSource_1.default(this, "res/fui/roomScene/roomScene_atlas_9lp35.png", Laya.Loader.IMAGE, "roomScene")),
            this.addUISource(new DynamicSource_1.default(this, "res/fui/roomScene/roomScene_atlas_9lp36.png", Laya.Loader.IMAGE, "roomScene")),
            this.addUISource(new DynamicSource_1.default(this, "res/fui/roomScene/roomScene_atlas_9lp3i.png", Laya.Loader.IMAGE, "roomScene")),
            this.addUISource(new DynamicSource_1.default(this, "res/fui/roomScene/roomScene_atlas_9lp3j.png", Laya.Loader.IMAGE, "roomScene")),
            this.addUISource(new DynamicSource_1.default(this, "res/fui/roomScene/roomScene_atlas_9lp3k.png", Laya.Loader.IMAGE, "roomScene")),
            this.addUISource(new DynamicSource_1.default(this, "res/fui/roomScene/roomScene_atlas_czni74b.png", Laya.Loader.IMAGE, "roomScene")),
            this.addUISource(new DynamicSource_1.default(this, "res/fui/roomScene/roomScene_atlas_czni74c.png", Laya.Loader.IMAGE, "roomScene")),
            this.addUISource(new DynamicSource_1.default(this, "res/fui/roomScene/roomScene_atlas_czni74d.png", Laya.Loader.IMAGE, "roomScene")),
            this.addUISource(new DynamicSource_1.default(this, "res/fui/roomScene/roomScene_atlas_czni74e.png", Laya.Loader.IMAGE, "roomScene")),
            this.addUISource(new DynamicSource_1.default(this, "res/fui/roomScene/roomScene_atlas_czni74f.png", Laya.Loader.IMAGE, "roomScene")),
            this.addUISource(new DynamicSource_1.default(this, "res/fui/roomScene/roomScene_atlas_glv2p.png", Laya.Loader.IMAGE, "roomScene")),
            this.addUISource(new DynamicSource_1.default(this, "res/fui/roomScene/roomScene_atlas_h8iq79m.png", Laya.Loader.IMAGE, "roomScene")),
            this.addUISource(new DynamicSource_1.default(this, "res/fui/roomScene/roomScene_atlas_ix0816.png", Laya.Loader.IMAGE, "roomScene")),
            this.addUISource(new DynamicSource_1.default(this, "res/fui/roomScene/roomScene_atlas_ix0817.png", Laya.Loader.IMAGE, "roomScene")),
            this.addUISource(new DynamicSource_1.default(this, "res/fui/roomScene/roomScene_atlas_ix0818.png", Laya.Loader.IMAGE, "roomScene")),
            this.addUISource(new DynamicSource_1.default(this, "res/fui/roomScene/roomScene_atlas_ix0819.png", Laya.Loader.IMAGE, "roomScene")),
            this.addUISource(new DynamicSource_1.default(this, "res/fui/roomScene/roomScene_atlas_m1sv79n.png", Laya.Loader.IMAGE, "roomScene")),
            this.addUISource(new DynamicSource_1.default(this, "res/fui/roomScene/roomScene_atlas_n86c773.png", Laya.Loader.IMAGE, "roomScene")),
            this.addUISource(new DynamicSource_1.default(this, "res/fui/roomScene/roomScene_atlas_n86c77g.png", Laya.Loader.IMAGE, "roomScene")),
            this.addUISource(new DynamicSource_1.default(this, "res/fui/roomScene/roomScene_atlas_n86c77h.png", Laya.Loader.IMAGE, "roomScene")),
            this.addUISource(new DynamicSource_1.default(this, "res/fui/roomScene/roomScene_atlas_n86c77i.png", Laya.Loader.IMAGE, "roomScene")),
            this.addUISource(new DynamicSource_1.default(this, "res/fui/roomScene/roomScene_atlas_n86c77k.png", Laya.Loader.IMAGE, "roomScene")),
            this.addUISource(new DynamicSource_1.default(this, "res/fui/roomScene/roomScene_atlas_n86c77l.png", Laya.Loader.IMAGE, "roomScene")),
            this.addUISource(new DynamicSource_1.default(this, "res/fui/roomScene/roomScene_atlas_n86c77m.png", Laya.Loader.IMAGE, "roomScene")),
            this.addUISource(new DynamicSource_1.default(this, "res/fui/roomScene/roomScene_atlas_n86c78h.png", Laya.Loader.IMAGE, "roomScene")),
            this.addUISource(new DynamicSource_1.default(this, "res/fui/roomScene/roomScene_atlas_nyu978p.png", Laya.Loader.IMAGE, "roomScene")),
            this.addUISource(new DynamicSource_1.default(this, "res/fui/roomScene/roomScene_atlas_nyu9794.png", Laya.Loader.IMAGE, "roomScene")),
            this.addUISource(new DynamicSource_1.default(this, "res/fui/roomScene/roomScene_atlas_q4y6717.png", Laya.Loader.IMAGE, "roomScene")),
            this.addUISource(new DynamicSource_1.default(this, "res/fui/roomScene/roomScene_atlas_q4y6718.png", Laya.Loader.IMAGE, "roomScene")),
            this.addUISource(new DynamicSource_1.default(this, "res/fui/roomScene/roomScene_atlas_rgdn795.png", Laya.Loader.IMAGE, "roomScene")),
            this.addUISource(new DynamicSource_1.default(this, "res/fui/roomScene/roomScene_atlas_rgdn796.png", Laya.Loader.IMAGE, "roomScene")),
            this.addUISource(new DynamicSource_1.default(this, "res/fui/roomScene/roomScene_atlas_rzeh72k.png", Laya.Loader.IMAGE, "roomScene")),
            this.addUISource(new DynamicSource_1.default(this, "res/fui/roomScene/roomScene_atlas_rzeh72l.png", Laya.Loader.IMAGE, "roomScene")),
            this.addUISource(new DynamicSource_1.default(this, "res/fui/roomScene/roomScene_atlas_rzeh72m.png", Laya.Loader.IMAGE, "roomScene")),
            this.addUISource(new DynamicSource_1.default(this, "res/fui/roomScene/roomScene_atlas_rzeh72o.png", Laya.Loader.IMAGE, "roomScene")),
            this.addUISource(new DynamicSource_1.default(this, "res/fui/roomScene/roomScene_atlas_rzeh72p.png", Laya.Loader.IMAGE, "roomScene")),
            this.addUISource(new DynamicSource_1.default(this, "res/fui/roomScene/roomScene_atlas_rzeh72r.png", Laya.Loader.IMAGE, "roomScene")),
            this.addUISource(new DynamicSource_1.default(this, "res/fui/roomScene/roomScene_atlas_uhyn79a.png", Laya.Loader.IMAGE, "roomScene")),
            this.addUISource(new DynamicSource_1.default(this, "res/fui/roomScene/roomScene_atlas_uhyn79b.png", Laya.Loader.IMAGE, "roomScene")),
            this.addUISource(new DynamicSource_1.default(this, "res/fui/roomScene/roomScene_atlas_v27g746.png", Laya.Loader.IMAGE, "roomScene")),
            this.addUISource(new DynamicSource_1.default(this, "res/fui/roomScene/roomScene_atlas_v27g747.png", Laya.Loader.IMAGE, "roomScene")),
            this.addUISource(new DynamicSource_1.default(this, "res/fui/roomScene/roomScene_atlas_v27g748.png", Laya.Loader.IMAGE, "roomScene")),
            this.addUISource(new DynamicSource_1.default(this, "res/fui/roomScene/roomScene_atlas_v27g749.png", Laya.Loader.IMAGE, "roomScene")),
            this.addUISource(new DynamicSource_1.default(this, "res/fui/roomScene/roomScene_atlas_v27g74a.png", Laya.Loader.IMAGE, "roomScene")),
            this.addUISource(new DynamicSource_1.default(this, "res/fui/roomScene/roomScene_atlas_vmmd767.png", Laya.Loader.IMAGE, "roomScene")),
            this.addUISource(new DynamicSource_1.default(this, "res/fui/roomScene/roomScene_atlas_vmmd768.png", Laya.Loader.IMAGE, "roomScene")),
            this.addUISource(new DynamicSource_1.default(this, "res/fui/roomScene/roomScene_atlas_vmmd769.png", Laya.Loader.IMAGE, "roomScene")),
            this.addUISource(new DynamicSource_1.default(this, "res/fui/roomScene/roomScene_atlas_vmmd76a.png", Laya.Loader.IMAGE, "roomScene")),
            this.addUISource(new DynamicSource_1.default(this, "res/fui/roomScene/roomScene_atlas_vmmd76b.png", Laya.Loader.IMAGE, "roomScene")),
            this.addUISource(new DynamicSource_1.default(this, "res/fui/roomScene/roomScene_atlas_vmmd76c.png", Laya.Loader.IMAGE, "roomScene")),
            this.addUISource(new DynamicSource_1.default(this, "res/fui/roomScene/roomScene_atlas_vmmd76d.png", Laya.Loader.IMAGE, "roomScene")),
            this.addUISource(new DynamicSource_1.default(this, "res/fui/roomScene/roomScene_atlas_vmmd76e.png", Laya.Loader.IMAGE, "roomScene")),
            this.addUISource(new DynamicSource_1.default(this, "res/fui/roomScene/roomScene_atlas_vmmd76f.png", Laya.Loader.IMAGE, "roomScene")),
            this.addUISource(new DynamicSource_1.default(this, "res/fui/roomScene/roomScene_atlas_vmmd76g.png", Laya.Loader.IMAGE, "roomScene")),
            this.addUISource(new DynamicSource_1.default(this, "res/fui/roomScene/roomScene_atlas_vmmd76h.png", Laya.Loader.IMAGE, "roomScene")),
            this.addUISource(new DynamicSource_1.default(this, "res/fui/roomScene/roomScene_atlas_vmmd76i.png", Laya.Loader.IMAGE, "roomScene")),
            this.addUISource(new DynamicSource_1.default(this, "res/fui/roomScene/roomScene_atlas_vmmd76j.png", Laya.Loader.IMAGE, "roomScene")),
            this.addUISource(new DynamicSource_1.default(this, "res/fui/roomScene/roomScene_atlas_vmmd76o.png", Laya.Loader.IMAGE, "roomScene")),
            this.addUISource(new DynamicSource_1.default(this, "res/fui/roomScene/roomScene_atlas_vmmd76o_1.png", Laya.Loader.IMAGE, "roomScene"));
        //--- gulp update_preload_config ---
    };
    __decorate([
        inject(RoomViewLoadSignal_1.default)
    ], RoomView.prototype, "roomViewLoadSignal", void 0);
    return RoomView;
}(UIWindow_1.default));
exports.default = RoomView;
},{"../../../definitions/DynamicSource":62,"../../../fui/roomScene/FUIRoomView":136,"../../../utils/UIWindow":305,"../signals/RoomViewLoadSignal":250}],264:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var inject = riggerIOC.inject;
var protocolSignals = require("../../../protocol/signals/signals");
var RoomView_1 = require("./RoomView");
var FreshFishSignal_1 = require("../../fightModule/signals/FreshFishSignal");
var FishManager_1 = require("../models/FishManager");
var BulletUtils_1 = require("../../../script/bullet/utils/BulletUtils");
var fightServer_1 = require("../../fightModule/servers/fightServer");
var FireBulletSignal_1 = require("../../fightModule/signals/FireBulletSignal");
var BulletDestorySignal_1 = require("../../fightModule/signals/BulletDestorySignal");
var BulletManager_1 = require("../models/BulletManager");
var AbstractFish_1 = require("../../../script/fish/fishScript/AbstractFish");
var NewPlayerSignal_1 = require("../signals/NewPlayerSignal");
var PlayerManager_1 = require("../models/PlayerManager");
var PlayerExitRoomSIgnal_1 = require("../signals/PlayerExitRoomSIgnal");
var RoomInfoInitSignal_1 = require("../signals/RoomInfoInitSignal");
var AttackPatternChangedSignal_1 = require("../../fightModule/signals/AttackPatternChangedSignal");
var FightModel_1 = require("../../fightModule/models/FightModel");
var AbstractBullet_1 = require("../../../script/bullet/bulletScript/AbstractBullet");
var GoldAni_1 = require("../../../script/gold/GoldAni");
var BalanceUpdateSignal_1 = require("../signals/BalanceUpdateSignal");
var BatteryLvUpdateSignal_1 = require("../signals/BatteryLvUpdateSignal");
var PlayerModel_1 = require("../../playerModule/models/PlayerModel");
var BatteryUtils_1 = require("../../../script/battery/utils/BatteryUtils");
var FishInfoUpdateSignal_1 = require("../../fightModule/signals/FishInfoUpdateSignal");
var FishEnum_1 = require("../../../script/enum/FishEnum");
var RoomModel_1 = require("../models/RoomModel");
var DataHuntingRoom_1 = require("../../../data/tpls/DataHuntingRoom");
var AutoHuntingSignal_1 = require("../signals/AutoHuntingSignal");
var AutoHuntingFishHuntedSignal_1 = require("../signals/AutoHuntingFishHuntedSignal");
var DataMon_1 = require("../../../data/tpls/DataMon");
var UIManager_1 = require("../../../manager/UIManager");
var GuideView_1 = require("./GuideView");
var Utils_1 = require("../../../utils/Utils");
var AutoHuntTipsView_1 = require("./AutoHuntTipsView");
var FUIwinGoldNumView_1 = require("../../../fui/roomScene/FUIwinGoldNumView");
var FUIcatchAllLineView_1 = require("../../../fui/roomScene/FUIcatchAllLineView");
var CoinLackSignal_1 = require("../signals/CoinLackSignal");
var FUIFishDeadTipsView_1 = require("../../../fui/roomScene/FUIFishDeadTipsView");
var SoundController_1 = require("../../soundModule/SoundController");
var SoundEvents_1 = require("../../soundModule/SoundEvents");
var RoomViewMediator = /** @class */ (function (_super) {
    __extends(RoomViewMediator, _super);
    function RoomViewMediator() {
        var _this = _super.call(this) || this;
        _this.isLoop = false;
        _this.aimLineView = null;
        return _this;
    }
    RoomViewMediator.prototype.onInit = function () {
        // this.onAttactPatternChanged(this.fightModel.attactPattern);
        Utils_1.default.IS_SHOW_GUID_VIEW && UIManager_1.default.instance.showWindow(GuideView_1.default, false, UIManager_1.default.instance.popupLayer); //引导界面
    };
    RoomViewMediator.prototype.onShown = function () {
        this.addProtocolListener();
        this.addEventListener();
        this.attactPatternChangedSignal.dispatch(FightModel_1.AttactPattern.normal);
        // this.onAttactPatternChanged(this.fightModel.attactPattern);
    };
    RoomViewMediator.prototype.onHide = function () {
        this.removerProtocolListener();
        this.removeEventListener();
        var fish = FishManager_1.default.instance.fishgObjectGroup;
        var bullet = BulletManager_1.default.instance.bullethgObjectGroup;
        for (var i = 0; i < fish.length; i++) {
            var fishScript = fish[i].displayObject.getComponent(AbstractFish_1.default);
            fishScript.recover();
        }
        for (var j = 0; j < bullet.length; j++) {
            var bulletScript = bullet[j].displayObject.getComponent(AbstractBullet_1.default);
            bulletScript.recover();
        }
        this.roomView.contentPane.removeChildren();
        this.attactPatternChangedSignal.dispatch(FightModel_1.AttactPattern.normal);
        Laya.timer.clearAll(this);
    };
    RoomViewMediator.prototype.dispose = function () {
    };
    RoomViewMediator.prototype.addProtocolListener = function () {
        this.roomInfoInitSignal.on(this, this.onRoomInit);
        this.freshFishSignal.on(this, this.onFreshFish);
        this.fireBulletSignal.on(this, this.onFireBullet);
        this.bulletDestorySignal.on(this, this.onBulletDestory);
        this.fishTideRespSignal.on(this, this.onFishTideResp);
        this.newPlayerSignal.on(this, this.onNewPlayerIntoRoom);
        this.playerExitRoomSignal.on(this, this.onPlayerExitRoom);
        this.attactPatternChangedSignal.on(this, this.onAttactPatternChanged);
        this.balanceUpdateSignal.on(this, this.onBalanceUpdate);
        this.batteryLvUpdateSignal.on(this, this.onBatteryLvUpdate);
        this.fishInfoUpdateSignal.on(this, this.onFishInfoUpdate);
        this.autoHuntingSignal.on(this, this.onAutoHunting);
        this.coinLackSignal.on(this, this.onCoinLack);
    };
    RoomViewMediator.prototype.removerProtocolListener = function () {
        this.roomInfoInitSignal.off(this, this.onRoomInit);
        this.freshFishSignal.off(this, this.onFreshFish);
        this.fireBulletSignal.off(this, this.onFireBullet);
        this.bulletDestorySignal.off(this, this.onBulletDestory);
        this.fishTideRespSignal.off(this, this.onFishTideResp);
        this.newPlayerSignal.off(this, this.onNewPlayerIntoRoom);
        this.playerExitRoomSignal.off(this, this.onPlayerExitRoom);
        this.attactPatternChangedSignal.off(this, this.onAttactPatternChanged);
        this.balanceUpdateSignal.off(this, this.onBalanceUpdate);
        this.batteryLvUpdateSignal.off(this, this.onBatteryLvUpdate);
        this.fishInfoUpdateSignal.off(this, this.onFishInfoUpdate);
        this.autoHuntingSignal.off(this, this.onAutoHunting);
        this.coinLackSignal.off(this, this.onCoinLack);
    };
    RoomViewMediator.prototype.addEventListener = function () {
        this.roomView.contentPane.on(Laya.Event.MOUSE_DOWN, this, this.onMouseDown);
        window.onkeydown = function (e) {
            if (e.keyCode == 9) {
                if (e.preventDefault) {
                    e.preventDefault();
                }
                else {
                    e.returnValue = false;
                }
            }
        };
        Laya.stage.on(Laya.Event.KEY_DOWN, this, this.onKeyDown);
        Laya.stage.on(Laya.Event.KEY_UP, this, this.onKeyUp);
    };
    RoomViewMediator.prototype.removeEventListener = function () {
        this.roomView.contentPane.off(Laya.Event.MOUSE_DOWN, this, this.onMouseDown);
        Laya.stage.off(Laya.Event.KEY_DOWN, this, this.onKeyDown);
        Laya.stage.off(Laya.Event.KEY_UP, this, this.onKeyUp);
    };
    /**
     * 房间数据初始化完毕,房间初始化
     */
    RoomViewMediator.prototype.onRoomInit = function () {
        //初始化入座
        this.roomView.bulletView.init();
        this.roomView.fishView.init();
        // if([3 ,4].indexOf(this.playerModel.playerSelfInfo.pos) != -1) {
        //     this.roomView.fishView.scaleY = -Math.abs(this.roomView.fishView.scaleY);
        // }
        // else {
        //     this.roomView.fishView.scaleY = Math.abs(this.roomView.fishView.scaleY);
        // }
    };
    /**
     * 鱼刷新
     * @param fishList
     */
    RoomViewMediator.prototype.onFreshFish = function (fishList) {
        for (var i = 0; i < fishList.length; i++) {
            var fishId = fishList[i].monId;
            if (FishManager_1.default.instance.fishCreatedIdList().indexOf(fishId) == -1) {
                var fishGObject = this.roomView.fishView.addFish(fishList[i]);
                fishGObject.data = fishId;
                FishManager_1.default.instance.fishgObjectGroup.push(fishGObject);
                this.playFishEnterAni(fishList[i].monTypeId);
            }
        }
        // console.log(`fishCreatedIdList` + FishManager.instance.fishCreatedIdList().length);
    };
    /**
     * 鱼数据更新
     * @param fishInfo
     */
    RoomViewMediator.prototype.onFishInfoUpdate = function (fishInfo) {
        for (var i = 0; i < fishInfo.length; i++) {
            var id = fishInfo[i].monId;
            var fish = FishManager_1.default.instance.getFishgObjectById(id);
            if (fish) {
                var fishScript = fish.displayObject.getComponent(AbstractFish_1.default);
                fishScript.init(fishInfo[i]);
                if (fishInfo[i].frozenList) {
                    if (!this.roomView.fishView.isFrozen) {
                        var frozenTime = fishInfo[i].frozenList[0].time;
                        this.roomView.fishView.playFullScreenFrozenAni(frozenTime); //冰冻动画
                    }
                }
            }
        }
    };
    /**播放鱼的入场动画 */
    RoomViewMediator.prototype.playFishEnterAni = function (TypeId) {
        switch (TypeId) {
            case 25: /**黄金鲨 */
                this.roomView.roomTipsView.playFishInAni(1);
                this.soundController.dispatch(SoundEvents_1.default.FISH_IN);
                break;
            case 26: /**美人鱼 */
                this.roomView.roomTipsView.playFishInAni(2);
                this.soundController.dispatch(SoundEvents_1.default.FISH_IN);
                break;
            case 100: /**海盗船 */
                this.roomView.roomTipsView.playFishInAni(0);
                break;
            default:
                break;
        }
    };
    /**
     * 余额不足
     */
    RoomViewMediator.prototype.onCoinLack = function () {
        if (this.lastLockFishId) {
            var lastFish = FishManager_1.default.instance.getFishgObjectById(this.lastLockFishId);
            if (lastFish) {
                var lastFishScript = lastFish.displayObject.getComponent(AbstractFish_1.default);
                lastFishScript.isLock = false;
            }
        }
        this.aimLineView && BatteryUtils_1.default.recoverAimLineView(this.aimLineView);
        this.aimLineView = null;
        Laya.timer.clearAll(this);
        this.attactPatternChangedSignal.dispatch(FightModel_1.AttactPattern.normal);
        this.roomView.roomTipsView.playTips(1);
    };
    /**
     * 战斗模式改变
     * @param pattern
     */
    RoomViewMediator.prototype.onAttactPatternChanged = function (pattern) {
        if (pattern == FightModel_1.AttactPattern.lock) {
            //可穿透子弹界面
            this.roomView.bulletView.opaque = false;
            this.roomView.fishView.touchable = true;
            this.roomView.bulletView.m_autoTipLoader.url = "ui://roomScene/auto";
            this.roomView.bulletView.m_lockTipLoader.url = "ui://roomScene/unLock";
            this.autoHuntingCurrentTargetFishId = null;
            this.roomView.bulletView.m_attackModelControl.selectedIndex = 0;
        }
        else if (pattern == FightModel_1.AttactPattern.normal) {
            //不可穿透子弹界面
            this.roomView.bulletView.opaque = true;
            this.roomView.fishView.touchable = false;
            this.roomView.bulletView.m_autoTipLoader.url = "ui://roomScene/auto";
            this.roomView.bulletView.m_lockTipLoader.url = "ui://roomScene/lock";
            this.autoHuntingCurrentTargetFishId = null;
            this.roomView.bulletView.m_attackModelControl.selectedIndex = 2;
        }
        else if (pattern == FightModel_1.AttactPattern.auto) {
            this.roomView.bulletView.m_autoTipLoader.url = "ui://roomScene/unAuto";
            this.roomView.bulletView.m_lockTipLoader.url = "ui://roomScene/lock";
            this.roomView.bulletView.m_attackModelControl.selectedIndex = 1;
        }
    };
    /**键盘按下事件 */
    RoomViewMediator.prototype.onKeyDown = function (e) {
        // console.log(`${Laya.stage.focus}`);
        var keyCode = e.keyCode;
        switch (keyCode) {
            case 37: //Left 炮台方向
                this.roomView.bulletView.changeBatteryAngle('left');
                break;
            case 38: //Up 炮台等级
                this.roomView.bulletView.changeBatteryLv('up');
                break;
            case 39: //Right 炮台方向
                this.roomView.bulletView.changeBatteryAngle('right');
                break;
            case 40: //Down 炮台等级
                this.roomView.bulletView.changeBatteryLv('down');
                break;
            case 32: //空格 普通模式开火
                this.spaceFire();
                break;
            case 9: //Tab
                this.tabForSearchFish();
                break;
            default:
                break;
        }
        if (Laya.KeyBoardManager.hasKeyDown(32) && keyCode != 32) {
            !this.isLoop && Laya.timer.loop(100, this, this.spaceFire);
            this.isLoop = true;
        }
    };
    RoomViewMediator.prototype.onKeyUp = function (e) {
        var keyCode = e.keyCode;
        if (keyCode == 32) {
            Laya.timer.clear(this, this.spaceFire);
            this.isLoop = false;
        }
    };
    RoomViewMediator.prototype.tabForSearchFish = function () {
        if (this.fightModel.attactPattern != FightModel_1.AttactPattern.lock)
            return;
        var fishInfo = FishManager_1.default.instance.fishInfo;
        var index = Math.floor(Math.random() * fishInfo.length);
        if (!fishInfo[index]) {
            this.tabForSearchFish();
            return;
        }
        var fish = FishManager_1.default.instance.getFishgObjectById(fishInfo[index].monId);
        if (!fish) {
            this.tabForSearchFish();
            return;
        }
        var fishScript = fish.displayObject.getComponent(AbstractFish_1.default);
        if (fishScript.checkOutOfWall()) {
            this.tabForSearchFish();
            return; //还在屏幕外
        }
        this.lockFireModel(fishInfo[index].monId);
    };
    /**
     * 空格键开火
     */
    RoomViewMediator.prototype.spaceFire = function () {
        if (this.fightModel.attactPattern == FightModel_1.AttactPattern.auto) {
            UIManager_1.default.instance.showWindow(AutoHuntTipsView_1.default, false, UIManager_1.default.instance.popupLayer);
        }
        if (this.fightModel.attactPattern != FightModel_1.AttactPattern.normal) {
            Laya.timer.clear(this, this.spaceFire);
            return;
        }
        var bullet = BulletUtils_1.default.getBullet();
        var pos = this.playerModel.playerSelfInfo.pos;
        var ui = this.roomView.bulletView.playerUiArr[pos];
        var currentAngle = ui.m_gunView.m_gun.rotation;
        var radin = 2 * Math.PI / 360 * currentAngle;
        var batteryPoint = this.roomView.bulletView.getAxisPoint(ui.m_gunView.m_gun);
        var startPoint = new Laya.Point(batteryPoint.x - bullet.width * bullet.pivotX, batteryPoint.y - bullet.height * bullet.pivotY); // 暂定,后续根据炮台编号读取对应炮台
        var firePoint = new Laya.Point();
        firePoint.x = startPoint.x + Math.sin(radin) * 200; //炮高度为113, 选取200是为了形成炮轴心与炮口的正方向
        // let r: number = [3, 4].indexOf(pos) != -1 ? -1 : 1;
        var r = 1;
        firePoint.y = startPoint.y - Math.abs(Math.cos(radin) * 200) * r;
        this.fightServer.fireReq(0, firePoint.x, firePoint.y);
        BulletUtils_1.default.recoverBullet(bullet);
    };
    /**
     * 按下屏幕
     * @param e
     */
    RoomViewMediator.prototype.onMouseDown = function (e) {
        if (e.target["$owner"].name.toLowerCase().indexOf('btn') != -1)
            return;
        if (e.target.parent["$owner"].name.toLowerCase().indexOf('btn') != -1)
            return;
        if (e.target.parent["$owner"].name == 'menuView')
            return;
        switch (this.fightModel.attactPattern) {
            case FightModel_1.AttactPattern.lock: /**锁定攻击 */
                if (e.target["$owner"].parent) {
                    var fishId = e.target["$owner"].parent.data;
                    if (fishId) {
                        this.lockFireModel(fishId);
                    }
                }
                break;
            case FightModel_1.AttactPattern.normal: /**自由攻击 */
                this.roomView.contentPane.on(Laya.Event.MOUSE_MOVE, this, this.onMouseMove);
                this.roomView.contentPane.on(Laya.Event.MOUSE_UP, this, this.onMouseUp);
                //防止mouseMove获取的xy为 可触摸按钮内的坐标系.
                this.roomView.contentPane.m_content.m_bulletView.m_lockBtn.touchable = false;
                this.roomView.contentPane.m_content.m_bulletView.m_autoFireBtn.touchable = false;
                this.roomView.contentPane.m_content.m_tipsView.m_menuView.m_menuBtn.touchable = false;
                this.normalFireModel(new Laya.Point(e.target.mouseX, e.target.mouseY));
                break;
            case FightModel_1.AttactPattern.auto: /**自动攻击 */
                UIManager_1.default.instance.showWindow(AutoHuntTipsView_1.default, false, UIManager_1.default.instance.popupLayer);
                break;
            default:
                break;
        }
    };
    RoomViewMediator.prototype.onMouseMove = function (e) {
        this.fireClickX = e.target.mouseX;
        this.fireClickY = e.target.mouseY;
    };
    RoomViewMediator.prototype.onMouseUp = function (e) {
        if (this.fightModel.attactPattern == FightModel_1.AttactPattern.normal) {
            Laya.timer.clearAll(this);
        }
        this.roomView.contentPane.m_content.m_bulletView.m_lockBtn.touchable = true;
        this.roomView.contentPane.m_content.m_bulletView.m_autoFireBtn.touchable = true;
        this.roomView.contentPane.m_content.m_tipsView.m_menuView.m_menuBtn.touchable = true;
        this.roomView.contentPane.off(Laya.Event.MOUSE_MOVE, this, this.onMouseMove);
        this.roomView.contentPane.off(Laya.Event.MOUSE_UP, this, this.onMouseUp);
    };
    /**
     * 自由攻击模式
     * @param targetPoint
     */
    RoomViewMediator.prototype.normalFireModel = function (targetPoint) {
        var _this = this;
        this.fireClickX = targetPoint.x;
        this.fireClickY = targetPoint.y;
        this.fixFireClick();
        //请求发射子弹
        this.fightServer.fireReq(0, this.fireClickX, this.fireClickY);
        Laya.timer.loop(100, this, function () {
            _this.fixFireClick();
            _this.fightServer.fireReq(0, _this.fireClickX, _this.fireClickY);
        });
    };
    /**
     * 发射点处于炮口和底座之间,应延长发射点至炮口正方向
     */
    RoomViewMediator.prototype.fixFireClick = function () {
        var bullet = BulletUtils_1.default.getBullet();
        var pos = this.playerModel.playerSelfInfo.pos;
        var batteryPoint = this.roomView.bulletView.getAxisPoint(this.roomView.bulletView.playerUiArr[pos].m_gunView.m_gun);
        var startPoint = new Laya.Point(batteryPoint.x - bullet.width * bullet.pivotX, 750); // 暂定,后续根据炮台编号读取对应炮台
        var direction = new Laya.Vector2(this.fireClickX - startPoint.x, this.fireClickY - startPoint.y);
        BulletUtils_1.default.recoverBullet(bullet);
        if (Laya.Vector2.scalarLength(direction) < 200) {
            var normalDirection = new Laya.Vector2(0, 0);
            Laya.Vector2.normalize(direction, normalDirection);
            var dot = Laya.Vector2.dot(new Laya.Vector2(0, -1), normalDirection);
            var radian = Math.acos(dot);
            //炮台长度113
            var rx = this.fireClickX > startPoint.x ? 1 : -1;
            this.fireClickX += Math.sin(radian) * 250 * rx;
            this.fireClickY -= 200;
        }
    };
    /**
     * 锁定攻击模式
     * @param fishId
     */
    RoomViewMediator.prototype.lockFireModel = function (fishId) {
        var _this = this;
        Laya.timer.clearAll(this);
        if (this.lastLockFishId != fishId) {
            var lastFish = FishManager_1.default.instance.getFishgObjectById(this.lastLockFishId);
            if (lastFish) {
                var lastFishScript = lastFish.displayObject.getComponent(AbstractFish_1.default);
                lastFishScript.isLock = false;
            }
            this.lastLockFishId = fishId;
        }
        var fish = FishManager_1.default.instance.getFishgObjectById(fishId);
        if (!fish)
            return;
        var fishScript = fish.displayObject.getComponent(AbstractFish_1.default);
        fishScript.isLock = true; //添加瞄准标识
        this.addAimLine(fishId); //添加瞄准线
        this.fightServer.fireReq(fishId, 0, 0);
        Laya.timer.loop(100, this, function () {
            var fish = FishManager_1.default.instance.getFishgObjectById(fishId);
            if (!fish) {
                _this.aimLineView && BatteryUtils_1.default.recoverAimLineView(_this.aimLineView);
                _this.aimLineView = null;
                Laya.timer.clearAll(_this);
            }
            else {
                var fishScript_1 = fish.displayObject.getComponent(AbstractFish_1.default);
                if (_this.fightModel.attactPattern == FightModel_1.AttactPattern.normal) {
                    fishScript_1.isLock = false;
                    _this.aimLineView && BatteryUtils_1.default.recoverAimLineView(_this.aimLineView);
                    _this.aimLineView = null;
                    Laya.timer.clearAll(_this);
                    return;
                }
                _this.fightServer.fireReq(fishId, 0, 0);
            }
        });
    };
    /**
     * 添加瞄准线
     * @param fishId
     */
    RoomViewMediator.prototype.addAimLine = function (fishId) {
        var _this = this;
        var fish = FishManager_1.default.instance.getFishgObjectById(fishId);
        if (this.aimLineView) {
            BatteryUtils_1.default.recoverAimLineView(this.aimLineView);
            this.aimLineView = null;
        }
        this.aimLineView = BatteryUtils_1.default.getAimLineView();
        var pos = this.playerModel.playerSelfInfo.pos;
        var ui = this.roomView.bulletView.playerUiArr[pos].m_gunView.m_gun;
        var gunPoint = this.roomView.bulletView.getAxisPoint(ui);
        var aimStartPoint = new Laya.Point(gunPoint.x, gunPoint.y);
        this.roomView.bulletView.addChild(this.aimLineView); //添加ui
        this.aimLineView.x = aimStartPoint.x;
        this.aimLineView.y = aimStartPoint.y;
        Laya.timer.frameLoop(1, this, function () {
            if (!_this.aimLineView)
                return;
            if (!fish) {
                BatteryUtils_1.default.recoverAimLineView(_this.aimLineView);
                _this.aimLineView = null;
                return;
            }
            var targetPoint = _this.roomView.bulletView.getAxisPoint(fish["m_aimSignLoader"]);
            var rotation = _this.roomView.bulletView.shootDirection(aimStartPoint, targetPoint);
            var distance = aimStartPoint.distance(targetPoint.x, targetPoint.y);
            distance = Math.floor(distance / 62) * 62; // 62为瞄准线上 两个点的间距加上点的宽度,防止出现不完整的点
            _this.aimLineView.m_mask.width = distance;
            _this.aimLineView.rotation = -90 + rotation;
        });
    };
    /**
     * 自动捕鱼
     * @param fishTypeList 待捕鱼的类型列表
     */
    RoomViewMediator.prototype.onAutoHunting = function (fishTypeList) {
        if (this.autoHuntingCurrentTargetFishId) {
            var fish = FishManager_1.default.instance.getFishgObjectById(this.autoHuntingCurrentTargetFishId);
            if (fish) {
                var script = fish.displayObject.getComponent(AbstractFish_1.default);
                if (fishTypeList.indexOf(DataMon_1.default.getData(script.fishTypeId).fishType) != -1)
                    return;
            }
        }
        // console.log(fishIdList);
        this.fightModel.attactPattern = FightModel_1.AttactPattern.auto;
        var fishInfo = FishManager_1.default.instance.fishInfo;
        var flag = false;
        for (var i = 0; i < fishTypeList.length; i++) {
            for (var j = 0; j < fishInfo.length; j++) {
                if (fishTypeList[i] == DataMon_1.default.getData(fishInfo[j].monTypeId).fishType) {
                    var fish = FishManager_1.default.instance.getFishgObjectById(fishInfo[j].monId);
                    if (!fish)
                        continue;
                    var fishScript = fish.displayObject.getComponent(AbstractFish_1.default);
                    if (fishScript.checkOutOfWall())
                        continue; //还在屏幕外
                    this.lockFireModel(fishInfo[j].monId);
                    this.autoHuntingCurrentTargetFishId = fishInfo[j].monId;
                    flag = true;
                    break;
                }
            }
            if (flag)
                break;
        }
    };
    /**
     * 新玩家进入房间
     * @param id
     */
    RoomViewMediator.prototype.onNewPlayerIntoRoom = function (id) {
        this.roomView.bulletView.showViewById(id);
    };
    /**
     * 玩家退出房间
     * @param id
     */
    RoomViewMediator.prototype.onPlayerExitRoom = function (id) {
        this.roomView.bulletView.hideViewById(id);
    };
    /**
     * 玩家余额更新, 此处只更新消耗, 余额增加需在飘完金币动画后更新
     * @param id
     */
    RoomViewMediator.prototype.onBalanceUpdate = function (_a) {
        var id = _a[0], change = _a[1];
        var playerInfo = PlayerManager_1.default.instance.findPlayerInfoById(id);
        if (!playerInfo)
            return;
        var pos = playerInfo.pos;
        // if(change < 0) {
        this.roomView.bulletView.playerUiArr[pos].m_infoView.m_coinTxt.text = (playerInfo.balance / 100).toFixed(2) + '';
        if (this.roomView.bulletView.playerUiArr[pos].m_infoView.m_coinTxt.text.indexOf(".") == -1) {
            this.roomView.bulletView.playerUiArr[pos].m_infoView.m_coinTxt.text += ".00";
        }
        // }
    };
    /**
     * 玩家炮台等级更新
     * @param id
     */
    RoomViewMediator.prototype.onBatteryLvUpdate = function (id) {
        var playerInfo = PlayerManager_1.default.instance.findPlayerInfoById(id);
        if (!playerInfo)
            return;
        var pos = playerInfo.pos;
        var playerUi = this.roomView.bulletView.playerUiArr[pos];
        var rate = Number(DataHuntingRoom_1.default.getData(this.roomModel.roomType).rate.toFixed(1));
        playerUi.m_gunView.m_gunLvTxt.text = "" + rate * playerInfo.batteryLv;
        if (playerUi.m_gunView.m_gunLvTxt.text.indexOf('.') != -1) {
            playerUi.m_gunView.m_gunLvTxt.text = "" + (rate * playerInfo.batteryLv).toFixed(1);
        }
        var gunUiName = [0, 1, 2];
        var index;
        if (playerInfo.batteryLv < 10)
            index = 0;
        else if (playerInfo.batteryLv < 100)
            index = 1;
        else
            index = 2;
        playerUi.m_gunView.m_gun.m_c1.selectedIndex = gunUiName[index];
        // 暂定 修改炮台等级
    };
    /**
     * 收到发射子弹的信号
     * @param bulletInfo
     */
    RoomViewMediator.prototype.onFireBullet = function (bulletInfo) {
        var bullet = this.roomView.bulletView.addBullet(bulletInfo);
        if (!bullet) {
            if (bulletInfo.userId == this.playerModel.playerSelfInfo.userId) {
                this.fightServer.shellReq(bulletInfo.shellId, 0, 0, []); //锁定模式下,鱼已被移除,该子弹无须发射,上报服务器该子弹无效
            }
            return;
        }
        this.soundController.dispatch(SoundEvents_1.default.BULLET);
        // console.log(`fishid===${bulletInfo.monId},,,bulletId===${bulletInfo.shellId}`);
        bullet.data = bulletInfo.shellId;
        BulletManager_1.default.instance.bullethgObjectGroup.push(bullet);
    };
    /**
     * 收到子弹出屏幕或击中的信号
     * @param info
     */
    RoomViewMediator.prototype.onBulletDestory = function (info) {
        var _this = this;
        // console.log(`====recoverBullet====${info.shellId}`);
        var bulletId = info.shellId;
        var fishId = info.monId;
        var deadFishList = info.deadList;
        var coin = info.reward;
        var bulletInfo = BulletManager_1.default.instance.getBulletInfoById(bulletId);
        var ownerId = bulletInfo.userId;
        var bulletCost = info.cost;
        //回收子弹
        BulletManager_1.default.instance.deleteBulletById(bulletId); //删除存储的子弹信息
        if (deadFishList.length > 0) {
            deadFishList.forEach(function (deadFish) {
                var fish = FishManager_1.default.instance.getFishgObjectById(deadFish.monId);
                if (fish) {
                    var fishScript = fish.displayObject.getComponent(AbstractFish_1.default);
                    fishScript.ratio = deadFish.rate;
                }
            });
        }
        if (fishId != 0) {
            var fishInfo = FishManager_1.default.instance.getFishInfoById(fishId);
            if (!fishInfo)
                return;
            var fishData = DataMon_1.default.getData(fishInfo.monTypeId);
            //击中鱼
            this.fishEvent(info.eventType); //触发事件类型
            if (info.eventType == FishEnum_1.fishTypeEnum.boss) {
                //海盗船
                var bossFish = FishManager_1.default.instance.getFishgObjectById(fishId);
                if (bossFish) {
                    var bossFishScript = bossFish.displayObject.getComponent(AbstractFish_1.default);
                    bossFishScript.ratio = info.reward / bulletCost;
                    this.goldMoneyAni(bossFish, bossFishScript, bulletCost, ownerId, false);
                }
            }
            if (deadFishList.length > 0) {
                if (this.fightModel.attactPattern == FightModel_1.AttactPattern.auto) {
                    if (ownerId == this.playerModel.playerSelfInfo.userId) {
                        this.autoHuntingFishHuntedSignal.dispatch([fishId, info.reward]); //自动模式下,派发鱼被捕获的信号
                    }
                }
                //19-金白鲨 20-美人鱼 24-大三元 25-大四喜 26-奖金鱼 27-一网打尽 死亡播放特殊提示
                if (fishData && [19, 20, 24, 25, 26, 27].indexOf(fishData.fishType) != -1) {
                    this.specialDeadTips(fishId, deadFishList, coin, bulletCost, ownerId, fishData.fishType);
                    return;
                }
                //一网打尽,特殊处理
                if (info.eventType == FishEnum_1.fishTypeEnum.catchAll) {
                    this.catchAll(fishId, deadFishList, bulletCost, ownerId);
                    return;
                }
                //除去一网打尽之外的情景
                var delayTime = 0;
                if (info.eventType == FishEnum_1.fishTypeEnum.boom) {
                    delayTime = 500; //全屏炸弹延时播放鱼死亡,飞金币动画
                }
                Laya.timer.once(delayTime, this, function () {
                    for (var i = 0; i < deadFishList.length; i++) {
                        //鱼死亡
                        var fish = FishManager_1.default.instance.getFishgObjectById(deadFishList[i].monId);
                        if (!fish)
                            continue;
                        var fishScript = fish.displayObject.getComponent(AbstractFish_1.default);
                        _this.goldMoneyAni(fish, fishScript, bulletCost, ownerId);
                    }
                });
            }
        }
    };
    /**
     * 一网打尽闪电链效果
     * @param triggerFish
     * @param deadFishList
     */
    RoomViewMediator.prototype.catchAll = function (triggerFish, deadFishList, bulletCost, ownerId) {
        var _this = this;
        var pos = PlayerManager_1.default.instance.findPlayerInfoById(ownerId).pos;
        var mainFish = FishManager_1.default.instance.getFishgObjectById(triggerFish);
        // let mainFishPoint: Laya.Point = new Laya.Point(mainFish.x + 25, mainFish.y + 25);
        var mainFishScript = mainFish.displayObject.getComponent(AbstractFish_1.default);
        var mainFishPoint = mainFishScript.getCenterPoint();
        mainFishScript.beforeDeadInCatchAll(); //静止主鱼
        var otherFish = [];
        var otherFishScript = [];
        var _loop_1 = function (i) {
            if (deadFishList[i].monId != triggerFish) {
                var fish = FishManager_1.default.instance.getFishgObjectById(deadFishList[i].monId);
                if (fish) {
                    var fishScript_2 = fish.displayObject.getComponent(AbstractFish_1.default);
                    otherFish.push(fish);
                    if (fishScript_2.checkOutOfWall()) {
                        fishScript_2.runUpTime = 1000;
                        Laya.timer.callLater(this_1, function () {
                            fishScript_2.beforeDeadInCatchAll(); //静止待连接的鱼
                        });
                    }
                    else {
                        fishScript_2.beforeDeadInCatchAll(); //静止待连接的鱼
                    }
                    otherFishScript.push(fishScript_2);
                }
            }
        };
        var this_1 = this;
        for (var i = 0; i < deadFishList.length; i++) {
            _loop_1(i);
        }
        //没有其他需要连接的鱼,直接播放主鱼的死亡
        if (otherFish.length == 0) {
            this.goldMoneyAni(mainFish, mainFishScript, bulletCost, ownerId);
            return;
        }
        //闪电连接其他同种类的鱼
        var lightAniIndex = 0;
        var _loop_2 = function (j) {
            var catchAllLineAniView = FUIcatchAllLineView_1.default.createInstance();
            // let fishPoint: Laya.Point = new Laya.Point(otherFish[j].x + 25, otherFish[j].y + 25);
            var fishPoint = otherFishScript[j].getCenterPoint();
            var distance = mainFishPoint.distance(fishPoint.x, fishPoint.y);
            //闪电链动画播完完成的回调
            var cb = Laya.Handler.create(this_2, function () {
                otherFish[j].m_specalAniLoader.url = "ui://roomScene/catchAllCircleAni";
                catchAllLineAniView.dispose();
                lightAniIndex += 1;
                //播放鱼死亡,飘金币、奖金动画
                if (lightAniIndex >= otherFish.length) {
                    otherFish.push(mainFish);
                    otherFishScript.push(mainFishScript);
                    for (var k = 0; k < otherFish.length; k++) {
                        _this.goldMoneyAni(otherFish[k], otherFishScript[k], bulletCost, ownerId);
                    }
                }
            });
            this_2.roomView.fishView.addChildAt(catchAllLineAniView, 0);
            catchAllLineAniView.x = mainFishPoint.x;
            catchAllLineAniView.y = mainFishPoint.y;
            var rotation = this_2.roomView.bulletView.shootDirection(mainFishPoint, fishPoint);
            catchAllLineAniView.rotation = -90 + rotation;
            console.log(catchAllLineAniView.x, catchAllLineAniView.y, rotation);
            //播放闪电特效
            catchAllLineAniView.play(100, distance, cb);
        };
        var this_2 = this;
        for (var j = 0; j < otherFish.length; j++) {
            _loop_2(j);
        }
    };
    /**
     * 部分鱼死后的提示
     * @param fishType 鱼类型（目前只处理 19-金白鲨 20-美人鱼 24-大三元 25-大四喜 26-奖金鱼 27-一网打尽）
     */
    RoomViewMediator.prototype.specialDeadTips = function (fishId, deadFishList, coin, bulletCost, ownerId, fishType) {
        var fish = FishManager_1.default.instance.getFishgObjectById(fishId);
        var fishScript = fish.displayObject.getComponent(AbstractFish_1.default);
        var fishPoint = fishScript.getCenterPoint();
        var tipsView = FUIFishDeadTipsView_1.default.createInstance();
        var ctrIdx;
        var fishUrl = "ui://roomScene/";
        switch (fishType) {
            case 19: //金白鲨
                ctrIdx = 0;
                fishUrl += "brdr_ycjm_icon_jinsha";
                break;
            case 20: //美人鱼
                ctrIdx = 0;
                fishUrl += "brdr_ycjm_icon_meirenyu";
                break;
            case 24: //大三元
                ctrIdx = 1;
                fishUrl += "brdr_ycjm_text_dsy";
                break;
            case 25: //大四喜
                ctrIdx = 1;
                fishUrl += "brdr_ycjm_text_dsx";
                break;
            case 26: //奖金鱼
                ctrIdx = 2;
                fishUrl += "brdr_ycjm_text_jjy";
                break;
            case 27: //一网打尽
                ctrIdx = 2;
                fishUrl += "brdr_ycjm_text_ywdj";
                tipsView.init(ctrIdx, fishUrl, coin);
                this.roomView.fishView.addChild(tipsView);
                tipsView.setXY(fishPoint.x - 80, fishPoint.y - 100);
                var cb_1 = Laya.Handler.create(this, function () {
                    tipsView.dispose();
                });
                tipsView.play(cb_1);
                this.catchAll(fishId, deadFishList, bulletCost, ownerId);
                return;
            default:
                break;
        }
        this.soundController.dispatch(SoundEvents_1.default.FISH_DEAD);
        tipsView.init(ctrIdx, fishUrl, coin);
        this.roomView.fishView.addChild(tipsView);
        tipsView.setXY(fishPoint.x - 80, fishPoint.y - 100);
        var cb = Laya.Handler.create(this, function () {
            tipsView.dispose();
        });
        this.goldMoneyAni(fish, fishScript, bulletCost, ownerId);
        tipsView.play(cb);
    };
    /**
     * 炮弹返回触发事件类型
     * @param type
     */
    RoomViewMediator.prototype.fishEvent = function (type) {
        switch (type) {
            case FishEnum_1.fishTypeEnum.boom:
                console.log("trigger fullScreenBoom");
                this.roomView.fishView.playFullScreenBoomAni();
                break;
            case FishEnum_1.fishTypeEnum.frozen:
                console.log("trigger frozen");
                this.soundController.dispatch(SoundEvents_1.default.ICE_FISH);
                break;
            case FishEnum_1.fishTypeEnum.boss:
                console.log("trigger boss");
                break;
            case FishEnum_1.fishTypeEnum.catchAll:
                console.log("trigger catchAll");
                break;
            case FishEnum_1.fishTypeEnum.jackPot:
                console.log("trigger jackPot");
                break;
            case FishEnum_1.fishTypeEnum.triStar:
                console.log("trigger triStar");
                break;
            case FishEnum_1.fishTypeEnum.four:
                console.log("trigger four");
                break;
            default:
                break;
        }
    };
    /**
     * 飘金币、奖金、回收鱼
     * @param fishScript
     * @param bulletCost 炮弹消耗
     * @param ownerId
     * @param recover
     */
    RoomViewMediator.prototype.goldMoneyAni = function (fish, fishScript, bulletCost, ownerId, recover) {
        var _this = this;
        if (recover === void 0) { recover = true; }
        var selfGoldAni = 'ui://5xl6v9kdvv7ubm';
        var othersGoldAni = 'ui://5xl6v9kdrhqcbn';
        var playerInfo = PlayerManager_1.default.instance.findPlayerInfoById(ownerId);
        var pos = playerInfo.pos;
        if ([25, 26].indexOf(fishScript.fishTypeId) != -1) {
            //黄金鲨,美人鱼播放全屏金币动画
            this.roomView.fishView.playFullScreenGoldAni();
        }
        //飘金币
        var goldAni = new GoldAni_1.default();
        var playerView = this.roomView.bulletView.playerUiArr[pos];
        var index = Number(playerView.name.charAt(playerView.name.length - 1));
        this.roomView.bulletView.m_c1.selectedIndex = index - 1;
        var playerPos = new Laya.Point(this.roomView.bulletView.m_goldPosition.x, this.roomView.bulletView.m_goldPosition.y);
        var fishPos = new Laya.Point(fish.x, fish.y);
        if (ownerId == this.playerModel.playerSelfInfo.userId) {
            var fishRatio_1 = fishScript.ratio;
            if (fishRatio_1) {
                var fishReward = fishRatio_1 * bulletCost / 100;
                playerView.m_goldList.pushGoldItems(fishReward, bulletCost / 100);
            }
            goldAni.setData(fishPos, playerPos, 8, selfGoldAni, this.roomView.roomTipsView);
        }
        else {
            goldAni.setData(fishPos, playerPos, 8, othersGoldAni, this.roomView.roomTipsView);
        }
        this.soundController.dispatch(SoundEvents_1.default.COIN_JUMP);
        var cb = Laya.Handler.create(this, function () {
            _this.soundController.dispatch(SoundEvents_1.default.COIN_IN);
        });
        goldAni.play(cb);
        //飘奖金数字
        // let fishRatio: number = DataMon.getData(fishScript.fishTypeId).rate[0];
        var fishRatio = fishScript.ratio;
        if (fishRatio) {
            var fishReward = fishRatio * bulletCost / 100;
            this.rewardMoneyAni(fishReward, ownerId, fishPos);
        }
        // console.log(`deadFish===` + deadFishList[i]);
        // console.log(`deleteFish===${deadFishList[i]}`);
        this.playFishDeadSound(fishScript.fishTypeId);
        if (recover) {
            FishManager_1.default.instance.deleteFishInfoById(fishScript.fishId); //删除该鱼对应的数据信息
            fishScript.recover();
            fishScript.reset();
        }
    };
    /**鱼死飘奖金 */
    RoomViewMediator.prototype.rewardMoneyAni = function (fishReward, ownerId, fishPos) {
        var winGoldTxtView = FUIwinGoldNumView_1.default.createInstance();
        if (ownerId == this.playerModel.playerSelfInfo.userId) {
            winGoldTxtView.m_winGoldTxt.font = "ui://0lwk28v8n86c78b";
        }
        else {
            winGoldTxtView.m_winGoldTxt.font = "ui://0lwk28v8n86c78c";
        }
        var pointIdx = fishReward.toString().indexOf('.');
        if (pointIdx != -1) {
            var pointLen = fishReward.toString().substring(pointIdx + 1, fishReward.toString().length).length;
            if (pointLen > 3) {
                fishReward = Number(fishReward.toFixed(3));
            }
        }
        winGoldTxtView.m_winGoldTxt.text = "+" + fishReward;
        winGoldTxtView.x = fishPos.x - winGoldTxtView.width / 2;
        winGoldTxtView.y = fishPos.y + winGoldTxtView.height / 2;
        this.roomView.roomTipsView.addChild(winGoldTxtView);
        winGoldTxtView.m_t1.play(Laya.Handler.create(this, function () {
            winGoldTxtView.removeFromParent();
            winGoldTxtView.dispose();
            winGoldTxtView = null;
        }), 1);
    };
    /**
     * 播放鱼死的音效
     * @param fishTypeId
     */
    RoomViewMediator.prototype.playFishDeadSound = function (fishTypeId) {
        switch (fishTypeId) {
            case FishEnum_1.fishTypeEnum.boom:
                this.soundController.dispatch(SoundEvents_1.default.BOOM_FISH);
                break;
            case FishEnum_1.fishTypeEnum.catchAll:
                this.soundController.dispatch(SoundEvents_1.default.CATCH_ALL);
                break;
            default:
                break;
        }
    };
    /**
     * 鱼潮来袭
     */
    RoomViewMediator.prototype.onFishTideResp = function () {
        this.aimLineView && BatteryUtils_1.default.recoverAimLineView(this.aimLineView);
        this.aimLineView = null;
        Laya.timer.clearAll(this); //取消自动发射子弹
        this.roomView.roomTipsView.playFishBoomAni();
        this.soundController.dispatch(SoundEvents_1.default.FISH_TIDE);
    };
    __decorate([
        inject(RoomView_1.default)
    ], RoomViewMediator.prototype, "roomView", void 0);
    __decorate([
        inject(FightModel_1.default)
    ], RoomViewMediator.prototype, "fightModel", void 0);
    __decorate([
        inject(PlayerModel_1.default)
    ], RoomViewMediator.prototype, "playerModel", void 0);
    __decorate([
        inject(RoomModel_1.default)
    ], RoomViewMediator.prototype, "roomModel", void 0);
    __decorate([
        inject(RoomInfoInitSignal_1.default)
    ], RoomViewMediator.prototype, "roomInfoInitSignal", void 0);
    __decorate([
        inject(FreshFishSignal_1.default)
    ], RoomViewMediator.prototype, "freshFishSignal", void 0);
    __decorate([
        inject(fightServer_1.default)
    ], RoomViewMediator.prototype, "fightServer", void 0);
    __decorate([
        inject(FireBulletSignal_1.default)
    ], RoomViewMediator.prototype, "fireBulletSignal", void 0);
    __decorate([
        inject(BulletDestorySignal_1.default)
    ], RoomViewMediator.prototype, "bulletDestorySignal", void 0);
    __decorate([
        inject(protocolSignals.FishTideRespSignal)
    ], RoomViewMediator.prototype, "fishTideRespSignal", void 0);
    __decorate([
        inject(NewPlayerSignal_1.default)
    ], RoomViewMediator.prototype, "newPlayerSignal", void 0);
    __decorate([
        inject(PlayerExitRoomSIgnal_1.default)
    ], RoomViewMediator.prototype, "playerExitRoomSignal", void 0);
    __decorate([
        inject(AttackPatternChangedSignal_1.default)
    ], RoomViewMediator.prototype, "attactPatternChangedSignal", void 0);
    __decorate([
        inject(BalanceUpdateSignal_1.default)
    ], RoomViewMediator.prototype, "balanceUpdateSignal", void 0);
    __decorate([
        inject(BatteryLvUpdateSignal_1.default)
    ], RoomViewMediator.prototype, "batteryLvUpdateSignal", void 0);
    __decorate([
        inject(FishInfoUpdateSignal_1.default)
    ], RoomViewMediator.prototype, "fishInfoUpdateSignal", void 0);
    __decorate([
        inject(AutoHuntingSignal_1.default)
    ], RoomViewMediator.prototype, "autoHuntingSignal", void 0);
    __decorate([
        inject(AutoHuntingFishHuntedSignal_1.default)
    ], RoomViewMediator.prototype, "autoHuntingFishHuntedSignal", void 0);
    __decorate([
        inject(CoinLackSignal_1.default)
    ], RoomViewMediator.prototype, "coinLackSignal", void 0);
    __decorate([
        inject(SoundController_1.default)
    ], RoomViewMediator.prototype, "soundController", void 0);
    return RoomViewMediator;
}(riggerIOC.Mediator));
exports.default = RoomViewMediator;
},{"../../../data/tpls/DataHuntingRoom":58,"../../../data/tpls/DataMon":60,"../../../fui/roomScene/FUIFishDeadTipsView":125,"../../../fui/roomScene/FUIcatchAllLineView":142,"../../../fui/roomScene/FUIwinGoldNumView":158,"../../../manager/UIManager":164,"../../../protocol/signals/signals":273,"../../../script/battery/utils/BatteryUtils":274,"../../../script/bullet/bulletScript/AbstractBullet":278,"../../../script/bullet/utils/BulletUtils":281,"../../../script/enum/FishEnum":282,"../../../script/fish/fishScript/AbstractFish":283,"../../../script/gold/GoldAni":292,"../../../utils/Utils":306,"../../fightModule/models/FightModel":201,"../../fightModule/servers/fightServer":202,"../../fightModule/signals/AttackPatternChangedSignal":203,"../../fightModule/signals/BulletDestorySignal":204,"../../fightModule/signals/FireBulletSignal":205,"../../fightModule/signals/FishInfoUpdateSignal":206,"../../fightModule/signals/FreshFishSignal":207,"../../playerModule/models/PlayerModel":226,"../../soundModule/SoundController":268,"../../soundModule/SoundEvents":269,"../models/BulletManager":235,"../models/FishManager":236,"../models/PlayerManager":237,"../models/RoomModel":238,"../signals/AutoHuntingFishHuntedSignal":240,"../signals/AutoHuntingSignal":241,"../signals/BalanceUpdateSignal":242,"../signals/BatteryLvUpdateSignal":243,"../signals/CoinLackSignal":244,"../signals/NewPlayerSignal":247,"../signals/PlayerExitRoomSIgnal":248,"../signals/RoomInfoInitSignal":249,"./AutoHuntTipsView":253,"./GuideView":261,"./RoomView":263}],265:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var FUIShowGoldListView_1 = require("../../../fui/roomScene/FUIShowGoldListView");
var FUIGoldListItemView_1 = require("../../../fui/roomScene/FUIGoldListItemView");
var PlayerModel_1 = require("../../playerModule/models/PlayerModel");
var ShowGoldListView = /** @class */ (function (_super) {
    __extends(ShowGoldListView, _super);
    function ShowGoldListView() {
        var _this = _super.call(this) || this;
        //移动方向 1:left  -1:right
        _this.moveDirection = 1;
        _this.goldItems = [];
        _this.showMaxNum = 7;
        _this.excessGoldItems = [];
        _this.isMoving = false;
        _this._ratio = 0;
        _this.spaceX = 8;
        _this.GoldListItemSignal = 'GOLD_LIST_ITEM_SIGNAL';
        return _this;
    }
    ShowGoldListView.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
    };
    ShowGoldListView.prototype.init = function (pos) {
        if ([1, 3].indexOf(pos) != -1) {
            //left
            this.firstPos = new Laya.Point(0, 115);
            this.moveDirection = 1;
        }
        else {
            this.firstPos = new Laya.Point(406, 115);
            this.moveDirection = -1;
        }
    };
    ShowGoldListView.prototype.dispose = function () {
        var _this = this;
        _super.prototype.dispose.call(this);
        this.goldItems && this.goldItems.forEach(function (item) {
            item && _this.recoverGoldItemView(item);
        });
        this.excessGoldItems && this.excessGoldItems.forEach(function (item) {
            item && _this.recoverGoldItemView(item);
        });
        this.goldItems = [];
        this.excessGoldItems = [];
        Laya.timer.clearAll(this);
    };
    ShowGoldListView.prototype.pushGoldItems = function (coin, bulletCost) {
        var goldItem = this.getGoldItemView();
        goldItem.setMoney(coin, bulletCost);
        if (this.goldItems.length == 0) {
            goldItem.x = this.firstPos.x;
            goldItem.y = this.firstPos.y;
        }
        else {
            goldItem.x = this.firstPos.x + this.moveDirection * (goldItem.width + this.spaceX) * this.goldItems.length;
            goldItem.y = this.goldItems[this.goldItems.length - 1].y;
        }
        if (this.goldItems && this.goldItems.length >= this.showMaxNum) {
            this.excessGoldItems.push(goldItem); //当前显示金币数量已达上限,存储到额外的金币数组
        }
        else {
            this.goldItems.push(goldItem);
            this.addChild(goldItem);
            this.moveGoldItems();
        }
    };
    ShowGoldListView.prototype.moveGoldItems = function () {
        var _this = this;
        if (this.goldItems && this.goldItems.length < this.showMaxNum && this.excessGoldItems && this.excessGoldItems[0]) {
            this.goldItems.push(this.excessGoldItems[0]);
            this.addChild(this.excessGoldItems[0]);
            this.adjustPos();
            this.excessGoldItems.splice(0, 1);
        }
        if (this.isMoving)
            return;
        if (this.goldItems && this.goldItems.length >= 1) {
            this.isMoving = true;
            Laya.timer.clearAll(this);
            Laya.timer.once(1000, this, function () {
                _this.ratio = 0;
                Laya.Tween.to(_this, { ratio: 1 }, 500, null, Laya.Handler.create(_this, function () {
                    _this.goldItems[0] && _this.recoverGoldItemView(_this.goldItems[0]);
                    _this.goldItems.splice(0, 1);
                    _this.isMoving = false;
                    _this.moveGoldItems();
                }));
            });
        }
    };
    Object.defineProperty(ShowGoldListView.prototype, "ratio", {
        get: function () { return this._ratio; },
        set: function (v) {
            this._ratio = v;
            if (this.goldItems[0]) {
                this.goldItems[0].x = this.firstPos.x + (-1) * this.moveDirection * (this.goldItems[0].width + this.spaceX) * v;
                this.goldItems[0].alpha = 1 - v;
                this.adjustPos();
            }
        },
        enumerable: true,
        configurable: true
    });
    ;
    ShowGoldListView.prototype.adjustPos = function () {
        if (!this.goldItems || this.goldItems.length <= 0)
            return;
        var self = this;
        this.goldItems.forEach(function (item, idx, items) {
            item.y = self.firstPos.y;
            if (idx > 0) {
                item.x = items[idx - 1].x + (item.width + self.spaceX) * self.moveDirection;
            }
        });
    };
    ShowGoldListView.prototype.getGoldItemView = function () {
        return rigger.service.PoolService.instance.getItemByCreateFun(this.GoldListItemSignal, this.createGoldItem);
    };
    ShowGoldListView.prototype.recoverGoldItemView = function (item) {
        if (item) {
            item.alpha = 1;
            item.clear();
            item.removeFromParent();
        }
        rigger.service.PoolService.instance.recover(this.GoldListItemSignal, item);
    };
    ShowGoldListView.prototype.createGoldItem = function () {
        var goldItem = FUIGoldListItemView_1.default.createInstance();
        return goldItem;
    };
    __decorate([
        riggerIOC.inject(PlayerModel_1.default)
    ], ShowGoldListView.prototype, "playerModel", void 0);
    return ShowGoldListView;
}(FUIShowGoldListView_1.default));
exports.ShowGoldListView = ShowGoldListView;
},{"../../../fui/roomScene/FUIGoldListItemView":128,"../../../fui/roomScene/FUIShowGoldListView":137,"../../playerModule/models/PlayerModel":226}],266:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var PlaySoundType_1 = require("../../definitions/PlaySoundType");
var SoundOperateType_1 = require("./SoundOperateType");
/**
* 声音播放设置
*/
var PlaySoundSpecific = /** @class */ (function () {
    function PlaySoundSpecific(url, soundType, loops, completeHandler, operateType) {
        if (soundType === void 0) { soundType = PlaySoundType_1.PlaySoundType.Effect; }
        if (operateType === void 0) { operateType = SoundOperateType_1.SoundOperateType.Play; }
        /**
          * 声音类型（背景，音效，对话),默认为音效
          */
        this.soundType = PlaySoundType_1.PlaySoundType.Effect;
        /**
          * 要对声音执行何种操作
          */
        this.operateType = SoundOperateType_1.SoundOperateType.Play;
        this.url = url;
        this.soundType = soundType;
        this.loops = loops;
        this.completeHandler = completeHandler;
        this.operateType = operateType;
    }
    return PlaySoundSpecific;
}());
exports.default = PlaySoundSpecific;
},{"../../definitions/PlaySoundType":66,"./SoundOperateType":270}],267:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var SoundController_1 = require("./SoundController");
var SoundManager_1 = require("../../manager/SoundManager");
/**
* name
*/
var SoundContext = /** @class */ (function (_super) {
    __extends(SoundContext, _super);
    function SoundContext(app) {
        return _super.call(this, app) || this;
    }
    /**
     * 绑定注入
     */
    SoundContext.prototype.bindInjections = function () {
        // 绑定一个全局的背景音乐策略类
        this.injectionBinder.bind(SoundController_1.default).toSingleton();
    };
    /**
     * 绑定命令
     */
    SoundContext.prototype.bindCommands = function () {
    };
    /**
     * 绑定界面与Mediator
     */
    SoundContext.prototype.bindMediators = function () {
    };
    SoundContext.prototype.onStart = function () {
        SoundManager_1.default.instance.init();
        // Laya.SoundManager.useAudioMusic = false;
        // fairygui.UIConfig.buttonSound = AssetsUtils.makeSoundUrl("Currency_Button", "ddzLoading");
        // SoundManager.instance.musicVolume = 1;
        SoundManager_1.default.instance.musicVolume = Laya.LocalStorage.getItem("musicVol") ? parseInt(Laya.LocalStorage.getItem("musicVol")) / 100 : 1;
        SoundManager_1.default.instance.soundVolume = Laya.LocalStorage.getItem("soundVol") ? parseInt(Laya.LocalStorage.getItem("soundVol")) / 100 : 1;
        SoundManager_1.default.instance.effectVolume = Laya.LocalStorage.getItem("soundVol") ? parseInt(Laya.LocalStorage.getItem("soundVol")) / 100 : 1;
        this.done();
    };
    return SoundContext;
}(riggerIOC.ModuleContext));
exports.default = SoundContext;
},{"../../manager/SoundManager":163,"./SoundController":268}],268:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var PlaySoundSpecific_1 = require("./PlaySoundSpecific");
var SoundManager_1 = require("../../manager/SoundManager");
var PlaySoundType_1 = require("../../definitions/PlaySoundType");
var Utils_1 = require("../../utils/Utils");
var SceneName_1 = require("../../definitions/SceneName");
var AssetsUtils_1 = require("../../utils/AssetsUtils");
var SoundEvents_1 = require("./SoundEvents");
/**
* 场景背景音乐的策略接口
*/
var SoundController = /** @class */ (function () {
    function SoundController() {
        // this.registerEvent();
    }
    /**
     * 注册声音事件时的回调
     * 返回需要注册的事件列表
     *
     */
    // protected onRegisterEvent(): string[] {
    // 	return null;
    // }
    /**
     * 进入场景时的回调
     * 返回新的背景音乐地址列表
     * 如果不发生任何变化，请返回null
     * @param scene
     * @param oldScene
     */
    SoundController.prototype.onEnterScene = function (scene, oldScene) {
        switch (scene) {
            case SceneName_1.default.LobbyScene:
                return [new PlaySoundSpecific_1.default(AssetsUtils_1.default.makeSoundUrl("lobbyBgm", "loading"), PlaySoundType_1.PlaySoundType.BGM, 0)];
            case SceneName_1.default.RoomScene:
                return [new PlaySoundSpecific_1.default(AssetsUtils_1.default.makeSoundUrl("roomBgm", "loading"), PlaySoundType_1.PlaySoundType.BGM, 0)];
            default:
                return null;
        }
    };
    /**
     * 有特定时间发生时的回调
     * 返回新的背景音乐地址列表
     * 如果不发生任何变化，请返回null
     * @param scene
     * @param event
     * @param data
     */
    SoundController.prototype.onEvent = function (event) {
        var data = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            data[_i - 1] = arguments[_i];
        }
        switch (event) {
            case SoundEvents_1.default.BULLET:
                return [new PlaySoundSpecific_1.default(AssetsUtils_1.default.makeSoundUrl("bullet", "loading"), PlaySoundType_1.PlaySoundType.Effect)];
            case SoundEvents_1.default.BOOM_FISH:
                return [new PlaySoundSpecific_1.default(AssetsUtils_1.default.makeSoundUrl("boomFish", "loading"), PlaySoundType_1.PlaySoundType.Effect)];
            case SoundEvents_1.default.CATCH_ALL:
                return [new PlaySoundSpecific_1.default(AssetsUtils_1.default.makeSoundUrl("catchAll", "loading"), PlaySoundType_1.PlaySoundType.Effect)];
            case SoundEvents_1.default.COIN_IN:
                return [new PlaySoundSpecific_1.default(AssetsUtils_1.default.makeSoundUrl("coinIn", "loading"), PlaySoundType_1.PlaySoundType.Effect)];
            case SoundEvents_1.default.COIN_JUMP:
                return [new PlaySoundSpecific_1.default(AssetsUtils_1.default.makeSoundUrl("coinJump", "loading"), PlaySoundType_1.PlaySoundType.Effect)];
            case SoundEvents_1.default.FISH_TIDE:
                return [new PlaySoundSpecific_1.default(AssetsUtils_1.default.makeSoundUrl("fishTide", "loading"), PlaySoundType_1.PlaySoundType.Effect)];
            case SoundEvents_1.default.FISH_IN:
                return [new PlaySoundSpecific_1.default(AssetsUtils_1.default.makeSoundUrl("19_20fishIn", "loading"), PlaySoundType_1.PlaySoundType.Effect)];
            case SoundEvents_1.default.FISH_DEAD:
                return [new PlaySoundSpecific_1.default(AssetsUtils_1.default.makeSoundUrl("fishDead", "loading"), PlaySoundType_1.PlaySoundType.Effect)];
            case SoundEvents_1.default.ICE_FISH:
                return [new PlaySoundSpecific_1.default(AssetsUtils_1.default.makeSoundUrl("iceFish", "loading"), PlaySoundType_1.PlaySoundType.Effect)];
            default:
                break;
        }
        return null;
    };
    /**
     * 注册事件
     * 返回需要注册的事件
     * @param event
     */
    // private registerEvent(): void {
    // 	if (!this.events) this.events = {};
    // 	// 预注册一些声音事件
    // 	this.events[SoundEvents.StartDeelCards] = true;
    // 	this.events[SoundEvents.GiveDiscarding] = true;
    // 	this.events[SoundEvents.MinRemainedCardsNum] = true;
    // 	this.events[SoundEvents.ShowFightOverView] = true;
    // 	this.events[SoundEvents.TimeOutAlarm] = true;
    // 	let add: string[] = this.onRegisterEvent();
    // 	if (add && add.length > 0) {
    // 		for (var i: number = 0; i < add.length; ++i) {
    // 			this.events[add[i]] = true;
    // 		}
    // 	}
    // }
    /**
     * 进入场景
     * 返回新的背景音乐地址
     * @param scene
     * @param oldScene
     */
    SoundController.prototype.enterScene = function (scene, oldScene) {
        var specs = this.onEnterScene(scene, oldScene);
        if (!specs || specs.length <= 0)
            return;
        // 提取出背景声音
        // 提取出背景声音
        var bgmUrls = [];
        var effects = [];
        var dialogs = [];
        this.filterSoundSpecs(specs, bgmUrls, effects, dialogs);
        this.applySound(bgmUrls, effects, dialogs);
    };
    /**
     * 派发特定事件
     * 返回新的背景音乐地址列表
     * @param scene
     * @param event
     * @param data
     */
    SoundController.prototype.dispatch = function (event) {
        var data = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            data[_i - 1] = arguments[_i];
        }
        var specs = this.onEvent.apply(this, [event].concat(data));
        if (!specs || specs.length <= 0)
            return;
        // 提取出背景声音
        var bgmUrls = [];
        var effects = [];
        var dialogs = [];
        this.filterSoundSpecs(specs, bgmUrls, effects, dialogs);
        this.applySound(bgmUrls, effects, dialogs);
    };
    /**
     * 应用声音()
     * @param bgmUrls
     * @param nonBgmSpecs
     */
    SoundController.prototype.applySound = function (bgmUrls, effects, dialogs) {
        // 背景
        if (bgmUrls && bgmUrls.length > 0) {
            SoundManager_1.default.instance.bgmUrls = bgmUrls;
        }
        if (effects && effects.length > 0) {
            if (effects.length === 1) {
                SoundManager_1.default.instance.playSound(effects[0].url, PlaySoundType_1.PlaySoundType.Effect, effects[0].loops, effects[0].completeHandler);
            }
            else {
                // 随机一个
                var idx = Utils_1.default.random(0, effects.length - 1);
                SoundManager_1.default.instance.playSound(effects[idx].url, PlaySoundType_1.PlaySoundType.Effect, effects[idx].loops, effects[idx].completeHandler);
            }
        }
        if (dialogs && dialogs.length > 0) {
            if (dialogs.length === 1) {
                SoundManager_1.default.instance.playSound(dialogs[0].url, PlaySoundType_1.PlaySoundType.Dialog, dialogs[0].loops, dialogs[0].completeHandler);
            }
            else {
                // 随机一个
                var idx = Utils_1.default.random(0, effects.length - 1);
                SoundManager_1.default.instance.playSound(dialogs[idx].url, PlaySoundType_1.PlaySoundType.Dialog, dialogs[idx].loops, dialogs[idx].completeHandler);
            }
        }
    };
    SoundController.prototype.filterSoundSpecs = function (specs, bgmUrls, effects, dialogs) {
        if (specs) {
            // 提取出背景声音
            for (var i = 0; i < specs.length; ++i) {
                switch (specs[i].soundType) {
                    case PlaySoundType_1.PlaySoundType.BGM:
                        bgmUrls.push(specs[i].url);
                        break;
                    case PlaySoundType_1.PlaySoundType.Effect:
                        effects.push(specs[i]);
                        break;
                    case PlaySoundType_1.PlaySoundType.Dialog:
                        effects.push(specs[i]);
                        break;
                    default:
                        break;
                }
            }
        }
    };
    return SoundController;
}());
exports.default = SoundController;
},{"../../definitions/PlaySoundType":66,"../../definitions/SceneName":67,"../../manager/SoundManager":163,"../../utils/AssetsUtils":301,"../../utils/Utils":306,"./PlaySoundSpecific":266,"./SoundEvents":269}],269:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
* 声音事件
*/
var SoundEvents = /** @class */ (function () {
    function SoundEvents() {
    }
    /**
     * 大厅
     */
    SoundEvents.InLobby = "InLobby";
    /**
     * 房间
     */
    SoundEvents.InRoom = "InRoom";
    SoundEvents.BULLET = 'bullet';
    SoundEvents.BOOM_FISH = 'boomFish';
    SoundEvents.CATCH_ALL = 'catchAll';
    SoundEvents.COIN_IN = 'coinIn';
    SoundEvents.COIN_JUMP = 'coin_jump';
    SoundEvents.FISH_TIDE = 'fishTide';
    SoundEvents.FISH_IN = 'fishIn';
    SoundEvents.FISH_DEAD = 'fishDead';
    SoundEvents.ICE_FISH = 'iceFish';
    return SoundEvents;
}());
exports.default = SoundEvents;
},{}],270:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
* 声音操作类型
*/
var SoundOperateType;
(function (SoundOperateType) {
    SoundOperateType[SoundOperateType["Play"] = 1] = "Play";
    SoundOperateType[SoundOperateType["Stop"] = 2] = "Stop";
    SoundOperateType[SoundOperateType["Pause"] = 3] = "Pause";
})(SoundOperateType = exports.SoundOperateType || (exports.SoundOperateType = {}));
},{}],271:[function(require,module,exports){
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var DecoratorUtil_1 = require("../utils/DecoratorUtil");
var protocolSignals = require("./signals/signals");
var protocol = require("./protocols/protocols");
var CommandCodes = /** @class */ (function () {
    function CommandCodes() {
    }
    CommandCodes.PPLoginReq = 1;
    CommandCodes.PPLoginResp = 2;
    CommandCodes.PPErrResp = 3;
    CommandCodes.PPBeatHeartReq = 4;
    CommandCodes.PPBeatHeartResp = 5;
    CommandCodes.PPGmReq = 6;
    CommandCodes.PPGmResp = 7;
    CommandCodes.PPKickUserPush = 8;
    CommandCodes.PPGetBalanceReq = 9;
    CommandCodes.PPGetBalanceResp = 10;
    CommandCodes.PPBalancePush = 11;
    CommandCodes.PPUserSettingReq = 15;
    CommandCodes.PPShareBalanceReq = 16;
    CommandCodes.PPUserInfoReq = 17;
    CommandCodes.PPUserInfoResp = 18;
    CommandCodes.PPSystemPush = 19;
    CommandCodes.PPAnnouncementPush = 20;
    CommandCodes.PPHuntingInfoReq = 1000;
    CommandCodes.PPHuntingInfoResp = 1001;
    CommandCodes.PPHuntingEnterRoomReq = 1002;
    CommandCodes.PPHuntingEnterRoomOkReq = 1003;
    CommandCodes.PPHuntingEnterRoomResp = 1004;
    CommandCodes.PPHuntingExitRoomReq = 1005;
    CommandCodes.PPHuntingExitRoomResp = 1006;
    CommandCodes.PPHuntingRoomInfoResp = 1007;
    CommandCodes.PPMonRefreshResp = 1008;
    CommandCodes.PPChangeBatteryLvReq = 1009;
    CommandCodes.PPUpdatePlayerResp = 1010;
    CommandCodes.PPFireReq = 1011;
    CommandCodes.PPFireResp = 1012;
    CommandCodes.PPShellReq = 1013;
    CommandCodes.PPShellResp = 1014;
    CommandCodes.PPMonUpdateResp = 1015;
    CommandCodes.PPFishTideResp = 1016;
    CommandCodes.PPRankReq = 1017;
    CommandCodes.PPRankResp = 1018;
    CommandCodes.PPHuntingSettingReq = 1019;
    CommandCodes.PPHuntingSettingResp = 1020;
    __decorate([
        DecoratorUtil_1.default.retrievAble(CommandCodes.PPLoginReq)
    ], CommandCodes, "PPLoginReq", void 0);
    __decorate([
        DecoratorUtil_1.default.retrievAble(CommandCodes.PPLoginResp),
        DecoratorUtil_1.default.protocolResponseSignal(protocolSignals.LoginRespSignal),
        DecoratorUtil_1.default.protocolResponse(protocol.LoginResp)
    ], CommandCodes, "PPLoginResp", void 0);
    __decorate([
        DecoratorUtil_1.default.retrievAble(CommandCodes.PPErrResp),
        DecoratorUtil_1.default.protocolResponseSignal(protocolSignals.ErrRespSignal),
        DecoratorUtil_1.default.protocolResponse(protocol.ErrResp)
    ], CommandCodes, "PPErrResp", void 0);
    __decorate([
        DecoratorUtil_1.default.retrievAble(CommandCodes.PPBeatHeartReq)
    ], CommandCodes, "PPBeatHeartReq", void 0);
    __decorate([
        DecoratorUtil_1.default.retrievAble(CommandCodes.PPBeatHeartResp),
        DecoratorUtil_1.default.protocolResponseSignal(protocolSignals.BeatHeartRespSignal),
        DecoratorUtil_1.default.protocolResponse(protocol.BeatHeartResp)
    ], CommandCodes, "PPBeatHeartResp", void 0);
    __decorate([
        DecoratorUtil_1.default.retrievAble(CommandCodes.PPGmReq)
    ], CommandCodes, "PPGmReq", void 0);
    __decorate([
        DecoratorUtil_1.default.retrievAble(CommandCodes.PPGmResp),
        DecoratorUtil_1.default.protocolResponseSignal(protocolSignals.GmRespSignal),
        DecoratorUtil_1.default.protocolResponse(protocol.GmResp)
    ], CommandCodes, "PPGmResp", void 0);
    __decorate([
        DecoratorUtil_1.default.retrievAble(CommandCodes.PPKickUserPush),
        DecoratorUtil_1.default.protocolResponseSignal(protocolSignals.KickUserPushSignal),
        DecoratorUtil_1.default.protocolResponse(protocol.KickUserPush)
    ], CommandCodes, "PPKickUserPush", void 0);
    __decorate([
        DecoratorUtil_1.default.retrievAble(CommandCodes.PPGetBalanceReq)
    ], CommandCodes, "PPGetBalanceReq", void 0);
    __decorate([
        DecoratorUtil_1.default.retrievAble(CommandCodes.PPGetBalanceResp),
        DecoratorUtil_1.default.protocolResponseSignal(protocolSignals.GetBalanceRespSignal),
        DecoratorUtil_1.default.protocolResponse(protocol.GetBalanceResp)
    ], CommandCodes, "PPGetBalanceResp", void 0);
    __decorate([
        DecoratorUtil_1.default.retrievAble(CommandCodes.PPBalancePush),
        DecoratorUtil_1.default.protocolResponseSignal(protocolSignals.BalancePushSignal),
        DecoratorUtil_1.default.protocolResponse(protocol.BalancePush)
    ], CommandCodes, "PPBalancePush", void 0);
    __decorate([
        DecoratorUtil_1.default.retrievAble(CommandCodes.PPUserSettingReq)
    ], CommandCodes, "PPUserSettingReq", void 0);
    __decorate([
        DecoratorUtil_1.default.retrievAble(CommandCodes.PPShareBalanceReq)
    ], CommandCodes, "PPShareBalanceReq", void 0);
    __decorate([
        DecoratorUtil_1.default.retrievAble(CommandCodes.PPUserInfoReq)
    ], CommandCodes, "PPUserInfoReq", void 0);
    __decorate([
        DecoratorUtil_1.default.retrievAble(CommandCodes.PPUserInfoResp),
        DecoratorUtil_1.default.protocolResponseSignal(protocolSignals.UserInfoRespSignal),
        DecoratorUtil_1.default.protocolResponse(protocol.UserInfoResp)
    ], CommandCodes, "PPUserInfoResp", void 0);
    __decorate([
        DecoratorUtil_1.default.retrievAble(CommandCodes.PPSystemPush),
        DecoratorUtil_1.default.protocolResponseSignal(protocolSignals.SystemPushSignal),
        DecoratorUtil_1.default.protocolResponse(protocol.SystemPush)
    ], CommandCodes, "PPSystemPush", void 0);
    __decorate([
        DecoratorUtil_1.default.retrievAble(CommandCodes.PPAnnouncementPush),
        DecoratorUtil_1.default.protocolResponseSignal(protocolSignals.AnnouncementPushSignal),
        DecoratorUtil_1.default.protocolResponse(protocol.AnnouncementPush)
    ], CommandCodes, "PPAnnouncementPush", void 0);
    __decorate([
        DecoratorUtil_1.default.retrievAble(CommandCodes.PPHuntingInfoReq)
    ], CommandCodes, "PPHuntingInfoReq", void 0);
    __decorate([
        DecoratorUtil_1.default.retrievAble(CommandCodes.PPHuntingInfoResp),
        DecoratorUtil_1.default.protocolResponseSignal(protocolSignals.HuntingInfoRespSignal),
        DecoratorUtil_1.default.protocolResponse(protocol.HuntingInfoResp)
    ], CommandCodes, "PPHuntingInfoResp", void 0);
    __decorate([
        DecoratorUtil_1.default.retrievAble(CommandCodes.PPHuntingEnterRoomReq)
    ], CommandCodes, "PPHuntingEnterRoomReq", void 0);
    __decorate([
        DecoratorUtil_1.default.retrievAble(CommandCodes.PPHuntingEnterRoomOkReq)
    ], CommandCodes, "PPHuntingEnterRoomOkReq", void 0);
    __decorate([
        DecoratorUtil_1.default.retrievAble(CommandCodes.PPHuntingEnterRoomResp),
        DecoratorUtil_1.default.protocolResponseSignal(protocolSignals.HuntingEnterRoomRespSignal),
        DecoratorUtil_1.default.protocolResponse(protocol.HuntingEnterRoomResp)
    ], CommandCodes, "PPHuntingEnterRoomResp", void 0);
    __decorate([
        DecoratorUtil_1.default.retrievAble(CommandCodes.PPHuntingExitRoomReq)
    ], CommandCodes, "PPHuntingExitRoomReq", void 0);
    __decorate([
        DecoratorUtil_1.default.retrievAble(CommandCodes.PPHuntingExitRoomResp),
        DecoratorUtil_1.default.protocolResponseSignal(protocolSignals.HuntingExitRoomRespSignal),
        DecoratorUtil_1.default.protocolResponse(protocol.HuntingExitRoomResp)
    ], CommandCodes, "PPHuntingExitRoomResp", void 0);
    __decorate([
        DecoratorUtil_1.default.retrievAble(CommandCodes.PPHuntingRoomInfoResp),
        DecoratorUtil_1.default.protocolResponseSignal(protocolSignals.HuntingRoomInfoRespSignal),
        DecoratorUtil_1.default.protocolResponse(protocol.HuntingRoomInfoResp)
    ], CommandCodes, "PPHuntingRoomInfoResp", void 0);
    __decorate([
        DecoratorUtil_1.default.retrievAble(CommandCodes.PPMonRefreshResp),
        DecoratorUtil_1.default.protocolResponseSignal(protocolSignals.MonRefreshRespSignal),
        DecoratorUtil_1.default.protocolResponse(protocol.MonRefreshResp)
    ], CommandCodes, "PPMonRefreshResp", void 0);
    __decorate([
        DecoratorUtil_1.default.retrievAble(CommandCodes.PPChangeBatteryLvReq)
    ], CommandCodes, "PPChangeBatteryLvReq", void 0);
    __decorate([
        DecoratorUtil_1.default.retrievAble(CommandCodes.PPUpdatePlayerResp),
        DecoratorUtil_1.default.protocolResponseSignal(protocolSignals.UpdatePlayerRespSignal),
        DecoratorUtil_1.default.protocolResponse(protocol.UpdatePlayerResp)
    ], CommandCodes, "PPUpdatePlayerResp", void 0);
    __decorate([
        DecoratorUtil_1.default.retrievAble(CommandCodes.PPFireReq)
    ], CommandCodes, "PPFireReq", void 0);
    __decorate([
        DecoratorUtil_1.default.retrievAble(CommandCodes.PPFireResp),
        DecoratorUtil_1.default.protocolResponseSignal(protocolSignals.FireRespSignal),
        DecoratorUtil_1.default.protocolResponse(protocol.FireResp)
    ], CommandCodes, "PPFireResp", void 0);
    __decorate([
        DecoratorUtil_1.default.retrievAble(CommandCodes.PPShellReq)
    ], CommandCodes, "PPShellReq", void 0);
    __decorate([
        DecoratorUtil_1.default.retrievAble(CommandCodes.PPShellResp),
        DecoratorUtil_1.default.protocolResponseSignal(protocolSignals.ShellRespSignal),
        DecoratorUtil_1.default.protocolResponse(protocol.ShellResp)
    ], CommandCodes, "PPShellResp", void 0);
    __decorate([
        DecoratorUtil_1.default.retrievAble(CommandCodes.PPMonUpdateResp),
        DecoratorUtil_1.default.protocolResponseSignal(protocolSignals.MonUpdateRespSignal),
        DecoratorUtil_1.default.protocolResponse(protocol.MonUpdateResp)
    ], CommandCodes, "PPMonUpdateResp", void 0);
    __decorate([
        DecoratorUtil_1.default.retrievAble(CommandCodes.PPFishTideResp),
        DecoratorUtil_1.default.protocolResponseSignal(protocolSignals.FishTideRespSignal),
        DecoratorUtil_1.default.protocolResponse(protocol.FishTideResp)
    ], CommandCodes, "PPFishTideResp", void 0);
    __decorate([
        DecoratorUtil_1.default.retrievAble(CommandCodes.PPRankReq)
    ], CommandCodes, "PPRankReq", void 0);
    __decorate([
        DecoratorUtil_1.default.retrievAble(CommandCodes.PPRankResp),
        DecoratorUtil_1.default.protocolResponseSignal(protocolSignals.RankRespSignal),
        DecoratorUtil_1.default.protocolResponse(protocol.RankResp)
    ], CommandCodes, "PPRankResp", void 0);
    __decorate([
        DecoratorUtil_1.default.retrievAble(CommandCodes.PPHuntingSettingReq)
    ], CommandCodes, "PPHuntingSettingReq", void 0);
    __decorate([
        DecoratorUtil_1.default.retrievAble(CommandCodes.PPHuntingSettingResp),
        DecoratorUtil_1.default.protocolResponseSignal(protocolSignals.HuntingSettingRespSignal),
        DecoratorUtil_1.default.protocolResponse(protocol.HuntingSettingResp)
    ], CommandCodes, "PPHuntingSettingResp", void 0);
    return CommandCodes;
}());
exports.default = CommandCodes;
},{"../utils/DecoratorUtil":302,"./protocols/protocols":272,"./signals/signals":273}],272:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var protobuf = require("protobufjs");
var LoginReq = /** @class */ (function (_super) {
    __extends(LoginReq, _super);
    function LoginReq() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        protobuf.Field.d(1, "string", "required")
    ], LoginReq.prototype, "token", void 0);
    __decorate([
        protobuf.Field.d(2, "uint32", "optional")
    ], LoginReq.prototype, "gameId", void 0);
    LoginReq = __decorate([
        protobuf.Type.d('LoginReq')
    ], LoginReq);
    return LoginReq;
}(protobuf.Message));
exports.LoginReq = LoginReq;
var LoginResp = /** @class */ (function (_super) {
    __extends(LoginResp, _super);
    function LoginResp() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        protobuf.Field.d(1, "uint32", "required")
    ], LoginResp.prototype, "gameId", void 0);
    __decorate([
        protobuf.Field.d(2, "uint64", "required")
    ], LoginResp.prototype, "balance", void 0);
    __decorate([
        protobuf.Field.d(3, "uint32", "required")
    ], LoginResp.prototype, "type", void 0);
    __decorate([
        protobuf.Field.d(4, "uint32", "required")
    ], LoginResp.prototype, "gm", void 0);
    __decorate([
        protobuf.Field.d(5, "uint32", "required")
    ], LoginResp.prototype, "serverSec", void 0);
    __decorate([
        protobuf.Field.d(6, "uint32", "required")
    ], LoginResp.prototype, "rate", void 0);
    LoginResp = __decorate([
        protobuf.Type.d('LoginResp')
    ], LoginResp);
    return LoginResp;
}(protobuf.Message));
exports.LoginResp = LoginResp;
var ErrResp = /** @class */ (function (_super) {
    __extends(ErrResp, _super);
    function ErrResp() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        protobuf.Field.d(1, "uint32", "required")
    ], ErrResp.prototype, "cmd", void 0);
    __decorate([
        protobuf.Field.d(2, "uint32", "optional")
    ], ErrResp.prototype, "errCode", void 0);
    __decorate([
        protobuf.Field.d(3, "string", "optional")
    ], ErrResp.prototype, "errMsg", void 0);
    ErrResp = __decorate([
        protobuf.Type.d('ErrResp')
    ], ErrResp);
    return ErrResp;
}(protobuf.Message));
exports.ErrResp = ErrResp;
var BeatHeartReq = /** @class */ (function (_super) {
    __extends(BeatHeartReq, _super);
    function BeatHeartReq() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    BeatHeartReq = __decorate([
        protobuf.Type.d('BeatHeartReq')
    ], BeatHeartReq);
    return BeatHeartReq;
}(protobuf.Message));
exports.BeatHeartReq = BeatHeartReq;
var BeatHeartResp = /** @class */ (function (_super) {
    __extends(BeatHeartResp, _super);
    function BeatHeartResp() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        protobuf.Field.d(1, "uint32", "required")
    ], BeatHeartResp.prototype, "serverSec", void 0);
    BeatHeartResp = __decorate([
        protobuf.Type.d('BeatHeartResp')
    ], BeatHeartResp);
    return BeatHeartResp;
}(protobuf.Message));
exports.BeatHeartResp = BeatHeartResp;
var GmReq = /** @class */ (function (_super) {
    __extends(GmReq, _super);
    function GmReq() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        protobuf.Field.d(1, "string", "required")
    ], GmReq.prototype, "gmStr", void 0);
    GmReq = __decorate([
        protobuf.Type.d('GmReq')
    ], GmReq);
    return GmReq;
}(protobuf.Message));
exports.GmReq = GmReq;
var GmResp = /** @class */ (function (_super) {
    __extends(GmResp, _super);
    function GmResp() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GmResp = __decorate([
        protobuf.Type.d('GmResp')
    ], GmResp);
    return GmResp;
}(protobuf.Message));
exports.GmResp = GmResp;
var KickUserPush = /** @class */ (function (_super) {
    __extends(KickUserPush, _super);
    function KickUserPush() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        protobuf.Field.d(1, "uint32", "required")
    ], KickUserPush.prototype, "code", void 0);
    KickUserPush = __decorate([
        protobuf.Type.d('KickUserPush')
    ], KickUserPush);
    return KickUserPush;
}(protobuf.Message));
exports.KickUserPush = KickUserPush;
var GetBalanceReq = /** @class */ (function (_super) {
    __extends(GetBalanceReq, _super);
    function GetBalanceReq() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GetBalanceReq = __decorate([
        protobuf.Type.d('GetBalanceReq')
    ], GetBalanceReq);
    return GetBalanceReq;
}(protobuf.Message));
exports.GetBalanceReq = GetBalanceReq;
var GetBalanceResp = /** @class */ (function (_super) {
    __extends(GetBalanceResp, _super);
    function GetBalanceResp() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        protobuf.Field.d(1, "uint64", "required")
    ], GetBalanceResp.prototype, "balance", void 0);
    GetBalanceResp = __decorate([
        protobuf.Type.d('GetBalanceResp')
    ], GetBalanceResp);
    return GetBalanceResp;
}(protobuf.Message));
exports.GetBalanceResp = GetBalanceResp;
var BalancePush = /** @class */ (function (_super) {
    __extends(BalancePush, _super);
    function BalancePush() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        protobuf.Field.d(1, "int64", "required")
    ], BalancePush.prototype, "change", void 0);
    __decorate([
        protobuf.Field.d(2, "uint64", "required")
    ], BalancePush.prototype, "balance", void 0);
    BalancePush = __decorate([
        protobuf.Type.d('BalancePush')
    ], BalancePush);
    return BalancePush;
}(protobuf.Message));
exports.BalancePush = BalancePush;
var UserSettingReq = /** @class */ (function (_super) {
    __extends(UserSettingReq, _super);
    function UserSettingReq() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        protobuf.Field.d(1, "uint32", "required")
    ], UserSettingReq.prototype, "key", void 0);
    __decorate([
        protobuf.Field.d(2, "uint32", "required")
    ], UserSettingReq.prototype, "value", void 0);
    UserSettingReq = __decorate([
        protobuf.Type.d('UserSettingReq')
    ], UserSettingReq);
    return UserSettingReq;
}(protobuf.Message));
exports.UserSettingReq = UserSettingReq;
var ShareBalanceReq = /** @class */ (function (_super) {
    __extends(ShareBalanceReq, _super);
    function ShareBalanceReq() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ShareBalanceReq = __decorate([
        protobuf.Type.d('ShareBalanceReq')
    ], ShareBalanceReq);
    return ShareBalanceReq;
}(protobuf.Message));
exports.ShareBalanceReq = ShareBalanceReq;
var UserInfoReq = /** @class */ (function (_super) {
    __extends(UserInfoReq, _super);
    function UserInfoReq() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    UserInfoReq = __decorate([
        protobuf.Type.d('UserInfoReq')
    ], UserInfoReq);
    return UserInfoReq;
}(protobuf.Message));
exports.UserInfoReq = UserInfoReq;
var UserInfoResp = /** @class */ (function (_super) {
    __extends(UserInfoResp, _super);
    function UserInfoResp() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        protobuf.Field.d(1, "uint64", "required")
    ], UserInfoResp.prototype, "userId", void 0);
    __decorate([
        protobuf.Field.d(2, "string", "required")
    ], UserInfoResp.prototype, "userName", void 0);
    UserInfoResp = __decorate([
        protobuf.Type.d('UserInfoResp')
    ], UserInfoResp);
    return UserInfoResp;
}(protobuf.Message));
exports.UserInfoResp = UserInfoResp;
var SystemPush = /** @class */ (function (_super) {
    __extends(SystemPush, _super);
    function SystemPush() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        protobuf.Field.d(1, "uint32", "required")
    ], SystemPush.prototype, "type", void 0);
    __decorate([
        protobuf.Field.d(2, "uint32", "required")
    ], SystemPush.prototype, "priority", void 0);
    __decorate([
        protobuf.Field.d(3, "string", "optional")
    ], SystemPush.prototype, "msg", void 0);
    SystemPush = __decorate([
        protobuf.Type.d('SystemPush')
    ], SystemPush);
    return SystemPush;
}(protobuf.Message));
exports.SystemPush = SystemPush;
var AnnouncementPush = /** @class */ (function (_super) {
    __extends(AnnouncementPush, _super);
    function AnnouncementPush() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        protobuf.Field.d(1, "string", "required")
    ], AnnouncementPush.prototype, "module", void 0);
    __decorate([
        protobuf.Field.d(2, "msginfo", "required")
    ], AnnouncementPush.prototype, "msgInfo", void 0);
    AnnouncementPush = __decorate([
        protobuf.Type.d('AnnouncementPush')
    ], AnnouncementPush);
    return AnnouncementPush;
}(protobuf.Message));
exports.AnnouncementPush = AnnouncementPush;
var HuntingInfoReq = /** @class */ (function (_super) {
    __extends(HuntingInfoReq, _super);
    function HuntingInfoReq() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    HuntingInfoReq = __decorate([
        protobuf.Type.d('HuntingInfoReq')
    ], HuntingInfoReq);
    return HuntingInfoReq;
}(protobuf.Message));
exports.HuntingInfoReq = HuntingInfoReq;
var HuntingInfoResp = /** @class */ (function (_super) {
    __extends(HuntingInfoResp, _super);
    function HuntingInfoResp() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        protobuf.Field.d(1, "uint32", "required")
    ], HuntingInfoResp.prototype, "lv", void 0);
    __decorate([
        protobuf.Field.d(2, "uint32", "required")
    ], HuntingInfoResp.prototype, "exp", void 0);
    HuntingInfoResp = __decorate([
        protobuf.Type.d('HuntingInfoResp')
    ], HuntingInfoResp);
    return HuntingInfoResp;
}(protobuf.Message));
exports.HuntingInfoResp = HuntingInfoResp;
var HuntingEnterRoomReq = /** @class */ (function (_super) {
    __extends(HuntingEnterRoomReq, _super);
    function HuntingEnterRoomReq() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        protobuf.Field.d(1, "uint32", "required")
    ], HuntingEnterRoomReq.prototype, "roomTypeId", void 0);
    HuntingEnterRoomReq = __decorate([
        protobuf.Type.d('HuntingEnterRoomReq')
    ], HuntingEnterRoomReq);
    return HuntingEnterRoomReq;
}(protobuf.Message));
exports.HuntingEnterRoomReq = HuntingEnterRoomReq;
var HuntingEnterRoomOkReq = /** @class */ (function (_super) {
    __extends(HuntingEnterRoomOkReq, _super);
    function HuntingEnterRoomOkReq() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    HuntingEnterRoomOkReq = __decorate([
        protobuf.Type.d('HuntingEnterRoomOkReq')
    ], HuntingEnterRoomOkReq);
    return HuntingEnterRoomOkReq;
}(protobuf.Message));
exports.HuntingEnterRoomOkReq = HuntingEnterRoomOkReq;
var HuntingEnterRoomResp = /** @class */ (function (_super) {
    __extends(HuntingEnterRoomResp, _super);
    function HuntingEnterRoomResp() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        protobuf.Field.d(1, "playerInfo", "required")
    ], HuntingEnterRoomResp.prototype, "playerInfo", void 0);
    HuntingEnterRoomResp = __decorate([
        protobuf.Type.d('HuntingEnterRoomResp')
    ], HuntingEnterRoomResp);
    return HuntingEnterRoomResp;
}(protobuf.Message));
exports.HuntingEnterRoomResp = HuntingEnterRoomResp;
var HuntingExitRoomReq = /** @class */ (function (_super) {
    __extends(HuntingExitRoomReq, _super);
    function HuntingExitRoomReq() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    HuntingExitRoomReq = __decorate([
        protobuf.Type.d('HuntingExitRoomReq')
    ], HuntingExitRoomReq);
    return HuntingExitRoomReq;
}(protobuf.Message));
exports.HuntingExitRoomReq = HuntingExitRoomReq;
var HuntingExitRoomResp = /** @class */ (function (_super) {
    __extends(HuntingExitRoomResp, _super);
    function HuntingExitRoomResp() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        protobuf.Field.d(1, "uint64", "required")
    ], HuntingExitRoomResp.prototype, "userId", void 0);
    HuntingExitRoomResp = __decorate([
        protobuf.Type.d('HuntingExitRoomResp')
    ], HuntingExitRoomResp);
    return HuntingExitRoomResp;
}(protobuf.Message));
exports.HuntingExitRoomResp = HuntingExitRoomResp;
var HuntingRoomInfoResp = /** @class */ (function (_super) {
    __extends(HuntingRoomInfoResp, _super);
    function HuntingRoomInfoResp() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        protobuf.Field.d(1, "playerInfo", "repeated")
    ], HuntingRoomInfoResp.prototype, "playerList", void 0);
    __decorate([
        protobuf.Field.d(2, "monInfo", "repeated")
    ], HuntingRoomInfoResp.prototype, "monList", void 0);
    __decorate([
        protobuf.Field.d(3, "shellInfo", "repeated")
    ], HuntingRoomInfoResp.prototype, "shellList", void 0);
    HuntingRoomInfoResp = __decorate([
        protobuf.Type.d('HuntingRoomInfoResp')
    ], HuntingRoomInfoResp);
    return HuntingRoomInfoResp;
}(protobuf.Message));
exports.HuntingRoomInfoResp = HuntingRoomInfoResp;
var MonRefreshResp = /** @class */ (function (_super) {
    __extends(MonRefreshResp, _super);
    function MonRefreshResp() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        protobuf.Field.d(1, "monInfo", "repeated")
    ], MonRefreshResp.prototype, "monList", void 0);
    MonRefreshResp = __decorate([
        protobuf.Type.d('MonRefreshResp')
    ], MonRefreshResp);
    return MonRefreshResp;
}(protobuf.Message));
exports.MonRefreshResp = MonRefreshResp;
var ChangeBatteryLvReq = /** @class */ (function (_super) {
    __extends(ChangeBatteryLvReq, _super);
    function ChangeBatteryLvReq() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        protobuf.Field.d(1, "uint32", "required")
    ], ChangeBatteryLvReq.prototype, "batteryLv", void 0);
    ChangeBatteryLvReq = __decorate([
        protobuf.Type.d('ChangeBatteryLvReq')
    ], ChangeBatteryLvReq);
    return ChangeBatteryLvReq;
}(protobuf.Message));
exports.ChangeBatteryLvReq = ChangeBatteryLvReq;
var UpdatePlayerResp = /** @class */ (function (_super) {
    __extends(UpdatePlayerResp, _super);
    function UpdatePlayerResp() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        protobuf.Field.d(1, "uint64", "required")
    ], UpdatePlayerResp.prototype, "userId", void 0);
    __decorate([
        protobuf.Field.d(2, "uint32", "required")
    ], UpdatePlayerResp.prototype, "key", void 0);
    __decorate([
        protobuf.Field.d(3, "uint64", "required")
    ], UpdatePlayerResp.prototype, "value", void 0);
    UpdatePlayerResp = __decorate([
        protobuf.Type.d('UpdatePlayerResp')
    ], UpdatePlayerResp);
    return UpdatePlayerResp;
}(protobuf.Message));
exports.UpdatePlayerResp = UpdatePlayerResp;
var FireReq = /** @class */ (function (_super) {
    __extends(FireReq, _super);
    function FireReq() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        protobuf.Field.d(1, "uint32", "required")
    ], FireReq.prototype, "monId", void 0);
    __decorate([
        protobuf.Field.d(2, "int32", "required")
    ], FireReq.prototype, "x", void 0);
    __decorate([
        protobuf.Field.d(3, "int32", "required")
    ], FireReq.prototype, "y", void 0);
    FireReq = __decorate([
        protobuf.Type.d('FireReq')
    ], FireReq);
    return FireReq;
}(protobuf.Message));
exports.FireReq = FireReq;
var FireResp = /** @class */ (function (_super) {
    __extends(FireResp, _super);
    function FireResp() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        protobuf.Field.d(1, "shellInfo", "required")
    ], FireResp.prototype, "shellInfo", void 0);
    FireResp = __decorate([
        protobuf.Type.d('FireResp')
    ], FireResp);
    return FireResp;
}(protobuf.Message));
exports.FireResp = FireResp;
var ShellReq = /** @class */ (function (_super) {
    __extends(ShellReq, _super);
    function ShellReq() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        protobuf.Field.d(1, "uint32", "required")
    ], ShellReq.prototype, "shellId", void 0);
    __decorate([
        protobuf.Field.d(2, "uint32", "required")
    ], ShellReq.prototype, "monId", void 0);
    __decorate([
        protobuf.Field.d(3, "uint32", "required")
    ], ShellReq.prototype, "monTypeId", void 0);
    __decorate([
        protobuf.Field.d(4, "uint32", "repeated")
    ], ShellReq.prototype, "expandList", void 0);
    ShellReq = __decorate([
        protobuf.Type.d('ShellReq')
    ], ShellReq);
    return ShellReq;
}(protobuf.Message));
exports.ShellReq = ShellReq;
var ShellResp = /** @class */ (function (_super) {
    __extends(ShellResp, _super);
    function ShellResp() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        protobuf.Field.d(1, "uint32", "required")
    ], ShellResp.prototype, "shellId", void 0);
    __decorate([
        protobuf.Field.d(2, "uint32", "required")
    ], ShellResp.prototype, "cost", void 0);
    __decorate([
        protobuf.Field.d(3, "uint32", "required")
    ], ShellResp.prototype, "monId", void 0);
    __decorate([
        protobuf.Field.d(4, "uint32", "repeated")
    ], ShellResp.prototype, "expandList", void 0);
    __decorate([
        protobuf.Field.d(5, "uint32", "required")
    ], ShellResp.prototype, "eventType", void 0);
    __decorate([
        protobuf.Field.d(6, "deadMon", "repeated")
    ], ShellResp.prototype, "deadList", void 0);
    __decorate([
        protobuf.Field.d(7, "uint32", "required")
    ], ShellResp.prototype, "reward", void 0);
    ShellResp = __decorate([
        protobuf.Type.d('ShellResp')
    ], ShellResp);
    return ShellResp;
}(protobuf.Message));
exports.ShellResp = ShellResp;
var MonUpdateResp = /** @class */ (function (_super) {
    __extends(MonUpdateResp, _super);
    function MonUpdateResp() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        protobuf.Field.d(1, "monInfo", "repeated")
    ], MonUpdateResp.prototype, "monList", void 0);
    MonUpdateResp = __decorate([
        protobuf.Type.d('MonUpdateResp')
    ], MonUpdateResp);
    return MonUpdateResp;
}(protobuf.Message));
exports.MonUpdateResp = MonUpdateResp;
var FishTideResp = /** @class */ (function (_super) {
    __extends(FishTideResp, _super);
    function FishTideResp() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FishTideResp = __decorate([
        protobuf.Type.d('FishTideResp')
    ], FishTideResp);
    return FishTideResp;
}(protobuf.Message));
exports.FishTideResp = FishTideResp;
var RankReq = /** @class */ (function (_super) {
    __extends(RankReq, _super);
    function RankReq() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        protobuf.Field.d(1, "uint32", "required")
    ], RankReq.prototype, "type", void 0);
    RankReq = __decorate([
        protobuf.Type.d('RankReq')
    ], RankReq);
    return RankReq;
}(protobuf.Message));
exports.RankReq = RankReq;
var RankResp = /** @class */ (function (_super) {
    __extends(RankResp, _super);
    function RankResp() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        protobuf.Field.d(1, "string", "required")
    ], RankResp.prototype, "myName", void 0);
    __decorate([
        protobuf.Field.d(2, "uint64", "required")
    ], RankResp.prototype, "myValue", void 0);
    __decorate([
        protobuf.Field.d(3, "userRank", "repeated")
    ], RankResp.prototype, "list", void 0);
    RankResp = __decorate([
        protobuf.Type.d('RankResp')
    ], RankResp);
    return RankResp;
}(protobuf.Message));
exports.RankResp = RankResp;
var HuntingSettingReq = /** @class */ (function (_super) {
    __extends(HuntingSettingReq, _super);
    function HuntingSettingReq() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        protobuf.Field.d(1, "uint32", "required")
    ], HuntingSettingReq.prototype, "key", void 0);
    __decorate([
        protobuf.Field.d(2, "string", "required")
    ], HuntingSettingReq.prototype, "value", void 0);
    HuntingSettingReq = __decorate([
        protobuf.Type.d('HuntingSettingReq')
    ], HuntingSettingReq);
    return HuntingSettingReq;
}(protobuf.Message));
exports.HuntingSettingReq = HuntingSettingReq;
var HuntingSettingResp = /** @class */ (function (_super) {
    __extends(HuntingSettingResp, _super);
    function HuntingSettingResp() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        protobuf.Field.d(1, "uint32", "required")
    ], HuntingSettingResp.prototype, "key", void 0);
    __decorate([
        protobuf.Field.d(2, "string", "required")
    ], HuntingSettingResp.prototype, "value", void 0);
    HuntingSettingResp = __decorate([
        protobuf.Type.d('HuntingSettingResp')
    ], HuntingSettingResp);
    return HuntingSettingResp;
}(protobuf.Message));
exports.HuntingSettingResp = HuntingSettingResp;
var Msginfo = /** @class */ (function (_super) {
    __extends(Msginfo, _super);
    function Msginfo() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        protobuf.Field.d(1, "index", "repeated")
    ], Msginfo.prototype, "indexList", void 0);
    __decorate([
        protobuf.Field.d(2, "playname", "repeated")
    ], Msginfo.prototype, "playerNameList", void 0);
    __decorate([
        protobuf.Field.d(3, "uint64", "repeated")
    ], Msginfo.prototype, "money", void 0);
    __decorate([
        protobuf.Field.d(4, "uint64", "repeated")
    ], Msginfo.prototype, "useintList", void 0);
    __decorate([
        protobuf.Field.d(5, "string", "repeated")
    ], Msginfo.prototype, "usestrList", void 0);
    __decorate([
        protobuf.Field.d(6, "item", "repeated")
    ], Msginfo.prototype, "itemlist", void 0);
    Msginfo = __decorate([
        protobuf.Type.d('msginfo')
    ], Msginfo);
    return Msginfo;
}(protobuf.Message));
exports.Msginfo = Msginfo;
var Index = /** @class */ (function (_super) {
    __extends(Index, _super);
    function Index() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        protobuf.Field.d(1, "uint32", "optional")
    ], Index.prototype, "indexId", void 0);
    __decorate([
        protobuf.Field.d(2, "uint32", "optional")
    ], Index.prototype, "indexV", void 0);
    Index = __decorate([
        protobuf.Type.d('index')
    ], Index);
    return Index;
}(protobuf.Message));
exports.Index = Index;
var Playname = /** @class */ (function (_super) {
    __extends(Playname, _super);
    function Playname() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        protobuf.Field.d(1, "uint64", "optional")
    ], Playname.prototype, "playerId", void 0);
    __decorate([
        protobuf.Field.d(2, "string", "optional")
    ], Playname.prototype, "playerName", void 0);
    Playname = __decorate([
        protobuf.Type.d('playname')
    ], Playname);
    return Playname;
}(protobuf.Message));
exports.Playname = Playname;
var Item = /** @class */ (function (_super) {
    __extends(Item, _super);
    function Item() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        protobuf.Field.d(1, "uint32", "optional")
    ], Item.prototype, "itemId", void 0);
    __decorate([
        protobuf.Field.d(2, "uint32", "optional")
    ], Item.prototype, "itemNum", void 0);
    Item = __decorate([
        protobuf.Type.d('item')
    ], Item);
    return Item;
}(protobuf.Message));
exports.Item = Item;
var PlayerInfo = /** @class */ (function (_super) {
    __extends(PlayerInfo, _super);
    function PlayerInfo() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        protobuf.Field.d(1, "uint64", "required")
    ], PlayerInfo.prototype, "userId", void 0);
    __decorate([
        protobuf.Field.d(2, "uint64", "required")
    ], PlayerInfo.prototype, "balance", void 0);
    __decorate([
        protobuf.Field.d(3, "string", "required")
    ], PlayerInfo.prototype, "name", void 0);
    __decorate([
        protobuf.Field.d(4, "uint32", "required")
    ], PlayerInfo.prototype, "pos", void 0);
    __decorate([
        protobuf.Field.d(5, "uint32", "required")
    ], PlayerInfo.prototype, "batteryLv", void 0);
    PlayerInfo = __decorate([
        protobuf.Type.d('playerInfo')
    ], PlayerInfo);
    return PlayerInfo;
}(protobuf.Message));
exports.PlayerInfo = PlayerInfo;
var MonInfo = /** @class */ (function (_super) {
    __extends(MonInfo, _super);
    function MonInfo() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        protobuf.Field.d(1, "uint32", "required")
    ], MonInfo.prototype, "monId", void 0);
    __decorate([
        protobuf.Field.d(2, "uint32", "required")
    ], MonInfo.prototype, "monTypeId", void 0);
    __decorate([
        protobuf.Field.d(3, "uint64", "required")
    ], MonInfo.prototype, "createTime", void 0);
    __decorate([
        protobuf.Field.d(4, "frozen", "repeated")
    ], MonInfo.prototype, "frozenList", void 0);
    __decorate([
        protobuf.Field.d(5, "uint32", "required")
    ], MonInfo.prototype, "pathId", void 0);
    __decorate([
        protobuf.Field.d(6, "int32", "required")
    ], MonInfo.prototype, "offsetX", void 0);
    __decorate([
        protobuf.Field.d(7, "int32", "required")
    ], MonInfo.prototype, "offsetY", void 0);
    MonInfo = __decorate([
        protobuf.Type.d('monInfo')
    ], MonInfo);
    return MonInfo;
}(protobuf.Message));
exports.MonInfo = MonInfo;
var Frozen = /** @class */ (function (_super) {
    __extends(Frozen, _super);
    function Frozen() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        protobuf.Field.d(1, "uint64", "required")
    ], Frozen.prototype, "startTime", void 0);
    __decorate([
        protobuf.Field.d(2, "uint32", "required")
    ], Frozen.prototype, "time", void 0);
    Frozen = __decorate([
        protobuf.Type.d('frozen')
    ], Frozen);
    return Frozen;
}(protobuf.Message));
exports.Frozen = Frozen;
var ShellInfo = /** @class */ (function (_super) {
    __extends(ShellInfo, _super);
    function ShellInfo() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        protobuf.Field.d(1, "uint32", "required")
    ], ShellInfo.prototype, "shellId", void 0);
    __decorate([
        protobuf.Field.d(2, "uint64", "required")
    ], ShellInfo.prototype, "userId", void 0);
    __decorate([
        protobuf.Field.d(3, "uint32", "required")
    ], ShellInfo.prototype, "monId", void 0);
    __decorate([
        protobuf.Field.d(4, "int32", "required")
    ], ShellInfo.prototype, "x", void 0);
    __decorate([
        protobuf.Field.d(5, "int32", "required")
    ], ShellInfo.prototype, "y", void 0);
    __decorate([
        protobuf.Field.d(6, "uint64", "required")
    ], ShellInfo.prototype, "createTime", void 0);
    ShellInfo = __decorate([
        protobuf.Type.d('shellInfo')
    ], ShellInfo);
    return ShellInfo;
}(protobuf.Message));
exports.ShellInfo = ShellInfo;
var DeadMon = /** @class */ (function (_super) {
    __extends(DeadMon, _super);
    function DeadMon() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        protobuf.Field.d(1, "uint32", "required")
    ], DeadMon.prototype, "monId", void 0);
    __decorate([
        protobuf.Field.d(2, "float", "required")
    ], DeadMon.prototype, "rate", void 0);
    DeadMon = __decorate([
        protobuf.Type.d('deadMon')
    ], DeadMon);
    return DeadMon;
}(protobuf.Message));
exports.DeadMon = DeadMon;
var UserRank = /** @class */ (function (_super) {
    __extends(UserRank, _super);
    function UserRank() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    __decorate([
        protobuf.Field.d(1, "uint32", "required")
    ], UserRank.prototype, "rank", void 0);
    __decorate([
        protobuf.Field.d(2, "uint64", "required")
    ], UserRank.prototype, "userId", void 0);
    __decorate([
        protobuf.Field.d(3, "uint32", "required")
    ], UserRank.prototype, "lv", void 0);
    __decorate([
        protobuf.Field.d(4, "string", "required")
    ], UserRank.prototype, "name", void 0);
    __decorate([
        protobuf.Field.d(5, "uint64", "required")
    ], UserRank.prototype, "value", void 0);
    UserRank = __decorate([
        protobuf.Type.d('userRank')
    ], UserRank);
    return UserRank;
}(protobuf.Message));
exports.UserRank = UserRank;
},{"protobufjs":11}],273:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var LoginRespSignal = /** @class */ (function (_super) {
    __extends(LoginRespSignal, _super);
    function LoginRespSignal() {
        return _super.call(this) || this;
    }
    return LoginRespSignal;
}(riggerIOC.Signal));
exports.LoginRespSignal = LoginRespSignal;
var ErrRespSignal = /** @class */ (function (_super) {
    __extends(ErrRespSignal, _super);
    function ErrRespSignal() {
        return _super.call(this) || this;
    }
    return ErrRespSignal;
}(riggerIOC.Signal));
exports.ErrRespSignal = ErrRespSignal;
var BeatHeartRespSignal = /** @class */ (function (_super) {
    __extends(BeatHeartRespSignal, _super);
    function BeatHeartRespSignal() {
        return _super.call(this) || this;
    }
    return BeatHeartRespSignal;
}(riggerIOC.Signal));
exports.BeatHeartRespSignal = BeatHeartRespSignal;
var GmRespSignal = /** @class */ (function (_super) {
    __extends(GmRespSignal, _super);
    function GmRespSignal() {
        return _super.call(this) || this;
    }
    return GmRespSignal;
}(riggerIOC.Signal));
exports.GmRespSignal = GmRespSignal;
var KickUserPushSignal = /** @class */ (function (_super) {
    __extends(KickUserPushSignal, _super);
    function KickUserPushSignal() {
        return _super.call(this) || this;
    }
    return KickUserPushSignal;
}(riggerIOC.Signal));
exports.KickUserPushSignal = KickUserPushSignal;
var GetBalanceRespSignal = /** @class */ (function (_super) {
    __extends(GetBalanceRespSignal, _super);
    function GetBalanceRespSignal() {
        return _super.call(this) || this;
    }
    return GetBalanceRespSignal;
}(riggerIOC.Signal));
exports.GetBalanceRespSignal = GetBalanceRespSignal;
var BalancePushSignal = /** @class */ (function (_super) {
    __extends(BalancePushSignal, _super);
    function BalancePushSignal() {
        return _super.call(this) || this;
    }
    return BalancePushSignal;
}(riggerIOC.Signal));
exports.BalancePushSignal = BalancePushSignal;
var UserInfoRespSignal = /** @class */ (function (_super) {
    __extends(UserInfoRespSignal, _super);
    function UserInfoRespSignal() {
        return _super.call(this) || this;
    }
    return UserInfoRespSignal;
}(riggerIOC.Signal));
exports.UserInfoRespSignal = UserInfoRespSignal;
var SystemPushSignal = /** @class */ (function (_super) {
    __extends(SystemPushSignal, _super);
    function SystemPushSignal() {
        return _super.call(this) || this;
    }
    return SystemPushSignal;
}(riggerIOC.Signal));
exports.SystemPushSignal = SystemPushSignal;
var AnnouncementPushSignal = /** @class */ (function (_super) {
    __extends(AnnouncementPushSignal, _super);
    function AnnouncementPushSignal() {
        return _super.call(this) || this;
    }
    return AnnouncementPushSignal;
}(riggerIOC.Signal));
exports.AnnouncementPushSignal = AnnouncementPushSignal;
var HuntingInfoRespSignal = /** @class */ (function (_super) {
    __extends(HuntingInfoRespSignal, _super);
    function HuntingInfoRespSignal() {
        return _super.call(this) || this;
    }
    return HuntingInfoRespSignal;
}(riggerIOC.Signal));
exports.HuntingInfoRespSignal = HuntingInfoRespSignal;
var HuntingEnterRoomRespSignal = /** @class */ (function (_super) {
    __extends(HuntingEnterRoomRespSignal, _super);
    function HuntingEnterRoomRespSignal() {
        return _super.call(this) || this;
    }
    return HuntingEnterRoomRespSignal;
}(riggerIOC.Signal));
exports.HuntingEnterRoomRespSignal = HuntingEnterRoomRespSignal;
var HuntingExitRoomRespSignal = /** @class */ (function (_super) {
    __extends(HuntingExitRoomRespSignal, _super);
    function HuntingExitRoomRespSignal() {
        return _super.call(this) || this;
    }
    return HuntingExitRoomRespSignal;
}(riggerIOC.Signal));
exports.HuntingExitRoomRespSignal = HuntingExitRoomRespSignal;
var HuntingRoomInfoRespSignal = /** @class */ (function (_super) {
    __extends(HuntingRoomInfoRespSignal, _super);
    function HuntingRoomInfoRespSignal() {
        return _super.call(this) || this;
    }
    return HuntingRoomInfoRespSignal;
}(riggerIOC.Signal));
exports.HuntingRoomInfoRespSignal = HuntingRoomInfoRespSignal;
var MonRefreshRespSignal = /** @class */ (function (_super) {
    __extends(MonRefreshRespSignal, _super);
    function MonRefreshRespSignal() {
        return _super.call(this) || this;
    }
    return MonRefreshRespSignal;
}(riggerIOC.Signal));
exports.MonRefreshRespSignal = MonRefreshRespSignal;
var UpdatePlayerRespSignal = /** @class */ (function (_super) {
    __extends(UpdatePlayerRespSignal, _super);
    function UpdatePlayerRespSignal() {
        return _super.call(this) || this;
    }
    return UpdatePlayerRespSignal;
}(riggerIOC.Signal));
exports.UpdatePlayerRespSignal = UpdatePlayerRespSignal;
var FireRespSignal = /** @class */ (function (_super) {
    __extends(FireRespSignal, _super);
    function FireRespSignal() {
        return _super.call(this) || this;
    }
    return FireRespSignal;
}(riggerIOC.Signal));
exports.FireRespSignal = FireRespSignal;
var ShellRespSignal = /** @class */ (function (_super) {
    __extends(ShellRespSignal, _super);
    function ShellRespSignal() {
        return _super.call(this) || this;
    }
    return ShellRespSignal;
}(riggerIOC.Signal));
exports.ShellRespSignal = ShellRespSignal;
var MonUpdateRespSignal = /** @class */ (function (_super) {
    __extends(MonUpdateRespSignal, _super);
    function MonUpdateRespSignal() {
        return _super.call(this) || this;
    }
    return MonUpdateRespSignal;
}(riggerIOC.Signal));
exports.MonUpdateRespSignal = MonUpdateRespSignal;
var FishTideRespSignal = /** @class */ (function (_super) {
    __extends(FishTideRespSignal, _super);
    function FishTideRespSignal() {
        return _super.call(this) || this;
    }
    return FishTideRespSignal;
}(riggerIOC.Signal));
exports.FishTideRespSignal = FishTideRespSignal;
var RankRespSignal = /** @class */ (function (_super) {
    __extends(RankRespSignal, _super);
    function RankRespSignal() {
        return _super.call(this) || this;
    }
    return RankRespSignal;
}(riggerIOC.Signal));
exports.RankRespSignal = RankRespSignal;
var HuntingSettingRespSignal = /** @class */ (function (_super) {
    __extends(HuntingSettingRespSignal, _super);
    function HuntingSettingRespSignal() {
        return _super.call(this) || this;
    }
    return HuntingSettingRespSignal;
}(riggerIOC.Signal));
exports.HuntingSettingRespSignal = HuntingSettingRespSignal;
},{}],274:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var FUIAimLineView_1 = require("../../../fui/roomScene/FUIAimLineView");
var BatteryUtils = /** @class */ (function () {
    function BatteryUtils() {
    }
    BatteryUtils.getAimLineView = function () {
        return rigger.service.PoolService.instance.getItemByClass(BatteryUtils.aimLineSignal, BatteryUtils.createAimLineView);
    };
    BatteryUtils.recoverAimLineView = function (view) {
        view.m_mask.width = 0;
        view.removeFromParent();
        rigger.service.PoolService.instance.recover(BatteryUtils.aimLineSignal, view);
    };
    BatteryUtils.createAimLineView = function () {
        var aimLineView = FUIAimLineView_1.default.createInstance();
        aimLineView.touchable = false;
        return aimLineView;
    };
    BatteryUtils.aimLineSignal = 'AIM_LINE_SIGNAL';
    return BatteryUtils;
}());
exports.default = BatteryUtils;
},{"../../../fui/roomScene/FUIAimLineView":115}],275:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var BrizecurveList_1 = require("../../data/tpls/BrizecurveList");
/**
 * n阶贝塞尔曲线
 */
var Brizecurve = /** @class */ (function () {
    function Brizecurve() {
        this.pathEffect = [];
        this.points = [];
    }
    /**
     * 根据路径id,初始化路径信息
     * @param pathId
     */
    Brizecurve.prototype.init = function (pathId) {
        var brizecurveInfo = BrizecurveList_1.default.getData(pathId);
        var points = brizecurveInfo.points;
        if (points) {
            for (var j = 0; j < points.length; j++) {
                this.points.push(new Laya.Point(points[j][0], points[j][1]));
            }
        }
        else {
            //兼容旧配置(固定三阶贝塞尔)
            this.pointA = new Laya.Point(brizecurveInfo.pointA[0], brizecurveInfo.pointA[1]);
            this.pointB = new Laya.Point(brizecurveInfo.pointB[0], brizecurveInfo.pointB[1]);
            this.pointC = new Laya.Point(brizecurveInfo.pointC[0], brizecurveInfo.pointC[1]);
            this.pointD = new Laya.Point(brizecurveInfo.pointD[0], brizecurveInfo.pointD[1]);
            this.points.push(this.pointA, this.pointB, this.pointC, this.pointD);
        }
        this.totalTime = brizecurveInfo.totalTime;
        for (var i = 0; i < brizecurveInfo.percent.length; i++) {
            var nPercent = brizecurveInfo.percent[i];
            var nTime = brizecurveInfo.times[i];
            var nEffectLabel = brizecurveInfo.effectLabel[i];
            this.pathEffect.push({ percent: nPercent, time: nTime, effectLabel: nEffectLabel });
        }
        this.coefficient = this.brizeCoefficient(this.points.length);
    };
    /**
     * 根据百分比t获取对应坐标点(n阶贝塞尔)
     */
    Brizecurve.prototype.getPointByT = function (t) {
        var points = this.points;
        var a = this.coefficient[0];
        var b = this.coefficient[1];
        var c = this.coefficient[2];
        var x = 0;
        var y = 0;
        for (var i = 0; i < a.length; i++) {
            x += a[i] * points[i].x * Math.pow(1 - t, b[i]) * Math.pow(t, c[i]);
            y += a[i] * points[i].y * Math.pow(1 - t, b[i]) * Math.pow(t, c[i]);
        }
        return new Laya.Point(x, y);
    };
    /**
     * n阶贝赛尔曲线系数
     * @param n
     */
    Brizecurve.prototype.brizeCoefficient = function (n) {
        var a = this.pascalTriangle(n);
        var b = [];
        var c = [];
        for (var i = 0; i < n; i++) {
            b.push(n - 1 - i);
            c.push(i);
        }
        return [a, b, c];
    };
    /**
     * 杨辉三角
     * @param n
     */
    Brizecurve.prototype.pascalTriangle = function (n) {
        if (n == 1)
            return [1];
        var arr = [];
        arr.push(1);
        var lastPascalTriangle = this.pascalTriangle(n - 1);
        for (var i = n - 1; i > 1; i--) {
            var Ai = lastPascalTriangle[i - 1 - 1] + lastPascalTriangle[i - 1];
            arr.push(Ai);
        }
        arr.push(1);
        return arr;
    };
    return Brizecurve;
}());
exports.default = Brizecurve;
},{"../../data/tpls/BrizecurveList":57}],276:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 关于贝塞尔曲线的工具类
 */
var EaseFun_1 = require("./EaseFun/EaseFun");
var BrizecurveUtils = /** @class */ (function () {
    function BrizecurveUtils() {
    }
    /**
     * 根据当前时间获取对应的路程百分比t
     * @param pathEffect
     * @param currentTime
     */
    BrizecurveUtils.getPercentByTime = function (pathEffect, currentTime) {
        var oldStateTime = 0;
        var oldStatePercent = 0;
        for (var i = 0; i < pathEffect.length; i++) {
            if (currentTime > oldStateTime + pathEffect[i].time) { // 阶段 i 已经完成
                oldStatePercent += pathEffect[i].percent;
                oldStateTime += pathEffect[i].time;
                if (i < pathEffect.length - 1) {
                    continue;
                }
                else {
                    return 1;
                }
            }
            var t = EaseFun_1.default[pathEffect[i].effectLabel](currentTime - oldStateTime, 0, 1, pathEffect[i].time) * pathEffect[i].percent + oldStatePercent;
            t = Number(t.toFixed(3));
            return t;
        }
    };
    return BrizecurveUtils;
}());
exports.default = BrizecurveUtils;
},{"./EaseFun/EaseFun":277}],277:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var EaseFun = /** @class */ (function () {
    function EaseFun() {
    }
    /**
     * 匀速
     * @param t
     * @param b
     * @param c
     * @param d
     */
    EaseFun.linearNone = function (t, b, c, d) {
        return c * (t / d) + b;
    };
    /**
         * 方法以零速率开始运动，然后在执行时加快运动速度。
         * Cubic 缓动方程的运动加速大于 Quad 缓动方程。
         * @param	t 指定当前时间，介于 0 和持续时间之间（包括二者）。
         * @param	b 指定动画属性的初始值。
         * @param	c 指定动画属性的更改总计。
         * @param	d 指定运动的持续时间。
         * @return 指定时间的插补属性的值。
         */
    EaseFun.cubicIn = function (t, b, c, d) {
        return c * (t /= d) * t * t + b;
    };
    /**
     * 开始运动时速率为零，先对运动进行加速，再减速直到速率为零。
     * Cubic 缓动方程的运动加速大于 Quad 缓动方程。
     * @param	t 指定当前时间，介于 0 和持续时间之间（包括二者）。
     * @param	b 指定动画属性的初始值。
     * @param	c 指定动画属性的更改总计。
     * @param	d 指定运动的持续时间。
     * @return 指定时间的插补属性的值。
     */
    EaseFun.cubicInOut = function (t, b, c, d) {
        if ((t /= d * 0.5) < 1)
            return c * 0.5 * t * t * t + b;
        return c * 0.5 * ((t -= 2) * t * t + 2) + b;
    };
    /**
     * 以较快速度开始运动，然后在执行时减慢运动速度，直至速率为零。
     * Cubic 缓动方程的运动加速大于 Quad 缓动方程。
     * @param	t 指定当前时间，介于 0 和持续时间之间（包括二者）。
     * @param	b 指定动画属性的初始值。
     * @param	c 指定动画属性的更改总计。
     * @param	d 指定运动的持续时间。
     * @return 指定时间的插补属性的值。
     */
    EaseFun.cubicOut = function (t, b, c, d) {
        return c * ((t = t / d - 1) * t * t + 1) + b;
    };
    /**
         * 以零速率开始运动，然后在执行时加快运动速度。
         * Quint 缓动方程的运动加速大于 Quart 缓动方程。
         * @param	t 指定当前时间，介于 0 和持续时间之间（包括二者）。
         * @param	b 指定动画属性的初始值。
         * @param	c 指定动画属性的更改总计。
         * @param	d 指定运动的持续时间。
         * @return 指定时间的插补属性的值。
         */
    EaseFun.quintIn = function (t, b, c, d) {
        return c * (t /= d) * t * t * t * t + b;
    };
    /**
     * 开始运动时速率为零，先对运动进行加速，再减速直到速率为零。
     * Quint 缓动方程的运动加速大于 Quart 缓动方程。
     * @param	t 指定当前时间，介于 0 和持续时间之间（包括二者）。
     * @param	b 指定动画属性的初始值。
     * @param	c 指定动画属性的更改总计。
     * @param	d 指定运动的持续时间。
     * @return 指定时间的插补属性的值。
     */
    EaseFun.quintInOut = function (t, b, c, d) {
        if ((t /= d * 0.5) < 1)
            return c * 0.5 * t * t * t * t * t + b;
        return c * 0.5 * ((t -= 2) * t * t * t * t + 2) + b;
    };
    /**
     * 以较快速度开始运动，然后在执行时减慢运动速度，直至速率为零。
     * Quint 缓动方程的运动加速大于 Quart 缓动方程。
     * @param	t 指定当前时间，介于 0 和持续时间之间（包括二者）。
     * @param	b 指定动画属性的初始值。
     * @param	c 指定动画属性的更改总计。
     * @param	d 指定运动的持续时间。
     * @return 指定时间的插补属性的值。
     */
    EaseFun.quintOut = function (t, b, c, d) {
        return c * ((t = t / d - 1) * t * t * t * t + 1) + b;
    };
    return EaseFun;
}());
exports.default = EaseFun;
},{}],278:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Ibullet_1 = require("../interface/Ibullet");
var AbstractBullet = /** @class */ (function (_super) {
    __extends(AbstractBullet, _super);
    function AbstractBullet() {
        var _this = _super.call(this) || this;
        /**发射时的点击点 */
        _this.fireClickPoint = new Laya.Point();
        /**出生点 */
        _this.startPoint = new Laya.Point();
        _this.boxColider = null;
        _this.rigidBody = null;
        return _this;
    }
    AbstractBullet.prototype.onAwake = function () {
        //添加碰撞盒
        this.boxColider = this.owner.addComponent(Laya.BoxCollider);
        this.boxColider.height = 110;
        this.boxColider.width = 49;
        this.boxColider.isSensor = true;
        this.boxColider.label = 'bullet';
        // //添加刚体
        this.rigidBody = this.owner.addComponent(Laya.RigidBody);
        // this.rigidBody.type = 'static';
        this.rigidBody.group = -1;
        this.rigidBody.allowSleep = true;
        this.rigidBody.bullet = true;
    };
    AbstractBullet.prototype.onEnable = function () {
        this.boxColider && (this.boxColider.enabled = true);
        this.rigidBody && (this.rigidBody.enabled = true);
        Laya.stage.on(Laya.Event.RESIZE, this, this.onResize);
    };
    AbstractBullet.prototype.onDisable = function () {
        this.boxColider && (this.boxColider.enabled = false);
        this.rigidBody && (this.rigidBody.enabled = false);
        this.reset();
    };
    AbstractBullet.prototype.onResize = function () {
    };
    AbstractBullet.prototype.onStart = function () {
    };
    AbstractBullet.prototype.onUpdate = function () {
        if (this.state == Ibullet_1.bulletState.lock) {
            this.lockMove();
        }
        else {
            this.unLockMove();
        }
        this.owner["$owner"].visible = true;
    };
    /**
     * 子弹实例化之后,需先手动调用init初始化子弹基础信息
     * @param ownerId
     * @param fireClickPoint
     * @param lockTarget
     */
    AbstractBullet.prototype.init = function (ownerId, bulletId, fireTime, startPoint, bulletLv, fireClickPoint, lockFishId) {
        this.ownerId = ownerId;
        this.bulletId = bulletId;
        this.fireTime = fireTime;
        this.fireClickPoint = fireClickPoint;
        this.startPoint = startPoint;
        this.bulletLv = bulletLv;
        this.state = lockFishId ? Ibullet_1.bulletState.lock : Ibullet_1.bulletState.unlock;
        this.lockFishId = lockFishId ? lockFishId : null;
    };
    AbstractBullet.prototype.reset = function () {
        this.ownerId = null;
        this.bulletId = null;
        this.fireClickPoint = null;
        this.startPoint = null;
        this.state = null;
        this.lockFishId = null;
        this.fireTime = null;
    };
    AbstractBullet.prototype.recover = function () {
    };
    return AbstractBullet;
}(Laya.Script));
exports.default = AbstractBullet;
},{"../interface/Ibullet":280}],279:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var AbstractBullet_1 = require("./AbstractBullet");
var Ibullet_1 = require("../interface/Ibullet");
var BulletUtils_1 = require("../utils/BulletUtils");
var inject = riggerIOC.inject;
var fightServer_1 = require("../../../moduleContexts/fightModule/servers/fightServer");
var netUtils_1 = require("../../net/netUtils");
var PlayerModel_1 = require("../../../moduleContexts/playerModule/models/PlayerModel");
var FishManager_1 = require("../../../moduleContexts/roomModule/models/FishManager");
var AbstractFish_1 = require("../../fish/fishScript/AbstractFish");
var NormalBullet = /** @class */ (function (_super) {
    __extends(NormalBullet, _super);
    function NormalBullet() {
        var _this = _super.call(this) || this;
        /**y轴单位向量,垂直向上 */
        _this.yNormalVector = new Laya.Vector2(0, -1);
        _this.normalDirectionVector = new Laya.Vector2(0, 0);
        _this._frameMoveVector = new Laya.Vector2(0, 0);
        return _this;
    }
    NormalBullet.prototype.onAwake = function () {
        _super.prototype.onAwake.call(this);
    };
    NormalBullet.prototype.onEnable = function () {
        _super.prototype.onEnable.call(this);
        this.setBoxColider();
        this.owner["$owner"].visible = false;
        this.speed = 40;
        this.owner["$owner"].x = this.startPoint.x;
        this.owner["$owner"].y = this.startPoint.y;
        var directionVector = new Laya.Vector2(this.fireClickPoint.x - this.startPoint.x, this.fireClickPoint.y - this.startPoint.y);
        Laya.Vector2.normalize(directionVector, this.normalDirectionVector); //单位化方向向量
        this.updateBulletDirection(this.normalDirectionVector); //更新子弹x,y轴的方向
    };
    NormalBullet.prototype.onDisable = function () {
        _super.prototype.onDisable.call(this);
    };
    NormalBullet.prototype.recover = function () {
        _super.prototype.recover.call(this);
        BulletUtils_1.default.recoverBullet(this.owner["$owner"]);
    };
    NormalBullet.prototype.onResize = function () {
        _super.prototype.onResize.call(this);
        this.setBoxColider();
    };
    NormalBullet.prototype.setBoxColider = function () {
        this.boxColider.width = this.owner["$owner"].m_bulletLoader.content["width"] * this.owner["$owner"].parent.scaleX;
        this.boxColider.height = 20;
        this.boxColider.x = this.owner["$owner"].m_bulletLoader.width / 2 - this.owner["$owner"].m_bulletLoader.content["width"] / 2;
        this.boxColider.y = 0;
        this.boxColider.resetShape(true);
    };
    /**
     * 开始碰撞(目前存在子弹与子弹之间会发生碰撞的问题)
     * @param other
     * @param self
     * @param contact
     */
    NormalBullet.prototype.onTriggerEnter = function (other, self, contact) {
        if (other.label == 'fish') {
            var fish = other.owner.getComponent(AbstractFish_1.default);
            var fishId = fish.fishId;
            var fishTypeId = fish.fishTypeId;
            if (this.state == Ibullet_1.bulletState.lock) {
                if (fishId == this.lockFishId) {
                    fish.playHitAni(); //播放鱼受击动画,应放在鱼的碰撞函数.（碰撞待优化）
                    if (this.ownerId == this.playerModel.playerSelfInfo.userId) {
                        this.fightServer.shellReq(this.bulletId, fishId, fishTypeId, []); //上报击中
                    }
                    //加网
                    var net_1 = netUtils_1.default.getNet();
                    net_1.init(this.bulletLv);
                    net_1.x = this.owner["$owner"].x + this.owner["$owner"].pivotX - net_1.width / 2;
                    net_1.y = this.owner["$owner"].y - net_1.height / 2;
                    this.owner["$owner"].parent.addChild(net_1);
                    net_1.sortingOrder = 999;
                    net_1.m_t0.play(Laya.Handler.create(this, function () {
                        netUtils_1.default.recoverNet(net_1);
                    }));
                    //回收子弹
                    this.reset();
                    this.recover();
                }
            }
            else {
                fish.playHitAni(); //播放鱼受击动画,应放在鱼的碰撞函数.（碰撞待优化）
                if (this.ownerId == this.playerModel.playerSelfInfo.userId) {
                    this.fightServer.shellReq(this.bulletId, fishId, fishTypeId, []); //上报击中
                }
                //加网
                var net_2 = netUtils_1.default.getNet();
                net_2.init(this.bulletLv);
                net_2.x = this.owner["$owner"].x + this.owner["$owner"].pivotX - net_2.width / 2;
                net_2.y = this.owner["$owner"].y - net_2.height / 2;
                this.owner["$owner"].parent.addChild(net_2);
                net_2.sortingOrder = 999;
                net_2.m_t0.play(Laya.Handler.create(this, function () {
                    netUtils_1.default.recoverNet(net_2);
                }));
                //回收子弹
                this.reset();
                this.recover();
            }
        }
    };
    /**
     * 碰撞结束
     * @param other
     * @param self
     * @param contact
     */
    NormalBullet.prototype.onTriggerExit = function (other, self, contact) {
    };
    NormalBullet.prototype.onStart = function () {
        _super.prototype.onStart.call(this);
    };
    NormalBullet.prototype.onUpdate = function () {
        _super.prototype.onUpdate.call(this);
    };
    /**
     * 锁定状态
     */
    NormalBullet.prototype.lockMove = function () {
        var borderDirection = this.checkOutOfWall(); //是否触碰边界
        if (borderDirection) {
            //通知服务器子弹出屏幕
            this.fightServer.shellReq(this.bulletId, 0, 0, []);
            //回收子弹
            // console.log(`deleteBulletId===${this.bulletId}`);
            // console.log(`outOfWall==${this.bulletId}`)
            this.reset();
            this.recover();
            return;
        }
        // console.log(`lockData==${this.lockFishId},,bulletId===${this.bulletId}`);
        var fish = FishManager_1.default.instance.getFishgObjectById(this.lockFishId);
        var bulletPoint = new Laya.Point(this.owner["$owner"].x, this.owner["$owner"].y);
        if (fish) {
            var targetPoint = new Laya.Point(fish.x, fish.y);
            var directionVector = new Laya.Vector2(targetPoint.x - bulletPoint.x, targetPoint.y - bulletPoint.y);
            Laya.Vector2.normalize(directionVector, this.normalDirectionVector);
            // console.log(`ddddd`);
        }
        // console.log(`fishId==${fish?fish.data:'null'},,,fish==${fish},,,bulletId==${this.bulletId},,vector2===(${this.normalDirectionVector.x},${this.normalDirectionVector.y})`);
        this.updateBulletDirection(this.normalDirectionVector); //更新子弹x,y轴方向
        this.frameMoveVector = new Laya.Vector2(this.normalDirectionVector.x * this.speed, this.normalDirectionVector.y * this.speed); //更新每帧移动的向量
    };
    /**
     * 不锁定
     */
    NormalBullet.prototype.unLockMove = function () {
        this.owner["$owner"].visible = true;
        var borderDirection = this.checkOutOfWall(); //是否触碰边界
        switch (borderDirection) {
            case Ibullet_1.Direction.up:
            case Ibullet_1.Direction.bottom:
                this.normalDirectionVector = new Laya.Vector2(this.normalDirectionVector.x, -this.normalDirectionVector.y);
                break;
            case Ibullet_1.Direction.left:
            case Ibullet_1.Direction.right:
                this.normalDirectionVector = new Laya.Vector2(-this.normalDirectionVector.x, this.normalDirectionVector.y);
                break;
            default:
                break;
        }
        this.updateBulletDirection(this.normalDirectionVector); //更新子弹x,y轴方向
        // let moveTime: number = rigger.service.TimeService.instance.serverTime - this.fireTime;
        // let time = moveTime / 20;
        this.frameMoveVector = new Laya.Vector2(this.normalDirectionVector.x * this.speed, this.normalDirectionVector.y * this.speed); //更新每帧移动的向量
    };
    Object.defineProperty(NormalBullet.prototype, "frameMoveVector", {
        get: function () {
            return this._frameMoveVector;
        },
        set: function (value) {
            this._frameMoveVector = value;
            //坐标
            this.owner["$owner"].x += this._frameMoveVector.x;
            this.owner["$owner"].y += this._frameMoveVector.y;
            if (this.owner["$owner"].x <= 0)
                this.owner["$owner"].x = 0;
            if (this.owner["$owner"].x >= 1334)
                this.owner["$owner"].x = 1334;
            if (this.owner["$owner"].y <= 0)
                this.owner["$owner"].y = 0;
            if (this.owner["$owner"].y >= 750)
                this.owner["$owner"].y = 750;
            //角度
            var dot = Laya.Vector2.dot(this.yNormalVector, this.normalDirectionVector);
            var radian = Math.acos(dot);
            var rotation = 180 / Math.PI * radian;
            if (this.bulletXDirection != Ibullet_1.Direction.none) {
                if (this.bulletXDirection == Ibullet_1.Direction.left) {
                    rotation = 360 - rotation;
                }
            }
            this.owner["$owner"].rotation = rotation;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 触碰边界时，返回边界方向
     */
    NormalBullet.prototype.checkOutOfWall = function () {
        if (this.owner["$owner"].x <= 0) {
            //触碰左边界
            return Ibullet_1.Direction.left;
        }
        else if (this.owner["$owner"].y <= 0) {
            //触碰上边界
            return Ibullet_1.Direction.up;
        }
        else if (this.owner["$owner"].x >= 1334) {
            //触碰右边界
            return Ibullet_1.Direction.right;
        }
        else if (this.owner["$owner"].y >= 750) {
            //触碰下边界
            return Ibullet_1.Direction.bottom;
        }
        else {
            //未触碰边界
            return null;
        }
    };
    /**
     * 更新子弹在x,y轴上的方向
     * @param normalVector 子弹方向的单位向量
     */
    NormalBullet.prototype.updateBulletDirection = function (normalVector) {
        var dx = normalVector.x;
        var dy = normalVector.y;
        if (dx > 0)
            this.bulletXDirection = Ibullet_1.Direction.right;
        else if (dx < 0)
            this.bulletXDirection = Ibullet_1.Direction.left;
        else
            this.bulletXDirection = Ibullet_1.Direction.none;
        if (dy > 0)
            this.bulletYDirection = Ibullet_1.Direction.bottom;
        else if (dy < 0)
            this.bulletYDirection = Ibullet_1.Direction.up;
        else
            this.bulletYDirection = Ibullet_1.Direction.none;
    };
    __decorate([
        inject(fightServer_1.default)
    ], NormalBullet.prototype, "fightServer", void 0);
    __decorate([
        inject(PlayerModel_1.default)
    ], NormalBullet.prototype, "playerModel", void 0);
    return NormalBullet;
}(AbstractBullet_1.default));
exports.default = NormalBullet;
},{"../../../moduleContexts/fightModule/servers/fightServer":202,"../../../moduleContexts/playerModule/models/PlayerModel":226,"../../../moduleContexts/roomModule/models/FishManager":236,"../../fish/fishScript/AbstractFish":283,"../../net/netUtils":295,"../interface/Ibullet":280,"../utils/BulletUtils":281,"./AbstractBullet":278}],280:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * 子弹状态
 */
var bulletState;
(function (bulletState) {
    /**锁定模式 */
    bulletState[bulletState["lock"] = 1] = "lock";
    /**自由射击 */
    bulletState[bulletState["unlock"] = 2] = "unlock";
})(bulletState = exports.bulletState || (exports.bulletState = {}));
/**
 * 上下左右
 */
var Direction;
(function (Direction) {
    Direction[Direction["up"] = 1] = "up";
    Direction[Direction["bottom"] = 2] = "bottom";
    Direction[Direction["left"] = 3] = "left";
    Direction[Direction["right"] = 4] = "right";
    Direction[Direction["none"] = 5] = "none";
})(Direction = exports.Direction || (exports.Direction = {}));
},{}],281:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var FUIBullet_1 = require("../../../fui/roomScene/FUIBullet");
var NormalBullet_1 = require("../bulletScript/NormalBullet");
var BulletUtils = /** @class */ (function () {
    function BulletUtils() {
    }
    /**
     * 普通子弹实例
     */
    BulletUtils.getBullet = function () {
        return rigger.service.PoolService.instance.getItemByCreateFun(BulletUtils.bulletSignal, BulletUtils.creatBullet);
    };
    /**
     * 回收
     * @param bullet
     */
    BulletUtils.recoverBullet = function (bullet) {
        // console.log(`recoverBullet`);
        bullet.removeFromParent();
        rigger.service.PoolService.instance.recover(this.bulletSignal, bullet);
    };
    BulletUtils.creatBullet = function () {
        //实例
        var bullet = FUIBullet_1.default.createInstance();
        bullet.displayObject.addComponent(NormalBullet_1.default);
        return bullet;
    };
    BulletUtils.bulletSignal = 'BULLET_SIGNAL';
    return BulletUtils;
}());
exports.default = BulletUtils;
},{"../../../fui/roomScene/FUIBullet":121,"../bulletScript/NormalBullet":279}],282:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var fishTypeEnum;
(function (fishTypeEnum) {
    /**普通 */
    fishTypeEnum[fishTypeEnum["normal"] = 1] = "normal";
    /**一网打尽 */
    fishTypeEnum[fishTypeEnum["catchAll"] = 2] = "catchAll";
    /**全屏炸弹 */
    fishTypeEnum[fishTypeEnum["boom"] = 3] = "boom";
    /**奖金 */
    fishTypeEnum[fishTypeEnum["jackPot"] = 4] = "jackPot";
    /**冰冻 */
    fishTypeEnum[fishTypeEnum["frozen"] = 5] = "frozen";
    /**boos鱼 */
    fishTypeEnum[fishTypeEnum["boss"] = 6] = "boss";
    /**大三元 */
    fishTypeEnum[fishTypeEnum["triStar"] = 7] = "triStar";
    /**大四喜 */
    fishTypeEnum[fishTypeEnum["four"] = 8] = "four";
})(fishTypeEnum = exports.fishTypeEnum || (exports.fishTypeEnum = {}));
},{}],283:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var Brizecurve_1 = require("../../brizecurve/Brizecurve");
var BrizecurveUtils_1 = require("../../brizecurve/BrizecurveUtils");
var FishManager_1 = require("../../../moduleContexts/roomModule/models/FishManager");
var DataMon_1 = require("../../../data/tpls/DataMon");
var inject = riggerIOC.inject;
var PlayerModel_1 = require("../../../moduleContexts/playerModule/models/PlayerModel");
var AbstractFish = /** @class */ (function (_super) {
    __extends(AbstractFish, _super);
    function AbstractFish() {
        var _this = _super.call(this) || this;
        //该鱼的路径曲线
        _this.brizecurveInfo = new Brizecurve_1.default();
        //路径x的偏移
        _this.offsetX = 0;
        //路径y的偏移
        _this.offsetY = 0;
        _this.boxColider = null;
        _this.rigidBody = null;
        _this._runUpTime = 0;
        _this.eachMsOffsetTime = 0;
        _this.oldMsOffsetTime = 0;
        _this._t = 0;
        _this.isSkew = false;
        _this._coliderActive = true;
        return _this;
    }
    AbstractFish.prototype.onAwake = function () {
        //添加碰撞盒
        this.boxColider = this.owner.addComponent(Laya.BoxCollider);
        this.boxColider.height = 1;
        this.boxColider.width = 1;
        this.boxColider.isSensor = true;
        this.boxColider.label = '';
        // //添加刚体
        this.rigidBody = this.owner.addComponent(Laya.RigidBody);
        this.rigidBody.type = 'static';
        this.rigidBody.group = -2;
        this.rigidBody.allowSleep = true;
        this.rigidBody.bullet = true;
    };
    AbstractFish.prototype.onEnable = function () {
        this.setFishLoader(); //初始化鱼的ui
        this.initPath(); //初始化鱼的路径
        this.startMove();
        this.boxColider && (this.boxColider.enabled = true);
        this.rigidBody && (this.rigidBody.enabled = true);
        Laya.stage.on(Laya.Event.RESIZE, this, this.onResize);
    };
    AbstractFish.prototype.onDisable = function () {
        this.boxColider && (this.boxColider.enabled = false);
        this.rigidBody && (this.rigidBody.enabled = false);
        // this.reset();
    };
    AbstractFish.prototype.onUpdate = function () {
    };
    AbstractFish.prototype.onResize = function () {
    };
    AbstractFish.prototype.reset = function () {
        Laya.timer.clearAll(this);
        this.fishId = null;
        this.uiId = null;
        this.fishTypeId = null;
        this.creatTime = null;
        this.pathId = null;
        this.frozenList = null;
        this.ratio = null;
        this.brizecurveInfo = new Brizecurve_1.default();
        this.offsetX = 0;
        this.offsetY = 0;
        this._t = 0;
        this._runUpTime = 0;
        this.eachMsOffsetTime = 0;
        this.oldMsOffsetTime = 0;
        this.coliderActive = true;
        this.isSkew = false;
        this.isLock = false;
    };
    /**
     * 初始化鱼的基础信息
     * @param fishInfo
     */
    AbstractFish.prototype.init = function (fishInfo) {
        this.isLock = false;
        this.fishId = fishInfo.monId;
        this.creatTime = fishInfo.createTime;
        this.fishTypeId = fishInfo.monTypeId;
        this.uiId = DataMon_1.default.getData(this.fishTypeId).uiId;
        if ([-1].indexOf(this.uiId) != -1)
            this.uiId = 1;
        // console.log(`fish==${this.fishType},,fishType==${DataMon.getData(this.fishType).type},,,uiId==${this.uiId}`);
        this.pathId = fishInfo.pathId;
        if (fishInfo.frozenList)
            this.frozenList = fishInfo.frozenList;
        if (fishInfo.offsetX)
            this.offsetX = fishInfo.offsetX;
        if (fishInfo.offsetY)
            this.offsetY = fishInfo.offsetY;
    };
    /**
     * 初始化路径
     */
    AbstractFish.prototype.initPath = function () {
        if (!this.pathId)
            return;
        this.brizecurveInfo.init(this.pathId);
        //初始化鱼的位置
        var startPoint = this.brizecurveInfo.getPointByT(0);
        this.owner["$owner"].x = startPoint.x;
        this.owner["$owner"].y = startPoint.y;
        this.owner["$owner"].alpha = 1;
    };
    /**
     * 游动
     */
    AbstractFish.prototype.startMove = function () {
        var _this = this;
        var pathEffect = this.brizecurveInfo.pathEffect;
        if (!pathEffect)
            return;
        var startPoint = this.brizecurveInfo.getPointByT(0);
        this.owner["$owner"].x = startPoint.x;
        this.owner["$owner"].y = startPoint.y;
        Laya.timer.frameLoop(1, this, function () {
            if (rigger.service.TimeService.instance.serverTime > _this.creatTime) {
                if (_this.checkOutOfWall() && _this.t > 0.5) {
                    //游出屏幕
                    Laya.timer.clearAll(_this);
                    FishManager_1.default.instance.deleteFishInfoById(_this.fishId); //删除该鱼对应的数据信息
                    _this.recover();
                    return;
                }
                var currentMoveTime = _this.currentTime();
                if (_this._runUpTime > 0) {
                    //需要加速退场
                    currentMoveTime += _this.eachMsOffsetTime * Laya.timer.delta + _this.oldMsOffsetTime;
                    _this.oldMsOffsetTime += _this.eachMsOffsetTime * Laya.timer.delta;
                }
                if (_this.t < 1) {
                    _this.t = BrizecurveUtils_1.default.getPercentByTime(pathEffect, currentMoveTime);
                }
                else {
                    Laya.timer.clearAll(_this);
                    FishManager_1.default.instance.deleteFishInfoById(_this.fishId); //删除该鱼对应的数据信息
                    _this.recover();
                }
            }
        });
    };
    Object.defineProperty(AbstractFish.prototype, "runUpTime", {
        /**
         * 剩余路径ms内跑完,加速鱼的游动,用于鱼潮出现时,加速屏幕鱼的消失。
         */
        get: function () {
            return this._runUpTime;
        },
        set: function (value) {
            if (value >= this.brizecurveInfo.totalTime)
                return;
            this._runUpTime = value;
            if (value <= 0)
                return;
            var currentTime = this.currentTime() <= 0 ? 0 : this.currentTime();
            var realLeftTime = this.brizecurveInfo.totalTime - currentTime;
            if (realLeftTime <= this._runUpTime) {
                this.eachMsOffsetTime = 0;
            }
            else {
                this.eachMsOffsetTime = Math.floor((realLeftTime - this._runUpTime) / this._runUpTime);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 返回当前游动时间
     */
    AbstractFish.prototype.currentTime = function () {
        this.unFrozenFish();
        var currentTime = 0;
        var serverTime = rigger.service.TimeService.instance.serverTime;
        if (this.frozenList && this.frozenList.length > 0) {
            if (serverTime < this.frozenList[0].startTime + this.frozenList[0].time) {
                //冰冻期间
                currentTime = this.frozenList[0].startTime - this.creatTime;
                this.frozenFish();
            }
            else {
                currentTime = serverTime - this.frozenList[0].time - this.creatTime;
            }
        }
        else {
            currentTime = serverTime - this.creatTime;
        }
        return currentTime;
    };
    Object.defineProperty(AbstractFish.prototype, "t", {
        get: function () {
            return this._t;
        },
        set: function (value) {
            this._t = value;
            if (value == 0)
                return;
            //坐标
            var currentPoint = this.brizecurveInfo.getPointByT(this._t);
            this.owner["$owner"].x = currentPoint.x + this.offsetX;
            if ([3, 4].indexOf(this.absPlayerModel.playerSelfInfo.pos) != -1) {
                this.owner["$owner"].y = 750 - (currentPoint.y + this.offsetY);
            }
            else {
                this.owner["$owner"].y = currentPoint.y + this.offsetY;
            }
            //角度
            var lastPoint = this.brizecurveInfo.getPointByT(this._t - 0.001);
            var dx = currentPoint.x - lastPoint.x;
            var dy = currentPoint.y - lastPoint.y;
            var k = dy / dx;
            var radian = Math.atan(k);
            var rotation = 180 / Math.PI * radian;
            if (dy < 0) {
                if (dx < 0) {
                    rotation = 180 + Math.abs(rotation);
                }
            }
            else if (dy > 0) {
                if (dx < 0) {
                    rotation = 180 - Math.abs(rotation);
                }
            }
            else {
                if (dx < 0) {
                    rotation = 180;
                }
            }
            //鱼视图的翻转(暂支持一个方向,若一条路径存在两个方向,则转折点处会发生瞬间翻转的效果)
            if (!this.isSkew) {
                if (rotation >= 90 && rotation <= 270) {
                    this.skewXFish(180);
                }
                else {
                    this.skewXFish(0);
                }
                this.isSkew = true;
            }
            //真实座位[3,4]玩家的鱼视图需进行y的翻转
            if ([3, 4].indexOf(this.absPlayerModel.playerSelfInfo.pos) != -1) {
                if (rotation >= 0 && rotation <= 90 || rotation >= 180 && rotation <= 270) {
                    rotation = rotation - 2 * Math.abs(180 / Math.PI * radian);
                }
                else {
                    rotation = rotation + 2 * Math.abs(180 / Math.PI * radian);
                }
            }
            this.owner["$owner"].rotation = rotation;
            this.boxColider.refresh();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractFish.prototype, "coliderActive", {
        /**
         * 碰撞是否开启
         */
        set: function (value) {
            this._coliderActive = value;
            if (!value) {
                if (this.boxColider) {
                    //阻止碰撞
                    this.boxColider.label = '';
                    this.stopTrigger && this.stopTrigger();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AbstractFish.prototype, "isLock", {
        /**
         * 是否锁定
         */
        get: function () { return this._isLock; },
        set: function (v) {
            this._isLock = v;
            if (v)
                this.owner["$owner"].m_aimSignLoader.url = "ui://roomScene/aimSign";
            else
                this.owner["$owner"].m_aimSignLoader.url = "";
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 死亡的特殊处理,暂用于一网打尽
     */
    AbstractFish.prototype.beforeDeadInCatchAll = function () {
        this.coliderActive = false;
        this.isLock = false;
        this.frozenFish();
        Laya.timer.clearAll(this);
        FishManager_1.default.instance.deleteFishInfoById(this.fishId); //删除该鱼对应的数据信息,防止在闪电链住之前被其他玩家锁定浪费子弹
    };
    /**返回鱼中心的坐标,坐标系为fishView */
    AbstractFish.prototype.getCenterPoint = function () {
        var point = new Laya.Point(this.owner["$owner"].m_fishLoader.x, this.owner["$owner"].m_fishLoader.y);
        var globalPoint = this.owner["$owner"].localToGlobal(point.x, point.y);
        var localPoint = this.owner["$owner"].parent.globalToLocal(globalPoint.x, globalPoint.y);
        return new Laya.Point(Math.floor(localPoint.x), Math.floor(localPoint.y));
    };
    __decorate([
        inject(PlayerModel_1.default)
    ], AbstractFish.prototype, "absPlayerModel", void 0);
    return AbstractFish;
}(Laya.Script));
exports.default = AbstractFish;
},{"../../../data/tpls/DataMon":60,"../../../moduleContexts/playerModule/models/PlayerModel":226,"../../../moduleContexts/roomModule/models/FishManager":236,"../../brizecurve/Brizecurve":275,"../../brizecurve/BrizecurveUtils":276}],284:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FUIcatchAllLineView_1 = require("../../../fui/roomScene/FUIcatchAllLineView");
var CatchAllAniView = /** @class */ (function (_super) {
    __extends(CatchAllAniView, _super);
    function CatchAllAniView() {
        return _super.call(this) || this;
    }
    ;
    CatchAllAniView.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
    };
    /**
     * 闪电链动画
     * @param time 闪电时间
     * @param length 闪电长度
     * @param cb 动画播放完回调
     */
    CatchAllAniView.prototype.play = function (time, length, cb) {
        if (time === void 0) { time = 500; }
        if (length === void 0) { length = 1530; }
        console.log("play light");
        Laya.Tween.to(this.m_n1, { width: length }, time, null, Laya.Handler.create(this, function () {
            console.log("end light");
            cb && cb.run();
            // this.dispose();
        }));
    };
    CatchAllAniView.prototype.dispose = function () {
        var _this = this;
        Laya.timer.once(200, this, function () {
            _this.removeFromParent();
            _super.prototype.dispose.call(_this);
        });
    };
    return CatchAllAniView;
}(FUIcatchAllLineView_1.default));
exports.default = CatchAllAniView;
},{"../../../fui/roomScene/FUIcatchAllLineView":142}],285:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var FishUtils_1 = require("../utils/FishUtils");
var AbstractFish_1 = require("./AbstractFish");
var inject = riggerIOC.inject;
var fightServer_1 = require("../../../moduleContexts/fightModule/servers/fightServer");
var DataMon_1 = require("../../../data/tpls/DataMon");
var PlayerModel_1 = require("../../../moduleContexts/playerModule/models/PlayerModel");
var FilterUtils_1 = require("../utils/FilterUtils");
var FourFish = /** @class */ (function (_super) {
    __extends(FourFish, _super);
    function FourFish() {
        return _super.call(this) || this;
    }
    FourFish.prototype.onAwake = function () {
        _super.prototype.onAwake.call(this);
    };
    FourFish.prototype.onEnable = function () {
        _super.prototype.onEnable.call(this);
    };
    FourFish.prototype.onUpdate = function () {
        _super.prototype.onUpdate.call(this);
    };
    FourFish.prototype.onTriggerEnter = function (other, self, contact) {
    };
    FourFish.prototype.onTriggerExit = function (other, self, contact) {
    };
    FourFish.prototype.onDisable = function () {
        _super.prototype.onDisable.call(this);
    };
    FourFish.prototype.onResize = function () {
        _super.prototype.onResize.call(this);
        this.setBoxColider();
    };
    /**
     * 鱼实例化之后，手动调用
     * @param fishInfo
     */
    FourFish.prototype.init = function (fishInfo) {
        _super.prototype.init.call(this, fishInfo);
    };
    /**
     * 设置鱼的ui
     */
    FourFish.prototype.setFishLoader = function () {
        this.owner["$owner"].m_buffLoader.url = '';
        this.owner["$owner"].m_fishLoader.url = "ui://roomScene/four";
        this.owner["$owner"].filters = null;
        this.owner["$owner"].m_fishLoader.width = this.owner["$owner"].m_fishLoader.content["width"];
        this.owner["$owner"].m_fishLoader.height = this.owner["$owner"].m_fishLoader.content["height"];
        //组合鱼赋值
        var combination = DataMon_1.default.getData(this.fishTypeId).combination;
        for (var i = 0; i < combination.length; i++) {
            // (this.owner[`$owner`][`m_fourFish${i+1}Loader`] as fairygui.GLoader).playing = true;
            this.owner["$owner"]["m_fourFish" + (i + 1) + "Loader"].url = "ui://roomScene/fish_" + DataMon_1.default.getData(combination[i]).uiId + "_swining";
            this.owner["$owner"]["m_fourFish" + (i + 1) + "Loader"].content.setPlaySettings(0, -1, -1);
            // if([3, 4].indexOf(this.playerModel.playerSelfInfo.pos) != -1) {
            //     this.owner[`$owner`][`m_fourFish${i+1}Loader`].scaleY = - Math.abs(this.owner[`$owner`][`m_fourFish${i+1}Loader`].scaleY);
            // }
            // else {
            //     this.owner[`$owner`][`m_fourFish${i+1}Loader`].scaleY = Math.abs(this.owner[`$owner`][`m_fourFish${i+1}Loader`].scaleY);
            // }
        }
        //设置碰撞区域,暂定一个矩形
        this.boxColider.label = 'fish';
        this.setBoxColider();
    };
    FourFish.prototype.setBoxColider = function () {
        //碰撞盒未参与适配,需手动适配,逻辑待修改
        this.boxColider.width = this.owner["$owner"].m_fishLoader.content["width"] * Math.abs(this.owner["$owner"].parent.parent.scaleX);
        this.boxColider.height = this.owner["$owner"].m_fishLoader.content["height"] * Math.abs(this.owner["$owner"].parent.parent.scaleY);
        this.boxColider.x = -Math.floor(this.boxColider.width / 2 - this.owner["$owner"].width / 2);
        this.boxColider.y = -Math.floor(this.boxColider.height / 2 - this.owner["$owner"].height / 2);
        this.boxColider.resetShape(true);
    };
    FourFish.prototype.frozenFish = function () {
        for (var i = 0; i < 4; i++) {
            this.owner["$owner"]["m_fourFish" + (i + 1) + "Loader"].playing = false;
        }
    };
    FourFish.prototype.unFrozenFish = function () {
        for (var i = 0; i < 4; i++) {
            this.owner["$owner"]["m_fourFish" + (i + 1) + "Loader"].playing = true;
        }
    };
    /**翻转鱼视图 */
    FourFish.prototype.skewXFish = function (skewX) {
        for (var i = 0; i < 4; i++) {
            this.owner["$owner"]["m_fourFish" + (i + 1) + "Loader"].skewX = skewX;
        }
    };
    /**
     * 检测鱼是否游出屏幕
     */
    FourFish.prototype.checkOutOfWall = function () {
        var isOutOfWall = true;
        var fishHeight = this.owner["$owner"].m_fishLoader.content["height"];
        var fishWidth = this.owner["$owner"].m_fishLoader.content["width"];
        if (this.owner['$owner'].x < -fishWidth / 2) {
            //左边界
        }
        else if (this.owner['$owner'].y < -fishHeight / 2) {
            //上边界
        }
        else if (this.owner['$owner'].x > 1334 + fishWidth / 2) {
            //右边界
        }
        else if (this.owner['$owner'].y > 750 + fishHeight / 2) {
            //下边界
        }
        else {
            isOutOfWall = false;
        }
        return isOutOfWall;
    };
    /**
     * 受击动画
     */
    FourFish.prototype.playHitAni = function () {
        Laya.timer.clear(this, this.removeHitAni);
        var corlor = DataMon_1.default.getData(this.fishTypeId).impactColor;
        var redFilter = FilterUtils_1.default.getColorMatrix(corlor);
        this.owner["$owner"].filters = [redFilter];
        Laya.timer.once(300, this, this.removeHitAni);
    };
    FourFish.prototype.removeHitAni = function () {
        this.owner["$owner"].filters = null;
    };
    FourFish.prototype.reset = function () {
        this.owner["$owner"].filters = null;
        _super.prototype.reset.call(this);
    };
    /**
     * 鱼的回收处理
     */
    FourFish.prototype.recover = function () {
        var _this = this;
        var combination = DataMon_1.default.getData(this.fishTypeId).combination;
        this.coliderActive = false;
        var j = 0;
        for (var i = 0; i < combination.length; i++) {
            this.owner["$owner"]["m_fourFish" + (i + 1) + "Loader"].playing = true;
            this.owner["$owner"]["m_fourFish" + (i + 1) + "Loader"].url = "ui://roomScene/fish_" + DataMon_1.default.getData(combination[i]).uiId + "_dead";
            this.owner["$owner"]["m_fourFish" + (i + 1) + "Loader"].content.setPlaySettings(0, -1, 3, -1, Laya.Handler.create(this, function () {
                j += 1;
                if (j >= combination.length) {
                    Laya.Tween.to(_this.owner["$owner"], { alpha: 0 }, 500, null, Laya.Handler.create(_this, function () {
                        FishUtils_1.default.recoverFish(_this.owner["$owner"]);
                    }));
                }
            }));
        }
        this.reset();
    };
    __decorate([
        inject(fightServer_1.default)
    ], FourFish.prototype, "fightServer", void 0);
    __decorate([
        inject(PlayerModel_1.default)
    ], FourFish.prototype, "playerModel", void 0);
    return FourFish;
}(AbstractFish_1.default));
exports.default = FourFish;
},{"../../../data/tpls/DataMon":60,"../../../moduleContexts/fightModule/servers/fightServer":202,"../../../moduleContexts/playerModule/models/PlayerModel":226,"../utils/FilterUtils":289,"../utils/FishUtils":290,"./AbstractFish":283}],286:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var FishUtils_1 = require("../utils/FishUtils");
var AbstractFish_1 = require("./AbstractFish");
var inject = riggerIOC.inject;
var fightServer_1 = require("../../../moduleContexts/fightModule/servers/fightServer");
var DataMon_1 = require("../../../data/tpls/DataMon");
var FishEnum_1 = require("../../enum/FishEnum");
var PlayerModel_1 = require("../../../moduleContexts/playerModule/models/PlayerModel");
var FilterUtils_1 = require("../utils/FilterUtils");
var NormalFish = /** @class */ (function (_super) {
    __extends(NormalFish, _super);
    function NormalFish() {
        var _this = _super.call(this) || this;
        /**碰撞矩形 */
        _this.crashZone = [];
        //多个碰撞矩形
        _this.boxCliders = [];
        return _this;
    }
    NormalFish.prototype.onAwake = function () {
        _super.prototype.onAwake.call(this);
    };
    NormalFish.prototype.onEnable = function () {
        this.crashZone = [];
        this.crashZone = DataMon_1.default.getData(this.fishTypeId).crashZone;
        //美人鱼,冰霜美人鱼需用多个碰撞矩形
        if (this.crashZone && this.crashZone.length > 2) {
            for (var i = 0; i < Math.floor(this.crashZone.length / 2); i++) {
                var boxColider = this.owner.addComponent(Laya.BoxCollider);
                boxColider.height = 1;
                boxColider.width = 1;
                boxColider.isSensor = true;
                boxColider.label = '';
                boxColider.enabled = true;
                this.boxCliders.push(boxColider);
            }
        }
        else {
            if (this.boxCliders) {
                for (var j = 0; j < this.boxCliders.length; j++) {
                    this.boxCliders[j].destroy();
                    this.boxCliders.splice(j, 1);
                }
            }
        }
        _super.prototype.onEnable.call(this);
    };
    NormalFish.prototype.onUpdate = function () {
        _super.prototype.onUpdate.call(this);
    };
    NormalFish.prototype.onTriggerEnter = function (other, self, contact) {
    };
    NormalFish.prototype.onTriggerExit = function (other, self, contact) {
    };
    NormalFish.prototype.onDisable = function () {
        _super.prototype.onDisable.call(this);
        if (this.boxCliders) {
            for (var i = 0; i < this.boxCliders.length; i++) {
                this.boxCliders[i] && (this.boxCliders[i].enabled = false);
            }
        }
    };
    NormalFish.prototype.onResize = function () {
        _super.prototype.onResize.call(this);
        if (this.boxCliders && this.boxCliders.length > 0) {
            this.setBoxColiders(); //多个
        }
        else {
            this.setBoxColider(); //单个
        }
    };
    /**
     * 鱼实例化之后，手动调用
     * @param fishInfo
     */
    NormalFish.prototype.init = function (fishInfo) {
        _super.prototype.init.call(this, fishInfo);
        var buffType = DataMon_1.default.getData(this.fishTypeId).buffType;
        if (buffType == FishEnum_1.fishTypeEnum.boom) {
            this.owner["$owner"].m_aimSignLoader.x += 50;
        }
    };
    /**
     * 设置鱼的ui
     */
    NormalFish.prototype.setFishLoader = function () {
        var type;
        var buffUrl = '';
        switch (DataMon_1.default.getData(this.fishTypeId).buffType) {
            case FishEnum_1.fishTypeEnum.catchAll:
                buffUrl = "ui://roomScene/catchAll";
                break;
            case FishEnum_1.fishTypeEnum.jackPot:
                buffUrl = "ui://roomScene/jackPot";
                break;
            default:
                break;
        }
        var filter;
        switch (DataMon_1.default.getData(this.fishTypeId).fishType) {
            case 18:
                this.owner["$owner"].m_specalAniLoader.url = "ui://roomScene/fishSpecalAni_18&19";
                this.owner["$owner"].m_specalAniLoader.scaleX = -Math.abs(this.owner["$owner"].m_specalAniLoader.scaleX);
                filter = FilterUtils_1.default.getColorMatrix("#DEFEFF");
                break;
            case 19:
                this.owner["$owner"].m_specalAniLoader.url = "ui://roomScene/fishSpecalAni_18&19";
                this.owner["$owner"].m_specalAniLoader.scaleX = -Math.abs(this.owner["$owner"].m_specalAniLoader.scaleX);
                filter = FilterUtils_1.default.getColorMatrix("#FFF691");
                break;
            case 20:
                this.owner["$owner"].m_specalAniLoader.url = "ui://roomScene/fishSpecalAni_20";
                this.owner["$owner"].m_specalAniLoader.scaleX = -Math.abs(this.owner["$owner"].m_specalAniLoader.scaleX);
                break;
            default:
                this.owner["$owner"].m_specalAniLoader.url = '';
                this.owner["$owner"].m_specalAniLoader.scaleX = Math.abs(this.owner["$owner"].m_specalAniLoader.scaleX);
                break;
        }
        filter && (this.owner["$owner"].m_specalAniLoader.filters = [filter]);
        this.owner["$owner"].m_buffLoader.url = buffUrl;
        this.owner["$owner"].m_fishLoader.url = "ui://roomScene/fish_" + this.uiId + "_swining";
        this.owner["$owner"].m_fishLoader.filters = null;
        this.owner["$owner"].m_fishLoader.playing = true;
        //鱼的点击区域
        var width = this.owner["$owner"].m_fishLoader.content["width"];
        var height = this.owner["$owner"].m_fishLoader.content["height"];
        if (this.crashZone.length > 0) {
            if (this.fishTypeId != 26 && this.fishTypeId != 150) {
                //美人鱼除外, 暂定
                if (this.fishTypeId == 151) {
                    //冰霜美人鱼,多个区域拼接
                    width = this.crashZone[2];
                    height = this.crashZone[1];
                }
                else {
                    //其他
                    width = this.crashZone[0];
                    height = this.crashZone[1];
                }
            }
        }
        this.owner["$owner"].m_fishLoader.width = width;
        this.owner["$owner"].m_fishLoader.height = height;
        this.owner["$owner"].m_fishLoader.content.setPlaySettings(0, -1, -1);
        //设置碰撞区域
        if (this.boxCliders && this.boxCliders.length > 0) {
            //多个
            for (var i = 0; i < this.boxCliders.length; i++) {
                this.boxCliders[i].label = 'fish';
            }
            this.setBoxColiders();
        }
        else {
            //单个
            this.boxColider.label = 'fish';
            this.setBoxColider();
        }
    };
    /**
     * 处理单个碰撞区域,碰撞盒未参与适配,需手动适配,逻辑待修改
     */
    NormalFish.prototype.setBoxColider = function () {
        //按原图尺寸设置碰撞区域
        var width = this.owner["$owner"].m_fishLoader.content["width"] * Math.abs(this.owner["$owner"].parent.parent.scaleX) * 0.6;
        var height = this.owner["$owner"].m_fishLoader.content["height"] * Math.abs(this.owner["$owner"].parent.parent.scaleY) * 0.6;
        var offsetX = -Math.floor(width / 2 - this.owner["$owner"].width * Math.abs(this.owner["$owner"].parent.parent.scaleX) / 2);
        var offsetY = -Math.floor(height / 2 - this.owner["$owner"].height * Math.abs(this.owner["$owner"].parent.parent.scaleY) / 2);
        //按特定大小设置碰撞区域
        if (this.crashZone.length > 0) {
            width = this.crashZone[0] * Math.abs(this.owner["$owner"].parent.parent.scaleX);
            height = this.crashZone[1] * Math.abs(this.owner["$owner"].parent.parent.scaleY);
            offsetX = -Math.floor(width / 2 - this.owner["$owner"].width * Math.abs(this.owner["$owner"].parent.parent.scaleX) / 2);
            offsetY = -Math.floor(height / 2 - this.owner["$owner"].height * Math.abs(this.owner["$owner"].parent.parent.scaleY) / 2);
            if (this.fishTypeId) {
                switch (this.fishTypeId) {
                    case 150: //全屏炸弹
                        offsetX = 0;
                        break;
                    case 21: //海鳗
                        offsetX = -Math.floor(width / 2 - this.owner["$owner"].width * Math.abs(this.owner["$owner"].parent.parent.scaleX));
                        break;
                    default:
                        break;
                }
            }
        }
        this.boxColider.width = width;
        this.boxColider.height = height;
        this.boxColider.x = offsetX;
        this.boxColider.y = offsetY;
        this.boxColider.resetShape(true);
        this.boxColider.refresh();
    };
    /**
     * 多个碰撞区域, 目前按鱼类型,特殊处理.
     */
    NormalFish.prototype.setBoxColiders = function () {
        if (!this.boxCliders)
            return;
        if (!this.fishTypeId)
            return;
        switch (this.fishTypeId) {
            case 26: //美人鱼
                this.boxCliders[0].width = this.crashZone[0] * Math.abs(this.owner["$owner"].parent.parent.scaleX);
                this.boxCliders[0].height = this.crashZone[1] * Math.abs(this.owner["$owner"].parent.parent.scaleY);
                this.boxCliders[0].x = Math.floor(this.owner["$owner"].width * Math.abs(this.owner["$owner"].parent.parent.scaleX) * 2);
                this.boxCliders[0].y = -Math.floor(this.boxCliders[0].height - this.owner["$owner"].height * Math.abs(this.owner["$owner"].parent.parent.scaleX));
                this.boxCliders[0].refresh();
                this.boxCliders[1].width = this.crashZone[2] * Math.abs(this.owner["$owner"].parent.parent.scaleX);
                this.boxCliders[1].height = this.crashZone[3] * Math.abs(this.owner["$owner"].parent.parent.scaleY);
                this.boxCliders[1].x = -Math.floor(this.boxCliders[1].width / 2 - this.owner["$owner"].width * Math.abs(this.owner["$owner"].parent.parent.scaleX) / 2);
                this.boxCliders[1].y = 0;
                this.boxCliders[1].refresh();
                break;
            case 151: //冰霜美人鱼
                this.boxCliders[0].width = this.crashZone[0] * Math.abs(this.owner["$owner"].parent.parent.scaleX);
                this.boxCliders[0].height = this.crashZone[1] * Math.abs(this.owner["$owner"].parent.parent.scaleY);
                this.boxCliders[0].x = -Math.floor(this.boxCliders[0].width / 2 - this.owner["$owner"].width * Math.abs(this.owner["$owner"].parent.parent.scaleX) / 2);
                this.boxCliders[0].y = 0;
                this.boxCliders[0].refresh();
                this.boxCliders[1].width = this.crashZone[2] * Math.abs(this.owner["$owner"].parent.parent.scaleX);
                this.boxCliders[1].height = this.crashZone[3] * Math.abs(this.owner["$owner"].parent.parent.scaleY);
                this.boxCliders[1].x = -Math.floor(this.boxCliders[1].width / 2 - this.owner["$owner"].width * Math.abs(this.owner["$owner"].parent.parent.scaleX) / 2);
                this.boxCliders[1].y = Math.floor(this.boxCliders[1].height + this.owner["$owner"].height * Math.abs(this.owner["$owner"].parent.parent.scaleY) / 2);
                this.boxCliders[1].refresh();
                break;
            default:
                break;
        }
        this.boxColider.label = '';
        this.boxColider.width = 1;
        this.boxColider.height = 1;
    };
    /**停止多个碰撞矩形的碰撞检测 */
    NormalFish.prototype.stopTrigger = function () {
        if (this.boxCliders && this.boxCliders.length > 0) {
            for (var i = 0; i < this.boxCliders.length; i++) {
                this.boxCliders[i].label = '';
            }
        }
    };
    NormalFish.prototype.frozenFish = function () {
        this.owner["$owner"].m_fishLoader.playing = false;
    };
    NormalFish.prototype.unFrozenFish = function () {
        this.owner["$owner"].m_fishLoader.playing = true;
    };
    /**翻转鱼视图 */
    NormalFish.prototype.skewXFish = function (skewX) {
        this.owner["$owner"].m_fishLoader.skewX = skewX;
    };
    /**
     * 检测鱼是否游出屏幕
     */
    NormalFish.prototype.checkOutOfWall = function () {
        var isOutOfWall = true;
        var fishHeight;
        var fishWidth;
        var type = DataMon_1.default.getData(this.fishTypeId).fishType;
        if (type == 26 || type == 27) {
            fishHeight = this.owner["$owner"].m_buffLoader.content["height"];
            fishWidth = this.owner["$owner"].m_buffLoader.content["width"];
        }
        else {
            fishHeight = this.owner["$owner"].m_fishLoader.content["height"];
            fishWidth = this.owner["$owner"].m_fishLoader.content["width"];
        }
        if (this.owner['$owner'].x < -fishWidth / 1.5) {
            //左边界
        }
        else if (this.owner['$owner'].y < -fishHeight / 2) {
            //上边界
        }
        else if (this.owner['$owner'].x > 1334 + fishWidth / 2.8) {
            //右边界
        }
        else if (this.owner['$owner'].y > 750 + fishHeight / 2) {
            //下边界
        }
        else {
            isOutOfWall = false;
        }
        return isOutOfWall;
    };
    /**
     * 受击动画
     */
    NormalFish.prototype.playHitAni = function () {
        Laya.timer.clear(this, this.removeHitAni);
        var corlor = DataMon_1.default.getData(this.fishTypeId).impactColor;
        var redFilter = FilterUtils_1.default.getColorMatrix(corlor);
        this.owner["$owner"].m_fishLoader.filters = [redFilter];
        Laya.timer.once(300, this, this.removeHitAni);
    };
    NormalFish.prototype.removeHitAni = function () {
        this.owner["$owner"].m_fishLoader.filters = null;
    };
    NormalFish.prototype.reset = function () {
        this.owner["$owner"].m_fishLoader.filters = null;
        if (this.boxCliders) {
            for (var i = 0; i < this.boxCliders.length; i++) {
                this.boxCliders[i].destroy();
            }
            this.boxCliders = [];
        }
        this.owner["$owner"].m_aimSignLoader.x = 0;
        this.owner["$owner"].m_aimSignLoader.y = 0;
        _super.prototype.reset.call(this);
    };
    /**
     * 鱼的回收处理
     */
    NormalFish.prototype.recover = function () {
        var _this = this;
        this.coliderActive = false;
        this.owner["$owner"].m_fishLoader.playing = true;
        if ([21, 22].indexOf(this.uiId) == -1) {
            this.owner["$owner"].m_fishLoader.url = "ui://roomScene/fish_" + this.uiId + "_dead";
            this.owner["$owner"].m_fishLoader.content.setPlaySettings(0, -1, 3, -1, Laya.Handler.create(this, function () {
                Laya.Tween.to(_this.owner["$owner"], { alpha: 0 }, 500, null, Laya.Handler.create(_this, function () {
                    FishUtils_1.default.recoverFish(_this.owner["$owner"]);
                }));
            }));
        }
        else {
            Laya.Tween.to(this.owner["$owner"], { alpha: 0 }, 500, null, Laya.Handler.create(this, function () {
                FishUtils_1.default.recoverFish(_this.owner["$owner"]);
            }));
        }
        this.reset();
    };
    __decorate([
        inject(fightServer_1.default)
    ], NormalFish.prototype, "fightServer", void 0);
    __decorate([
        inject(PlayerModel_1.default)
    ], NormalFish.prototype, "playerModel", void 0);
    return NormalFish;
}(AbstractFish_1.default));
exports.default = NormalFish;
},{"../../../data/tpls/DataMon":60,"../../../moduleContexts/fightModule/servers/fightServer":202,"../../../moduleContexts/playerModule/models/PlayerModel":226,"../../enum/FishEnum":282,"../utils/FilterUtils":289,"../utils/FishUtils":290,"./AbstractFish":283}],287:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FUIFishDeadTipsView_1 = require("../../../fui/roomScene/FUIFishDeadTipsView");
var SpecialDeadTipsView = /** @class */ (function (_super) {
    __extends(SpecialDeadTipsView, _super);
    function SpecialDeadTipsView() {
        return _super.call(this) || this;
    }
    ;
    SpecialDeadTipsView.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
    };
    SpecialDeadTipsView.prototype.init = function (ctrIdx, fishUrl, coin) {
        this.m_content.m_coinTxt.text = coin / 100 + '';
        this.m_content.m_c1.selectedIndex = ctrIdx;
        this.m_content.m_fishLoader.url = fishUrl;
    };
    SpecialDeadTipsView.prototype.play = function (cb) {
        // console.log(`play light`);
        this.m_t0.play(Laya.Handler.create(this, function () {
            cb && cb.run();
        }), 1);
    };
    SpecialDeadTipsView.prototype.dispose = function () {
        var _this = this;
        Laya.timer.once(200, this, function () {
            _this.removeFromParent();
            _super.prototype.dispose.call(_this);
        });
    };
    return SpecialDeadTipsView;
}(FUIFishDeadTipsView_1.default));
exports.default = SpecialDeadTipsView;
},{"../../../fui/roomScene/FUIFishDeadTipsView":125}],288:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var FishUtils_1 = require("../utils/FishUtils");
var AbstractFish_1 = require("./AbstractFish");
var inject = riggerIOC.inject;
var fightServer_1 = require("../../../moduleContexts/fightModule/servers/fightServer");
var DataMon_1 = require("../../../data/tpls/DataMon");
var PlayerModel_1 = require("../../../moduleContexts/playerModule/models/PlayerModel");
var FilterUtils_1 = require("../utils/FilterUtils");
var TriStarFish = /** @class */ (function (_super) {
    __extends(TriStarFish, _super);
    function TriStarFish() {
        return _super.call(this) || this;
    }
    TriStarFish.prototype.onAwake = function () {
        _super.prototype.onAwake.call(this);
    };
    TriStarFish.prototype.onEnable = function () {
        _super.prototype.onEnable.call(this);
    };
    TriStarFish.prototype.onUpdate = function () {
        _super.prototype.onUpdate.call(this);
    };
    TriStarFish.prototype.onTriggerEnter = function (other, self, contact) {
    };
    TriStarFish.prototype.onTriggerExit = function (other, self, contact) {
    };
    TriStarFish.prototype.onDisable = function () {
        _super.prototype.onDisable.call(this);
    };
    TriStarFish.prototype.onResize = function () {
        _super.prototype.onResize.call(this);
        this.setBoxColider();
    };
    /**
     * 鱼实例化之后，手动调用
     * @param fishInfo
     */
    TriStarFish.prototype.init = function (fishInfo) {
        _super.prototype.init.call(this, fishInfo);
    };
    /**
     * 设置鱼的ui
     */
    TriStarFish.prototype.setFishLoader = function () {
        this.owner["$owner"].m_buffLoader.url = '';
        this.owner["$owner"].m_fishLoader.url = "ui://roomScene/triStar";
        this.owner["$owner"].filters = null;
        this.owner["$owner"].m_fishLoader.width = this.owner["$owner"].m_fishLoader.content["width"];
        this.owner["$owner"].m_fishLoader.height = this.owner["$owner"].m_fishLoader.content["height"];
        //组合鱼赋值
        var combination = DataMon_1.default.getData(this.fishTypeId).combination;
        for (var i = 0; i < combination.length; i++) {
            // (this.owner[`$owner`][`m_triStarFish${i+1}Loader`] as fairygui.GLoader).playing = true;
            this.owner["$owner"]["m_triStarFish" + (i + 1) + "Loader"].url = "ui://roomScene/fish_" + DataMon_1.default.getData(combination[i]).uiId + "_swining";
            this.owner["$owner"]["m_triStarFish" + (i + 1) + "Loader"].content.setPlaySettings(0, -1, -1);
            // if([3, 4].indexOf(this.playerModel.playerSelfInfo.pos) != -1) {
            //     this.owner[`$owner`][`m_triStarFish${i+1}Loader`].scaleY = - Math.abs(this.owner[`$owner`][`m_triStarFish${i+1}Loader`].scaleY);
            // }
            // else {
            //     this.owner[`$owner`][`m_triStarFish${i+1}Loader`].scaleY = Math.abs(this.owner[`$owner`][`m_triStarFish${i+1}Loader`].scaleY);
            // }
        }
        //设置碰撞区域,暂定一个矩形
        this.boxColider.label = 'fish';
        this.setBoxColider();
    };
    TriStarFish.prototype.setBoxColider = function () {
        //碰撞盒未参与适配,需手动适配,逻辑待修改
        this.boxColider.width = this.owner["$owner"].m_fishLoader.content["width"] * Math.abs(this.owner["$owner"].parent.parent.scaleX);
        this.boxColider.height = this.owner["$owner"].m_fishLoader.content["height"] * Math.abs(this.owner["$owner"].parent.parent.scaleY);
        this.boxColider.x = -Math.floor(this.boxColider.width / 2 - this.owner["$owner"].width / 2);
        this.boxColider.y = -Math.floor(this.boxColider.height / 2 - this.owner["$owner"].height / 2);
        this.boxColider.resetShape(true);
    };
    TriStarFish.prototype.frozenFish = function () {
        for (var i = 0; i < 3; i++) {
            this.owner["$owner"]["m_triStarFish" + (i + 1) + "Loader"].playing = false;
        }
    };
    TriStarFish.prototype.unFrozenFish = function () {
        for (var i = 0; i < 3; i++) {
            this.owner["$owner"]["m_triStarFish" + (i + 1) + "Loader"].playing = true;
        }
    };
    /**翻转鱼视图 */
    TriStarFish.prototype.skewXFish = function (skewX) {
        for (var i = 0; i < 3; i++) {
            this.owner["$owner"]["m_triStarFish" + (i + 1) + "Loader"].skewX = skewX;
        }
    };
    /**
     * 检测鱼是否游出屏幕
     */
    TriStarFish.prototype.checkOutOfWall = function () {
        var isOutOfWall = true;
        var fishHeight = this.owner["$owner"].m_fishLoader.content["height"];
        var fishWidth = this.owner["$owner"].m_fishLoader.content["width"];
        if (this.owner['$owner'].x < -fishWidth / 2) {
            //左边界
        }
        else if (this.owner['$owner'].y < -fishHeight / 2) {
            //上边界
        }
        else if (this.owner['$owner'].x > 1334 + fishWidth / 2) {
            //右边界
        }
        else if (this.owner['$owner'].y > 750 + fishHeight / 2) {
            //下边界
        }
        else {
            isOutOfWall = false;
        }
        return isOutOfWall;
    };
    /**
     * 受击动画
     */
    TriStarFish.prototype.playHitAni = function () {
        Laya.timer.clear(this, this.removeHitAni);
        var corlor = DataMon_1.default.getData(this.fishTypeId).impactColor;
        var redFilter = FilterUtils_1.default.getColorMatrix(corlor);
        this.owner["$owner"].filters = [redFilter];
        Laya.timer.once(300, this, this.removeHitAni);
    };
    TriStarFish.prototype.removeHitAni = function () {
        this.owner["$owner"].filters = null;
    };
    TriStarFish.prototype.reset = function () {
        this.owner["$owner"].filters = null;
        _super.prototype.reset.call(this);
    };
    /**
     * 鱼的回收处理
     */
    TriStarFish.prototype.recover = function () {
        var _this = this;
        var combination = DataMon_1.default.getData(this.fishTypeId).combination;
        this.coliderActive = false;
        var j = 0;
        for (var i = 0; i < combination.length; i++) {
            this.owner["$owner"]["m_triStarFish" + (i + 1) + "Loader"].playing = true;
            this.owner["$owner"]["m_triStarFish" + (i + 1) + "Loader"].url = "ui://roomScene/fish_" + DataMon_1.default.getData(combination[i]).uiId + "_dead";
            this.owner["$owner"]["m_triStarFish" + (i + 1) + "Loader"].content.setPlaySettings(0, -1, 3, -1, Laya.Handler.create(this, function () {
                j += 1;
                if (j >= combination.length) {
                    Laya.Tween.to(_this.owner["$owner"], { alpha: 0 }, 500, null, Laya.Handler.create(_this, function () {
                        FishUtils_1.default.recoverFish(_this.owner["$owner"]);
                    }));
                }
            }));
        }
        this.reset();
    };
    __decorate([
        inject(fightServer_1.default)
    ], TriStarFish.prototype, "fightServer", void 0);
    __decorate([
        inject(PlayerModel_1.default)
    ], TriStarFish.prototype, "playerModel", void 0);
    return TriStarFish;
}(AbstractFish_1.default));
exports.default = TriStarFish;
},{"../../../data/tpls/DataMon":60,"../../../moduleContexts/fightModule/servers/fightServer":202,"../../../moduleContexts/playerModule/models/PlayerModel":226,"../utils/FilterUtils":289,"../utils/FishUtils":290,"./AbstractFish":283}],289:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var FilterUtils = /** @class */ (function () {
    function FilterUtils() {
    }
    /**
     * 返回一个颜色滤镜
     * @param rgbCode 颜色rgb十六进制
     */
    FilterUtils.getColorMatrix = function (rgbCode) {
        var r = 1;
        var g = 1;
        var b = 1;
        var rgbStrig = rgbCode;
        r = parseInt(rgbStrig.substr(1, 2), 16) / 255;
        g = parseInt(rgbStrig.substr(3, 2), 16) / 255;
        b = parseInt(rgbStrig.substr(5, 2), 16) / 255;
        var colorMatrix = [
            r, 0, 0, 0, 0,
            0, g, 0, 0, 0,
            0, 0, b, 0, 0,
            0, 0, 0, 1, 0,
        ];
        // console.log(`rgb: ${rgbCode},,r: ${r},, g: ${g},, b: ${b}`);
        var colorFiltter = new Laya.ColorFilter(colorMatrix);
        return colorFiltter;
    };
    return FilterUtils;
}());
exports.default = FilterUtils;
},{}],290:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var NormalFish_1 = require("../fishScript/NormalFish");
var FUINormalFish_1 = require("../../../fui/roomScene/FUINormalFish");
var FUITriStarFish_1 = require("../../../fui/roomScene/FUITriStarFish");
var FUIFourFish_1 = require("../../../fui/roomScene/FUIFourFish");
var TriStarFish_1 = require("../fishScript/TriStarFish");
var FourFish_1 = require("../fishScript/FourFish");
var FishUtils = /** @class */ (function () {
    function FishUtils() {
    }
    /**
     * 获取一只普通鱼的Ui实例
     */
    FishUtils.getNormalFish = function () {
        return rigger.service.PoolService.getItemByCreateFun(FishUtils.normalFishSignal, FishUtils.createNormalFish);
    };
    /**获取一只大三元的Ui实例 */
    FishUtils.getTriStarFish = function () {
        return rigger.service.PoolService.getItemByCreateFun(FishUtils.triStarFishSignal, FishUtils.creatTriStarFish);
    };
    /**获取一只大四喜的Ui实例 */
    FishUtils.getFourFish = function () {
        return rigger.service.PoolService.getItemByCreateFun(FishUtils.fourFishSIgnal, FishUtils.creatFourFish);
    };
    /**
     * 回收
     * @param fish
     */
    FishUtils.recoverFish = function (fish) {
        fish.data = null;
        fish.removeFromParent();
        if (fish instanceof FUINormalFish_1.default) {
            return rigger.service.PoolService.recover(FishUtils.normalFishSignal, fish);
        }
        else if (fish instanceof FUITriStarFish_1.default) {
            return rigger.service.PoolService.recover(FishUtils.triStarFishSignal, fish);
        }
        else if (fish instanceof FUIFourFish_1.default) {
            return rigger.service.PoolService.recover(FishUtils.fourFishSIgnal, fish);
        }
        else {
            console.log(" Fish recovery failure.");
            console.log(fish);
            console.log(" Fish recovery failure.");
        }
    };
    // /**
    //  * 回收
    //  * @param fish 
    //  */
    // public static recoverNormalFish(fish: any) {
    //     // console.log(`recoverFish`);
    //     console.log(typeof(fish));
    //     console.log(fish instanceof FUINormalFish);
    //     fish.data = null;
    //     fish.removeFromParent();
    //     return rigger.service.PoolService.recover(FishUtils.normalFishSignal, fish);
    // }
    FishUtils.createNormalFish = function () {
        //实例
        var fish = FUINormalFish_1.default.createInstance();
        fish.displayObject.addComponent(NormalFish_1.default);
        return fish;
    };
    FishUtils.creatTriStarFish = function () {
        var fish = FUITriStarFish_1.default.createInstance();
        fish.displayObject.addComponent(TriStarFish_1.default);
        return fish;
    };
    FishUtils.creatFourFish = function () {
        var fish = FUIFourFish_1.default.createInstance();
        fish.displayObject.addComponent(FourFish_1.default);
        return fish;
    };
    /**
     * 普通鱼标识
     */
    FishUtils.normalFishSignal = 'NORMAL_FISH_SIGNAL';
    /**大三元标识 */
    FishUtils.triStarFishSignal = 'TRISTAR_FISH_SIGNAL';
    /**大四喜标识 */
    FishUtils.fourFishSIgnal = 'FOUR_FISH_SIGNAL';
    return FishUtils;
}());
exports.default = FishUtils;
},{"../../../fui/roomScene/FUIFourFish":126,"../../../fui/roomScene/FUINormalFish":132,"../../../fui/roomScene/FUITriStarFish":139,"../fishScript/FourFish":285,"../fishScript/NormalFish":286,"../fishScript/TriStarFish":288}],291:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var GoldUtils_1 = require("./GoldUtils");
var Gold = /** @class */ (function (_super) {
    __extends(Gold, _super);
    function Gold(url) {
        var _this = _super.call(this) || this;
        /**动画主体 */
        _this.ani = null;
        /**金币动画宽度 */
        _this.aniW = 0;
        /**金币动画高度 */
        _this.aniH = 0;
        /**起始位置 */
        _this.startPoint = null;
        /** 结束位置*/
        _this.endPoint = null;
        /**容器 */
        _this.context = null;
        _this.init(url);
        return _this;
    }
    Gold.prototype.init = function (url) {
        this.ani = GoldUtils_1.default.createGold(url);
        this.aniW = this.ani.width;
        this.aniH = this.ani.height;
    };
    /**设置数据 */
    Gold.prototype.setData = function (startPoint, endPoint, context) {
        this.startPoint = startPoint;
        this.endPoint = endPoint;
        this.context = context;
    };
    /**播放动画 */
    Gold.prototype.playAni = function () {
        return __awaiter(this, void 0, void 0, function () {
            var tween, lock, lockWaiter, tween2, tween3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.ani.pivotX = 0.5;
                        this.ani.pivotY = 0.5;
                        this.ani.rotation = 0;
                        this.ani.playing = true;
                        this.ani.setXY(this.startPoint.x, this.startPoint.y);
                        this.context.addChild(this.ani);
                        tween = riggerLayaSync.SyncTween.to(this.ani, { y: this.startPoint.y - 100 }, 250, Laya.Ease.linearNone, Laya.Handler.create(this, function () {
                            Laya.Tween.clearTween(tween);
                        }));
                        return [4 /*yield*/, tween.wait()];
                    case 1:
                        _a.sent();
                        tween = riggerLayaSync.SyncTween.to(this.ani, { y: this.startPoint.y }, 250, Laya.Ease.backIn);
                        return [4 /*yield*/, tween.wait()];
                    case 2:
                        _a.sent();
                        lock = new riggerIOC.TaskExecutorLock(2);
                        lockWaiter = lock.wait();
                        tween2 = Laya.Tween.to(this.ani, { y: this.endPoint.y, ScaleX: 0.2, ScaleY: 0.2, alpha: 0.5 }, 400, Laya.Ease.backIn, Laya.Handler.create(this, function () {
                            lock.done();
                        }));
                        tween3 = Laya.Tween.to(this.ani, { x: this.endPoint.x, }, 400, null, Laya.Handler.create(this, function () {
                            lock.done();
                        }));
                        return [4 /*yield*/, lockWaiter];
                    case 3:
                        _a.sent();
                        tween && Laya.Tween.clearTween(tween);
                        tween2 && Laya.Tween.clearTween(tween2);
                        tween3 && Laya.Tween.clearTween(tween3);
                        this.done();
                        this.destory();
                        return [2 /*return*/];
                }
            });
        });
    };
    Gold.prototype.startTask = function () {
        this.playAni();
        return this;
    };
    /**析构 */
    Gold.prototype.destory = function () {
        this.ani && this.ani.dispose();
        this.ani = null;
        this.startPoint = null;
        this.endPoint = null;
        this.recover();
        _super.prototype.dispose.call(this);
    };
    /**回收 */
    Gold.prototype.recover = function () {
        GoldUtils_1.default.recoverGold(this);
        return this;
    };
    return Gold;
}(riggerIOC.BaseWaitable));
exports.default = Gold;
},{"./GoldUtils":293}],292:[function(require,module,exports){
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var Gold_1 = require("./Gold");
var GoldUtils_1 = require("./GoldUtils");
var GoldAni = /** @class */ (function () {
    function GoldAni() {
        /**任务执行器 */
        this.task = null;
        /**金币原始位置 */
        this.pos = null;
        /**金币结束位置 */
        this.endPos = null;
        /**金币所需数量 */
        this.needCount = 0;
        /**容器 */
        this.context = null;
        /**金币组 */
        this.goldArr = [];
        /**资源路径 */
        this.url = '';
        this.init();
    }
    /**初始化 */
    GoldAni.prototype.init = function () {
        this.task = new riggerIOC.TaskExecutor();
    };
    /**设置数据 */
    GoldAni.prototype.setData = function (pos, endPos, needCount, url, context) {
        if (needCount === void 0) { needCount = 8; }
        this.pos = pos;
        this.endPos = endPos;
        this.url = url;
        this.context = context;
        this.needCount = needCount; //暂定8，需要根据鱼类型决定
    };
    /**开始播放 */
    GoldAni.prototype.play = function (cb) {
        return __awaiter(this, void 0, void 0, function () {
            var gold, pointArr, doneHandle, cancelHandle, lock, i, len;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        gold = null;
                        pointArr = GoldUtils_1.default.createPos(this.pos, this.needCount);
                        doneHandle = null;
                        cancelHandle = null;
                        lock = new riggerIOC.TaskExecutorLock(this.needCount);
                        lock.wait();
                        // 生成金币任务
                        for (i = 0, len = this.needCount; i < len; i++) {
                            // 设置单个完成回调
                            doneHandle = riggerIOC.Handler.create(this, function () {
                                lock.done();
                            });
                            // 设置单个取消回调
                            cancelHandle = riggerIOC.Handler.create(this, function (gold) {
                                gold.destory();
                                gold = null;
                                lock.cancel();
                            });
                            gold = new Gold_1.default(this.url);
                            gold.setData(pointArr[i], this.endPos, this.context);
                            this.goldArr.push(gold);
                            this.task.add(gold, doneHandle, null, cancelHandle, [gold]);
                        }
                        // console.log(`createCoinLength==${this.goldArr.length}`);
                        this.task.executeAsync(20);
                        return [4 /*yield*/, lock.wait()];
                    case 1:
                        _a.sent();
                        cb && cb.run();
                        this.clearGoldArr();
                        this.destory();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**清理金币组 */
    GoldAni.prototype.clearGoldArr = function () {
        var arr = this.goldArr;
        // console.log(`clearCoinLength==${arr.length}`);
        for (var i = 0, len = arr.length; i < len; i++) {
            arr[i] && arr[i].destory();
            arr[i] = null;
        }
        this.goldArr = null;
    };
    /**析构 */
    GoldAni.prototype.destory = function () {
        this.task = null;
        this.pos = null;
        this.endPos = null;
        this.context = null;
        this.goldArr = null;
    };
    return GoldAni;
}());
exports.default = GoldAni;
},{"./Gold":291,"./GoldUtils":293}],293:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GoldUtils = /** @class */ (function () {
    function GoldUtils() {
    }
    /**
     * 获取一只金币的Ui实例
     */
    GoldUtils.getGold = function () {
        return rigger.service.PoolService.getItemByCreateFun(GoldUtils.GoldSignal, GoldUtils.createGold);
    };
    /**
     * 回收
     * @param gold
     */
    GoldUtils.recoverGold = function (gold) {
        return rigger.service.PoolService.recover(GoldUtils.GoldSignal, gold);
    };
    GoldUtils.createGold = function (url) {
        // var gold = fairygui.UIPackage.createObject("entry", "goldAni_self").asMovieClip;
        var gold = fairygui.UIPackage.createObjectFromURL(url).asMovieClip;
        return gold;
    };
    /**
     * 生成金币位置组
     * pos 原始位置
     * len 金币个数（2 ，4 ，6， 8）
     */
    GoldUtils.createPos = function (pos, len) {
        var posArr = [];
        var tempGold = GoldUtils.createGold('ui://5xl6v9kdvv7ubm');
        var w = tempGold.width;
        var h = tempGold.height;
        var minNum = 4;
        var num = 0;
        var num2 = 1;
        var num3 = 0;
        var count = 0;
        for (var i = 0; i < len; i++) {
            if (len % 2 == 0 && len % 3 != 0) {
                if (count > 3) {
                    count = 0;
                }
                if (len > minNum) {
                    if (i >= len / 2) {
                        num = w;
                    }
                    else {
                        num = 0;
                    }
                }
                if (i % 2 == 0) {
                    num2 = -1;
                }
                else {
                    num2 = 1;
                }
                if (count < 2) {
                    num3 = 0;
                }
                else {
                    num3 = h * (-1);
                }
                var x = pos.x + (w / 2 + num) * num2;
                var y = pos.y + num3;
                count++;
            }
            else if (len % 3 == 0) {
                if (count > 2) {
                    count = 0;
                }
                if (count % 3 == 0) {
                    num2 = 0;
                }
                else if (count % 2 == 0) {
                    num2 = w;
                }
                else {
                    num2 = w * (-1);
                }
                if (i > 2) {
                    num3 = h * (-1);
                }
                else {
                    num3 = 0;
                }
                var x = pos.x + num2;
                var y = pos.y + num3;
                count++;
            }
            posArr.push(new Laya.Point(x, y));
        }
        return posArr;
    };
    /**
     * 金币标识
     */
    GoldUtils.GoldSignal = 'GOLD_SIGNAL';
    return GoldUtils;
}());
exports.default = GoldUtils;
},{}],294:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var FUInet_1 = require("../../fui/roomScene/FUInet");
var NetView = /** @class */ (function (_super) {
    __extends(NetView, _super);
    function NetView() {
        var _this = _super.call(this) || this;
        _this.netName = ["brdr_ycjm_icon_wang_di", "brdr_ycjm_icon_wang_zhong", "brdr_ycjm_icon_wang_gao"];
        return _this;
    }
    NetView.prototype.constructFromXML = function (xml) {
        _super.prototype.constructFromXML.call(this, xml);
    };
    NetView.prototype.init = function (bulletLv) {
        var idx;
        if (bulletLv < 10)
            idx = 0;
        else if (bulletLv < 100)
            idx = 1;
        else
            idx = 2;
        this.m_n0.url = "ui://roomScene/" + this.netName[idx];
        if (idx == 2)
            this.m_n1.visible = true;
        else
            this.m_n1.visible = false;
    };
    return NetView;
}(FUInet_1.default));
exports.NetView = NetView;
},{"../../fui/roomScene/FUInet":153}],295:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var FUInet_1 = require("../../fui/roomScene/FUInet");
var NetUtils = /** @class */ (function () {
    function NetUtils() {
    }
    ;
    /**
     * 获取捕捉网
     */
    NetUtils.getNet = function () {
        return rigger.service.PoolService.instance.getItemByCreateFun(NetUtils.NetSignal, NetUtils.createNet);
    };
    NetUtils.recoverNet = function (net) {
        net.removeFromParent();
        rigger.service.PoolService.instance.recover(NetUtils.NetSignal, net);
    };
    NetUtils.createNet = function () {
        var net = FUInet_1.default.createInstance();
        return net;
    };
    NetUtils.NetSignal = 'NET_SIGNAL';
    return NetUtils;
}());
exports.default = NetUtils;
},{"../../fui/roomScene/FUInet":153}],296:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var CommandCodes_1 = require("../../protocol/CommandCodes");
var protocolSignals = require("../../protocol/signals/signals");
var protocol = require("../../protocol/protocols/protocols");
var NetworkChannelNames_1 = require("../../definitions/NetworkChannelNames");
/**
* 心跳包协议插件
*/
///<reference path = "../../protocol/signals/BeatHeartRespSignal.ts" />
var HeartBeatProtocolPlugin = /** @class */ (function (_super) {
    __extends(HeartBeatProtocolPlugin, _super);
    function HeartBeatProtocolPlugin() {
        return _super.call(this) || this;
    }
    HeartBeatProtocolPlugin.prototype.doPing = function () {
        // console.log("ping");
        var req = new protocol.BeatHeartReq();
        rigger.service.NetworkService.instance.send(NetworkChannelNames_1.default.GameChannel, CommandCodes_1.default.PPBeatHeartReq, req);
    };
    HeartBeatProtocolPlugin.prototype.receivePong = function () {
        // console.log("receive pong");
        this.heartBeartRespSignal.on(this, this.onHeartBeartResp);
        // EventServiceUtil.addProtocolListener(CommandCodes.PPBeatHeartResp, this, this.onHeartBeartResp);
    };
    HeartBeatProtocolPlugin.prototype.cancelReceivePong = function () {
        this.heartBeartRespSignal.off(this, this.onHeartBeartResp);
        // EventServiceUtil.removeProtocolListener(CommandCodes.PPBeatHeartResp, this, this.onHeartBeartResp);
    };
    /**
      * 插件开始时的回调
      * @param resultHandler
      * @param startupArgs
      */
    HeartBeatProtocolPlugin.prototype.onStart = function (resultHandler, startupArgs) {
        resultHandler.success();
    };
    /**
      * 插件停止时的回调
      * @param resultHandler
      */
    HeartBeatProtocolPlugin.prototype.onStop = function (resultHandler) {
        resultHandler.success();
    };
    /**
      * 插件重启时的回调
      * @param resultHandler
      */
    HeartBeatProtocolPlugin.prototype.onRestart = function (resultHandler) {
        resultHandler.success();
    };
    HeartBeatProtocolPlugin.prototype.onHeartBeartResp = function (resp) {
        rigger.service.TimeService.instance.setServerTime(resp.serverSec * 1000);
        this.getOwner().doPong();
    };
    HeartBeatProtocolPlugin.pluginName = "HeartBeatProtocolPlugin";
    __decorate([
        riggerIOC.inject(protocolSignals.BeatHeartRespSignal)
    ], HeartBeatProtocolPlugin.prototype, "heartBeartRespSignal", void 0);
    HeartBeatProtocolPlugin = __decorate([
        rigger.utils.DecoratorUtil.register
    ], HeartBeatProtocolPlugin);
    return HeartBeatProtocolPlugin;
}(rigger.AbsServicePlugin));
exports.default = HeartBeatProtocolPlugin;
},{"../../definitions/NetworkChannelNames":64,"../../protocol/CommandCodes":271,"../../protocol/protocols/protocols":272,"../../protocol/signals/signals":273}],297:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var MyApplication_1 = require("../../MyApplication");
var Utils_1 = require("../../utils/Utils");
var ConnectService_1 = require("../../gameServices/connectService/ConnectService");
var DynamicLoadingView_1 = require("../../moduleContexts/assetsModule/views/loading/DynamicLoadingView");
/**
* 引擎启动插件
*/
var LayaEnginePlugin = /** @class */ (function (_super) {
    __extends(LayaEnginePlugin, _super);
    function LayaEnginePlugin() {
        return _super.call(this) || this;
    }
    /**
     * @description 当主逻辑服务启动引擎时的回调，可以使用插件进行扩展，扩展后，原方法将被替换
     * @extends rigger.utils.DecoratorUtil.makeExtendable(true)
     * @param {MainLogicServiceConfig} config 主逻辑服务的配置
     * @param {any} startupArgs
     * @returns @type void
     */
    LayaEnginePlugin.prototype.onStartEngine = function (config, startupArgs) {
        var app = MyApplication_1.default.instance;
        var mainLogicService = app.getRunningService(MainLogicService.serviceName);
        var cfg = mainLogicService.getConfig();
        fairygui.UIConfig.defaultFont = cfg.defaultFont;
        if (2 === cfg.renderMode) {
            Laya.init(cfg.width, cfg.height, cfg.webGL ? Laya.WebGL : null);
        }
        else {
            Laya3D.init(cfg.width, cfg.height);
        }
        Laya["Physics"] && Laya["Physics"].enable();
        // Laya["PhysicsDebugDraw"] && Laya["PhysicsDebugDraw"].enable(1);
        // Laya.enableDebugPanel();
        Laya.Stat.show(0, 0);
        // Laya.WorkerLoader.workerPath = 'libs/laya/worker.js';
        // Laya.WorkerLoader.enable = true;
        Laya.Mouse.cursor = "url('mouse.png') 35 35,auto";
        Laya.URL.rootPath = Laya.URL.basePath = "";
        Laya.stage.frameRate = cfg.frameRate;
        Laya.stage.scaleMode = cfg.scaleMode + "";
        Laya.stage.bgColor = cfg.backgroundColor;
        Laya.stage.screenMode = cfg.screenMode + "";
        Laya.stage.alignH = Laya.Stage.ALIGN_CENTER;
        Laya.stage.alignV = Laya.Stage.ALIGN_TOP;
        //Laya2.1.0 beta, 自行修复资源基础路径bug(等官方)
        // let location=Laya.Browser.window.location;
        // let pathName=location.pathname;
        // pathName=pathName.charAt(2)==':' ? pathName.substring(1):pathName;
        // Laya.URL.basePath = Laya.URL.getPath(location.protocol=="file:" ? pathName :location.protocol+"//"+location.host+location.pathname);
        // Common.TouchMoveFullScreen.instance().alreadyInGame();
        fairygui.GRoot.inst["needCheckPopups"] = true;
        Laya.stage.addChild(fairygui.GRoot.inst.displayObject);
        //初始化新的布局/适配
        var superLayer = new riggerLayout.LayoutLayer(new LayaTopContainer(Laya.stage));
        RiggerLayout.addDefaultLayer(superLayer);
        riggerLayout.GlobalSettings.realLayoutItemClass = LayaLayoutItem;
        //添加原生事件,用于报表页面的跳转
        document.body.addEventListener("mouseup", this.onMouseup.bind(this));
        document.body.addEventListener("touchend", this.onTouchend.bind(this));
        //注册房间加载界面
        MyApplication_1.default.instance.registerInGameLoadingView(DynamicLoadingView_1.default);
        // Laya.timer.loop(300, this, () => {
        // 	if(!(Laya.stage.width == Laya.Browser.clientWidth && Laya.stage.height == Laya.Browser.clientHeight)) {
        // 		Laya.stage.scaleMode = Laya.Stage.SCALE_FULL;
        // 		console.log(`fix the scaleMode`);
        // 	}
        // });
        return;
    };
    LayaEnginePlugin.prototype.onMouseup = function () {
        if (Utils_1.default.IS_SHOW_LOG) {
            var website = ConnectService_1.default.instance._getMetaValue("recordUrl");
            window.open(website, "_blank");
            Utils_1.default.IS_SHOW_LOG = false;
        }
    };
    LayaEnginePlugin.prototype.onTouchend = function () {
        if (Utils_1.default.IS_SHOW_LOG) {
            var website = ConnectService_1.default.instance._getMetaValue("recordUrl");
            window.open(website, "_blank");
            Utils_1.default.IS_SHOW_LOG = false;
        }
    };
    /**
      * 插件开始时的回调
      * @param resultHandler
      * @param startupArgs
      */
    LayaEnginePlugin.prototype.onStart = function (resultHandler, startupArgs) {
        resultHandler.success();
    };
    /**
      * 插件停止时的回调
      * @param resultHandler
      */
    LayaEnginePlugin.prototype.onStop = function (resultHandler) {
        resultHandler.success();
    };
    /**
      * 插件重启时的回调
      * @param resultHandler
      */
    LayaEnginePlugin.prototype.onRestart = function (resultHandler) {
        resultHandler.success();
    };
    LayaEnginePlugin.pluginName = "LayaEnginePlugin";
    LayaEnginePlugin = __decorate([
        rigger.utils.DecoratorUtil.register
    ], LayaEnginePlugin);
    return LayaEnginePlugin;
}(rigger.AbsServicePlugin));
exports.default = LayaEnginePlugin;
},{"../../MyApplication":48,"../../gameServices/connectService/ConnectService":160,"../../moduleContexts/assetsModule/views/loading/DynamicLoadingView":174,"../../utils/Utils":306}],298:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var DecoratorUtil_1 = require("../../utils/DecoratorUtil");
/**
* 网络的拼包和解包插件
*/
var ProtocolCodeAssemblerPlugin = /** @class */ (function (_super) {
    __extends(ProtocolCodeAssemblerPlugin, _super);
    function ProtocolCodeAssemblerPlugin() {
        var _this = _super.call(this) || this;
        _this.protocoBufferClassKey = "_proto_class_";
        return _this;
    }
    /**
      * 拼网络包
      * @param pkg
      * @param retPkg
      */
    ProtocolCodeAssemblerPlugin.prototype.assembleNetworkPackage = function (pkg, retPkg) {
        if (!rigger.utils.Utils.isArray(pkg.outterData))
            return pkg;
        if (pkg.outterData.length <= 0)
            return pkg;
        var code = pkg.outterData[0];
        var ret = new Laya.Byte();
        ret.endian = Laya.Socket.BIG_ENDIAN;
        ret.writeUint16(code);
        for (var i = 1; i < pkg.outterData.length; ++i) {
            ret.writeArrayBuffer(pkg.outterData[i]);
        }
        ret.pos = 0;
        retPkg.outterData = pkg.outterData = ret;
        return retPkg;
    };
    /**
      * 解网络包
      * @param pkg
      */
    ProtocolCodeAssemblerPlugin.prototype.unAssembleNetworkPackage = function (pkg, retPkg) {
        if (retPkg.outterData instanceof ArrayBuffer) {
            var data = new Laya.Byte(retPkg.outterData);
            data.endian = Laya.Socket.BIG_ENDIAN;
            var head = this.readHeader(data);
            data.clear();
            data.writeArrayBuffer(pkg.outterData, 2);
            // 再根据协议头转换出protoBuffer类
            var temp = data.buffer;
            temp[this.protocoBufferClassKey] = DecoratorUtil_1.default.getProtocolResponseClassName(head);
            retPkg.innerData = [head, temp];
        }
        return retPkg;
    };
    /**
      * 插件开始时的回调
      * @param resultHandler
      * @param startupArgs
      */
    ProtocolCodeAssemblerPlugin.prototype.onStart = function (resultHandler, startupArgs) {
        resultHandler.success();
    };
    /**
      * 插件停止时的回调
      * @param resultHandler
      */
    ProtocolCodeAssemblerPlugin.prototype.onStop = function (resultHandler) {
        resultHandler.success();
    };
    /**
      * 插件重启时的回调
      * @param resultHandler
      */
    ProtocolCodeAssemblerPlugin.prototype.onRestart = function (resultHandler) {
        resultHandler.success();
    };
    ProtocolCodeAssemblerPlugin.prototype.readHeader = function (data) {
        data.pos = 0;
        return data.getUint16();
    };
    ProtocolCodeAssemblerPlugin.pluginName = "ProtocolCodeAssemblerPlugin";
    ProtocolCodeAssemblerPlugin = __decorate([
        rigger.utils.DecoratorUtil.register
    ], ProtocolCodeAssemblerPlugin);
    return ProtocolCodeAssemblerPlugin;
}(rigger.AbsServicePlugin));
exports.default = ProtocolCodeAssemblerPlugin;
},{"../../utils/DecoratorUtil":302}],299:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var DecoratorUtil_1 = require("../../utils/DecoratorUtil");
/**
* name
*/
var NetserviceSignalRouingPlugin = /** @class */ (function (_super) {
    __extends(NetserviceSignalRouingPlugin, _super);
    function NetserviceSignalRouingPlugin() {
        return _super.call(this) || this;
    }
    NetserviceSignalRouingPlugin.prototype.route = function (channelName, pkg) {
        // let evtService:EventService = EventService.instance;
        var code = pkg.innerData[0];
        var signal = DecoratorUtil_1.default.getProtocolResponseSignal(code);
        signal.dispatch(pkg.innerData[1]);
        // console.log(code);
        // if(code == 19) console.log(pkg.innerData[1]);
        // evtService.dispatchEvent(pkg.innerData[0], NetworkService.serviceName, pkg.innerData[1], channelName);
    };
    /**
      * 插件开始时的回调
      * @param resultHandler
      * @param startupArgs
      */
    NetserviceSignalRouingPlugin.prototype.onStart = function (resultHandler, startupArgs) {
        resultHandler.success();
    };
    /**
      * 插件停止时的回调
      * @param resultHandler
      */
    NetserviceSignalRouingPlugin.prototype.onStop = function (resultHandler) {
        resultHandler.success();
    };
    /**
      * 插件重启时的回调
      * @param resultHandler
      */
    NetserviceSignalRouingPlugin.prototype.onRestart = function (resultHandler) {
        resultHandler.success();
    };
    NetserviceSignalRouingPlugin.pluginName = "NetserviceSignalRouingPlugin";
    NetserviceSignalRouingPlugin = __decorate([
        rigger.utils.DecoratorUtil.register
    ], NetserviceSignalRouingPlugin);
    return NetserviceSignalRouingPlugin;
}(rigger.AbsServicePlugin));
exports.default = NetserviceSignalRouingPlugin;
},{"../../utils/DecoratorUtil":302}],300:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var SkeletonAnimationCreater_1 = require("../utils/SkeletonAnimationCreater");
/**
* Avatar
* 为骨骼动画的创建和基本操作提供支持
*/
var Avatar = /** @class */ (function () {
    function Avatar(dataPath, handler) {
        this._body = null;
        this._bodyScaleX = 1;
        this._bodyScaleY = 1;
        this._handler = null;
        this._direction = 1;
        this._playbackRate = 1;
        dataPath && this.init(dataPath, handler);
    }
    Object.defineProperty(Avatar.prototype, "body", {
        get: function () {
            return this._body;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Avatar.prototype, "isLoop", {
        get: function () {
            return this._isLoop;
        },
        set: function (value) {
            this._isLoop = value;
        },
        enumerable: true,
        configurable: true
    });
    Avatar.prototype.init = function (dataPath, handler) {
        if (this._dataPath == dataPath) {
            // 已经加载过或正在加载过该资源
            // 更新回调
            this._addCompleteHandler(handler);
            // 检查骨骼资源是否已经加载,如果已经加载则直接调用一次回调
            if (this._body) {
                this._onSkeletonCreated(this._body);
            }
        }
        else {
            this._dataPath = dataPath;
            this._createSkeleton(handler);
        }
    };
    /**
     * 切换某部位的骨骼动画资源
     */
    Avatar.prototype.switchSkinSlotRes = function (slotName, res) {
        if (!res) {
            // 当卸载时装时，传空资源即可
            this._body.setSlotSkin(slotName, null);
            return;
        }
        switch (res.constructor) {
            case String:
                var wt = Laya.loader.getRes(res);
                this._body.setSlotSkin(slotName, wt);
                break;
            case laya.resource.Texture:
                this._body.setSlotSkin(slotName, res);
                break;
        }
    };
    /**
     * 析构
     */
    Avatar.prototype.dispose = function (destroyChild) {
        if (destroyChild === void 0) { destroyChild = true; }
        this.recover();
        if (this._body) {
            this._body.destroy(destroyChild);
            this._body = null;
        }
    };
    /**
     * 回收,与析构的区别是，回收不析构动画，以供下次使用
     */
    Avatar.prototype.recover = function () {
        this._handler = null;
        this._completeHandler.recover();
        this._completeHandler = null;
        if (this._body) {
            this._body.paused();
            this._body.offAll();
            this._body.removeSelf();
        }
    };
    Avatar.prototype.setDirection = function (direction) {
        this._direction = direction;
        if (!this._body) {
            return;
        }
        this._setDirection();
    };
    Avatar.prototype.scale = function (x, y) {
        this._bodyScaleX = x;
        this._bodyScaleY = y;
        if (this._body) {
            this._body.scale(x, y);
        }
        return this;
    };
    Avatar.prototype.play = function (nameOrIndex, loop, handler) {
        if (loop === void 0) { loop = false; }
        this._curAction = nameOrIndex;
        this._isLoop = loop;
        this._handler = handler;
        this._play();
        return this;
    };
    Avatar.prototype.changeSkin = function (skinNameOrIndex) {
        this._curSkin = skinNameOrIndex;
        this._changeSkin();
        return this;
    };
    Avatar.prototype.addSkeletonEvent = function (caller, handler, args) {
        this._body.once(Laya.Event.LABEL, caller, handler);
    };
    /**
     * 缓存该骨骼动画指定槽位的资源(不需要缓存了，因为还原时，直接传null即可)
     */
    Avatar.prototype._cacheDefaultSlotRes = function (slotName) {
        var _a;
        var map = Avatar._defaultSkinSlotResMap[this._dataPath];
        if (!map) {
            map = (_a = {}, _a[slotName] = null, _a);
            Avatar._defaultSkinSlotResMap[this._dataPath] = map;
        }
        var defaultTexture = map[slotName];
        if (!defaultTexture) {
            var slot = this._body.getSlotByName(slotName);
            var texture = void 0;
            if (slot) {
                texture = slot.currTexture;
                map[slotName] = texture;
            }
        }
    };
    /**
     * 获取已经缓存的槽位资源
     */
    Avatar.prototype._getCachedDefaultSlotRes = function (slotName) {
        var map = Avatar._defaultSkinSlotResMap[this._dataPath];
        if (!map) {
            return null;
        }
        return map[slotName];
    };
    Avatar.prototype._addCompleteHandler = function (handler) {
        if (handler) {
            this._completeHandler && this._completeHandler.recover();
            this._completeHandler = null;
            this._completeHandler = handler;
        }
    };
    Avatar.prototype._createSkeleton = function (handler) {
        this._addCompleteHandler(handler);
        var creater = new SkeletonAnimationCreater_1.default();
        creater.create(this._dataPath, this, this._onSkeletonCreated);
    };
    Avatar.prototype._onSkeletonCreated = function (ani) {
        if (this._body && this._body != ani) {
            this._body.offAll();
            this._body.removeSelf();
            this._body.destroy(true);
            this._body = null;
        }
        this._body = ani;
        this._body.visible = true;
        this._play();
        this._changeSkin();
        this._body.playbackRate(this._playbackRate);
        this._body.scale(this._bodyScaleX, this._bodyScaleY);
        this._setDirection();
        // 回调
        this._completeHandler && this._completeHandler.runWith(this);
    };
    Avatar.prototype._setDirection = function () {
        if (this._direction > 0) {
            if (this._body.scaleX < 0) {
                this._body.scale(this._body.scaleX * (-1), this._body.scaleY);
            }
        }
        else {
            if (this._body.scaleX > 0) {
                this._body.scale(this._body.scaleX * (-1), this._body.scaleY);
            }
        }
    };
    Object.defineProperty(Avatar.prototype, "playbackRate", {
        /**
         * 回放速率;
         */
        get: function () {
            return this._playbackRate;
        },
        set: function (rate) {
            this._playbackRate = rate;
            if (this._body)
                this._body.playbackRate(this._playbackRate);
        },
        enumerable: true,
        configurable: true
    });
    // private _standardPlaybackRate:number = 30;
    // private _adjustPlaybackRate(costTime:number)
    // {
    //     // console.log("adjust rate, now:" + TimeManager.instance.now + ",cost:" + costTime);
    //     var f = 1000 / costTime;
    //     this._body.playbackRate(f);
    // }
    Avatar.prototype._changeSkin = function () {
        if (!this._body) {
            return;
        }
        if (!this._curSkin) {
            return;
        }
        this._body.showSkinByName(this._curSkin);
    };
    Avatar.prototype._play = function () {
        if (this._body == null || this._body.destroyed) {
            return;
        }
        this._body.once(Laya.Event.STOPPED, this, this._onStopped);
        if (this._handler && !this.isLoop) {
            this._body.once(Laya.Event.STOPPED, this, this._onStopped);
        }
        // console.log(`avtar==${this._dataPath}`);
        this._body.play(this._curAction, this.isLoop);
    };
    Avatar.prototype._eventTest = function (e) {
        console.log("test event");
    };
    Avatar.prototype._onStopped = function () {
        this._handler && this._handler.run();
    };
    /**
     * 骨骼动画各个时装槽位的默认资源映射,当首次进行时装显示时进行初始化
     * {skinName:{"slotName":url}}
     */
    Avatar._defaultSkinSlotResMap = {};
    return Avatar;
}());
exports.default = Avatar;
},{"../utils/SkeletonAnimationCreater":303}],301:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var UINameConstants_1 = require("../configs/UINameConstants");
var FUILoadingView_1 = require("../fui/loading/FUILoadingView");
var AssetsPackageGroup_1 = require("../definitions/AssetsPackageGroup");
/**
 * AssertsUtils
 */
var AssetsUtils = /** @class */ (function () {
    function AssetsUtils() {
    }
    /**
    * 加载初始资源
    */
    AssetsUtils.loadInitialAssets = function (caller, method, args) {
        if (args === void 0) { args = null; }
        // 加载登陆所需资源
        rigger.service.AssetsPackageService.instance.loadPackageByGroup(AssetsPackageGroup_1.default.initial, rigger.RiggerHandler.create(caller, method, args));
    };
    AssetsUtils.loadPreloadingAssets = function (completeHandler, progressHandler) {
        // 加载及初始化必须的UI资源
        this._loadPreloadingPackages(completeHandler, progressHandler);
    };
    AssetsUtils._loadPreloadingPackages = function (completeHandler, progressHandler) {
        // modules.push(Application.instance.mainModuleName);
        rigger.service.AssetsPackageService.instance.loadPackageByGroup(AssetsPackageGroup_1.default.preloading, completeHandler, progressHandler);
    };
    /**
     * 计算应该使用的loading名的包名（如果子游戏有自己的Loading界面，则使用子游戏自己的，否则使用公共的Loading界面)
     */
    AssetsUtils._calculateLoadingPackageName = function () {
        // if (Application.instance.loadingModuleName) return Application.instance.loadingModuleName;
        return UINameConstants_1.default.FUI_PACKAGE_NAME_LOADING;
    };
    /**
     * 根据UI路径获取UI包名
     * path:packageName/uiName
     */
    AssetsUtils.getUIPackageName = function (path) {
        var arr = path.split("/");
        if (arr && arr.length >= 2) {
            return arr[arr.length - 2];
        }
        return null;
    };
    /**
     * 根据UI路径获取UI名称
     * @public
     * @static
     * @method getUIName
     * @param {strArr} path UI的路径
     */
    AssetsUtils.getUIName = function (path) {
        var arr = path.split("/");
        if (arr && arr.length >= 2) {
            return arr[arr.length - 1];
        }
        return null;
    };
    /**
     * 根据UI所在包名和UI名生成UI的真实名称
     */
    AssetsUtils.makeUIName = function (packageName, uiName) {
        return packageName + "/" + uiName;
    };
    /**
     * 生成数据模块
     *
     * @public
     * @static
     * @method makeDataModule
     * @param {string} modulePreFix 数据模拟的通用前缀
     * @param {strArr} [gameId=null] 游戏ID，如果不传或传入NULL，则自动获取当前的游戏ID
     * @return {any}    返回该数据模块的类定义
     */
    AssetsUtils.makeDataModule = function (modulePreFix, gameId) {
        var moduleName;
        moduleName = modulePreFix;
        try {
            return eval(moduleName);
        }
        catch (e) {
            return null;
        }
    };
    /**
    * 将一个fairyGUI格式的URL转换成一个普通格式的URL
    *
    * @method convertFairyUrl
    * @static
    * @public
    * @param {string} url fairygui 格式的URL地址
    * @returns {string} 普通格式的URL地址
    */
    AssetsUtils.convertFairyUrl = function (url) {
        var item = fairygui.UIPackage.getItemByURL(url);
        var customId = item.owner.customId;
        // 去掉custoId中最后的文件名,提取出路径
        var strArr = customId.split("/");
        strArr.pop();
        var path = strArr.join("/");
        return "" + item.file;
    };
    /**
     * 获取游戏的背景音乐，并以普通URL的格式返回
     * @public
     * @static
     * @method makeBGMUrl
     * @return {string} 返回普通格式的游戏背景音乐URL
     */
    // public static makeBGMUrl():string
    // {
    //     return AssetsUtils.makeSoundUrl(AssetsConfig.GAME_BACK_MUSIC);
    // }
    /**
     * 生成指定名称的声音的URL，此URL是一个普通格式的URL（非fairygui格式)
     *
     * @public
     * @static
     * @method makeSoundUrl
     * @param {strArr} soundName 声音的名称，一般定义在AssetsConfigs中
     * @return {string} 一个普通格式的路径地址，可以供LayaBox使用
     */
    AssetsUtils.makeSoundUrl = function (soundName, pkgName) {
        var fairyguiUrl = fairygui.UIPackage.getItemURL(pkgName, soundName);
        if (!fairyguiUrl)
            return null;
        return AssetsUtils.convertFairyUrl(fairyguiUrl);
    };
    /**
     * 获取加载界面的URL
     */
    AssetsUtils.makeLoadingViewUrl = function () {
        // if(Application.instance.loadingModule)
        // {
        //     return Application.instance.loadingModule.FUILoadingView.URL;
        // }
        return FUILoadingView_1.default.URL;
    };
    /**
     * 生成包路径
     */
    AssetsUtils.makePackageFullName = function (packageName) {
        var subDir = "Common" === packageName || "Loading" === packageName || "SlotLogUI" === packageName ? AssetsUtils.UICommonPackageUrlPath : AssetsUtils.UIPackageUrlPath;
        return subDir + "/" + packageName + "/" + packageName;
    };
    AssetsUtils.makeLineSign = function (lineId) {
        return this._linePre + lineId;
    };
    /**获取游戏路径**/
    AssetsUtils.getUrl = function (dir, fileName, format, direct) {
        if (format === void 0) { format = ".png"; }
        if (direct === void 0) { direct = false; }
        return "res/" + dir + "/" + fileName + format;
    };
    /**获取游戏资源**/
    AssetsUtils.getAssetAtlas = function (name, uiPackage) {
        var itemMap = uiPackage["_itemsByName"];
        var itemPackage = itemMap[name];
        var sprites = uiPackage["_items"]; //uiPackage["_sprites"];
        var assets = [];
        for (var k in sprites) {
            var item = sprites[k];
            if (item.file == null || item.file.indexOf(itemPackage.id) == -1) {
                continue;
            }
            //let asset:any = sprites[k];
            var atlasName = item["file"];
            atlasName = this.getUrl("fui/" + uiPackage.name, uiPackage.name + "@" + atlasName, "");
            // if (assets.indexOf(atlasName) != -1)
            // {
            //   continue;
            // }
            assets.push(atlasName);
        }
        return assets;
    };
    AssetsUtils.getPackageRes = function (packageName, fileName) {
        // fairygui.UIPackage.getItemByURL()
        return fairygui.UIPackage.getItemURL(packageName, fileName);
    };
    /**释放包的资源**/
    AssetsUtils.removeResByPackage = function (name, fun, force) {
        if (force === void 0) { force = false; }
        var arry = fun.runWith(name);
        for (var _i = 0, arry_1 = arry; _i < arry_1.length; _i++) {
            var item = arry_1[_i];
            this.removeResUrl(item.url, force);
        }
    };
    /**url释放资源**/
    AssetsUtils.removeResUrl = function (url, force) {
        if (force === void 0) { force = false; }
        Laya.loader.clearRes(url);
    };
    AssetsUtils.UICommonPackageUrlPath = "res/common";
    AssetsUtils.UIPackageUrlPath = "res/fui";
    AssetsUtils.protoBufferPathHead = "res/protoBuffer/";
    AssetsUtils._linePre = "__LINE_";
    return AssetsUtils;
}());
exports.default = AssetsUtils;
},{"../configs/UINameConstants":56,"../definitions/AssetsPackageGroup":61,"../fui/loading/FUILoadingView":104}],302:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CommandCodes_1 = require("../protocol/CommandCodes");
/**
 * Decorator
 */
var DecoratorUtil = /** @class */ (function () {
    function DecoratorUtil(parameters) {
    }
    /**
     * 反向映射装饰器,即以字段的值为键，以字段的键为值建立一个新的字段，只推荐常量用
     */
    DecoratorUtil.retrievAble = function (v) {
        return function (target, keyStr) {
            // console.log(`key str:${keyStr}, v:${v}`);
            v = v || target[keyStr];
            target[v] = keyStr;
        };
    };
    /**
     * 协议的请求装饰器
     */
    DecoratorUtil.protocolRequest = function (spec) {
        return Reflect.metadata("protocol_request", spec);
    };
    /**
     * 协议的应答装饰器
     */
    DecoratorUtil.protocolResponse = function (spec) {
        return Reflect.metadata("protocol_response", spec);
    };
    DecoratorUtil.protocolResponseSignal = function (signalCls) {
        var signal = new signalCls();
        riggerIOC.InjectionBinder.instance.bind(signalCls).toValue(signal);
        return Reflect.metadata("protocol_response_signal", signal);
    };
    /**
     * 协议的协议名装饰器
     */
    DecoratorUtil.protocolName = function (name) {
        return Reflect.metadata("protocol_name", name);
    };
    /**
     * 从元数据中获取协议号对应的请求类名
     */
    DecoratorUtil.getProtocolRequestClassName = function (code) {
        return Reflect.getMetadata("protocol_request", CommandCodes_1.default, CommandCodes_1.default[code]);
    };
    // public getMetaData(target:any, )
    /**
     * 从元数据中获取协议号对应的应答类名
     */
    DecoratorUtil.getProtocolResponseClassName = function (code) {
        // console.log(`get protocol cls, code:${code} ret:${Reflect.getMetadata("protocol_response", CommandCodes, CommandCodes[code])}`);
        return Reflect.getMetadata("protocol_response", CommandCodes_1.default, CommandCodes_1.default[code]);
    };
    DecoratorUtil.getProtocolResponseSignal = function (code) {
        return Reflect.getMetadata("protocol_response_signal", CommandCodes_1.default, CommandCodes_1.default[code]);
    };
    /**
     * 获取协议号对应的协议文件名
     */
    DecoratorUtil.getProtocolName = function (code) {
        // console.log(`get protocol name, ret:${Reflect.getMetadata("protocol_name", CommandCodes, CommandCodes[code])}`);
        return Reflect.getMetadata("protocol_name", CommandCodes_1.default, CommandCodes_1.default[code]);
    };
    return DecoratorUtil;
}());
exports.default = DecoratorUtil;
},{"../protocol/CommandCodes":271}],303:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * AnimationCreater
 */
var SkeletonAnimationCreater = /** @class */ (function () {
    function SkeletonAnimationCreater() {
        this._dataPath = null;
        this._factory = new laya.ani.bone.Templet();
        this._listener = null;
        this._caller = null;
    }
    SkeletonAnimationCreater.prototype.create = function (dp, caller, listener) {
        this._dataPath = dp;
        this._listener = listener;
        this._caller = caller;
        this._create();
    };
    SkeletonAnimationCreater.prototype._create = function () {
        if (this._dataPath == null) {
            return;
        }
        this._factory.on(laya.events.Event.COMPLETE, this, this._onParseCompleted);
        this._factory.loadAni(this._dataPath);
    };
    SkeletonAnimationCreater.prototype._onParseCompleted = function () {
        if (null == this._listener) {
            return;
        }
        this._listener.apply(this._caller, [this._factory.buildArmature(1)]);
    };
    return SkeletonAnimationCreater;
}());
exports.default = SkeletonAnimationCreater;
},{}],304:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var UIManager_1 = require("../manager/UIManager");
var ScreenMode_1 = require("../definitions/ScreenMode");
var TouchMoveFullScreen = /** @class */ (function () {
    function TouchMoveFullScreen() {
        this._portraitConentHeigth = -1;
        this._horizontalConentHeigth = -1;
        this._isFull = false;
        this._touchStatus = false;
        this._isFocus = -1;
        this._isblur = -1;
        /**
         * 上次的屏幕模式
         */
        this._lastScreenMode = ScreenMode_1.ScreenMode.None;
        /**
         * 图片预加载
         */
        // if(document.images)
        // {
        //     let img1 = new Image();
        //     img1.src = "res/arrow.png";
        // }
        // Laya.loader.load("arrow.png", Laya.Handler.create(this, this._oninit));
    }
    TouchMoveFullScreen.instance = function () {
        if (this._inst == null) {
            this._inst = new TouchMoveFullScreen();
        }
        return this._inst;
    };
    /**
     * 置顶加载界面
     */
    // public topLoadingView()
    // {
    //     Laya.timer.frameLoop(1, this, this._makeTop);   
    // }
    // private _makeTop()
    // {
    //     // document.body.scrollTop = document.documentElement.scrollTop = 0;   
    //     // window.scrollTo(0, 0);
    //     document.getElementById("layaContainer").scrollTop = 0;       
    // }
    /**
     * 全屏遮罩
     */
    TouchMoveFullScreen.prototype.alreadyInGame = function () {
        // Laya.timer.clear(this, this._makeTop);
        if (!Laya.Browser.onMobile)
            return;
        Laya.loader.load("arrow.png", Laya.Handler.create(this, this._oninit));
    };
    TouchMoveFullScreen.prototype._oninit = function () {
        var userAgent = navigator.userAgent.toLowerCase();
        var onFirefox = userAgent.indexOf("firefox") != -1;
        var onHuaWei = userAgent.indexOf("huawei") != -1;
        var onUcbrowser = userAgent.indexOf("ucbrowser") != -1 || userAgent.indexOf("ucweb") != -1;
        var onQHBrowser = userAgent.indexOf("qhbrowser") != -1 || userAgent.indexOf("qihoobrowser") != -1;
        var onOpera = userAgent.indexOf("opera") != -1;
        var isAppleWebkit = userAgent.indexOf("applewebkit") != -1;
        var isAdrChrome = userAgent.indexOf("chrome") != -1;
        var onQQ = userAgent.indexOf("qq") != -1;
        var isCompanyBrowser = userAgent.indexOf("browser_type/android_app") != -1;
        var onSamSung = userAgent.indexOf("samsungbrowser") != -1;
        var onXiaoMi = userAgent.indexOf("miuibrowse") != -1;
        // alert(userAgent);
        if (Laya.Browser.onMQQBrowser || Laya.Browser.onWeiXin || onFirefox || onUcbrowser || onOpera || onQHBrowser || onQQ || onSamSung || onXiaoMi)
            return;
        if (Laya.Browser.onPC || !navigator.userAgent)
            return;
        if (isCompanyBrowser)
            return;
        // if(onHuaWei) return;
        if (window.navigator["standalone"]) {
            if (document.getElementById("maskDiv")) {
                document.getElementById("maskDiv").style.visibility = "hidden";
                return;
            }
            else
                return;
        }
        /**
         * 全屏处理
         * ios: safari\chrome
         * Andriod: chrome  （安卓端qq浏览器通过meta标签强制全屏）
         */
        if (Laya.Browser.onSafari || (isAppleWebkit && Laya.Browser.onIOS) || (Laya.Browser.onAndroid && isAdrChrome)) {
            this._layaContainer = Laya.Browser.getElementById("layaContainer");
            this._layaCanvas = Laya.Browser.getElementById("layaCanvas");
            // let manifest = Laya.loader.getRes("manifest.json");
            // let dir:string = manifest && Application.instance.config.resVersionAvailable ? manifest["res/arrow.png"]: "";
            // alert("dir:" + dir);
            // console.log("arrow png dir:" + `<br /><img src="${dir}/res/arrow.png" /><br />向上滑动可全屏游戏`);
            this._maskDiv = document.createElement("div");
            this._maskDiv.innerHTML = "<br /><img src=\"arrow.png\" /><br />\u5411\u4E0A\u6ED1\u52A8\u53EF\u5168\u5C4F\u6E38\u620F"; // "向上滑动可全屏游戏"
            this._maskDiv.setAttribute("style", "position:absolute; text-align:center; font-size:20px; color:#ffffff; left:0px; top:0px; background:rgba(0, 0, 0, 0.5);");
            this._maskDiv.setAttribute("id", "maskDiv");
            this._maskDiv.onselectstart = function () { return false; };
            this._layaContainer.appendChild(this._maskDiv);
            window.scroll(0, 0);
            if (Laya.Browser.onIOS) {
                document.body.onscroll = function (event) {
                    if ( /*document.body.scrollTop<0 || */TouchMoveFullScreen.IS_SHOW_MASK_DIV == false) {
                        TouchMoveFullScreen.instance().delayScroll(100, 0, 0);
                    }
                };
            }
            /**
             * 触摸事件
             */
            document.addEventListener('touchstart', this._onTouchStart, false);
            document.addEventListener("touchmove", this._touchMoves, false);
            document.addEventListener("touchend", this._touchEnd);
            /**
             * 手势事件
             */
            // document.addEventListener('gesturestart', this._onGesture, false);
            // document.addEventListener('gesturechange', this._onGesture, false);
            // document.addEventListener('gestureend', this._onGesture, false);
            /**
             * 浏览器焦点事件
             */
            var screenModeNow_1;
            // Laya.stage.on(Laya.Event.FOCUS,this,function(){
            //     console.log("before" + screenModeNow);
            //     console.log("now" + Common.this.getScreenMode());
            // });
            // Laya.stage.on(Laya.Event.BLUR,this,function(){
            //     screenModeNow = Common.this.getScreenMode();
            // });
            window.onfocus = function (e) {
                // Laya.timer.once(150, this, function(){
                // console.log("before" + screenModeNow);
                // console.log("now" + Common.this.getScreenMode());
                if (TouchMoveFullScreen.instance()._isFocus === -1)
                    return;
                else if (TouchMoveFullScreen.instance()._isFocus === 0)
                    TouchMoveFullScreen.instance()._isFocus = 1;
                // else if(Common.TouchMoveFullScreen.instance()._isFocus === 2) return;
                else if (TouchMoveFullScreen.instance()._isFocus === 1)
                    return;
                // })
            };
            window.onblur = function (e) {
                TouchMoveFullScreen.instance()._isblur = 0;
                screenModeNow_1 = TouchMoveFullScreen.instance().getScreenMode();
                if (TouchMoveFullScreen.instance()._isFocus === -1)
                    TouchMoveFullScreen.instance()._isFocus = 0;
                else if (TouchMoveFullScreen.instance()._isFocus === 1)
                    return;
                // Common.TouchMoveFullScreen.instance()._isFocus = 2;
                // else if(Common.TouchMoveFullScreen.instance()._isFocus === 2) return;
            };
            this._onResizeHandle();
            Laya.stage.on(laya.events.Event.RESIZE, this, this._onResizeHandle);
        }
    };
    // private _onGesture(event)
    // {
    //     switch(event.type)
    //     {
    //         case "gesturestart":
    //             console.log("start");
    //             event.type = null;
    //             event.stopPropagation();
    //             event.preventDefault();
    //             break;
    //         case "gesturechange":
    //             console.log("change");
    //             event.type = null;
    //             event.stopPropagation();
    //             event.preventDefault();
    //             break;
    //         case "gestureend":
    //             console.log("end");
    //             event.type = null;
    //             event.stopPropagation();
    //             event.preventDefault();
    //             break;
    // }
    //     }
    TouchMoveFullScreen.prototype._onTouchStart = function (event) {
        TouchMoveFullScreen.instance()._touchStatus = true;
        if (event.touches.length > 1) {
            event.stopPropagation();
            event.preventDefault();
        }
    };
    TouchMoveFullScreen.prototype._touchMoves = function (event) {
        TouchMoveFullScreen.instance()._touchStatus = true;
        if (event.touches.length > 1) {
            event.stopPropagation();
            event.preventDefault();
        }
    };
    TouchMoveFullScreen.prototype._touchEnd = function () {
        setTimeout(function () {
            var documentThis = TouchMoveFullScreen.instance();
            // console.log(documentThis._isblur);
            if (!Laya.Browser.onSafari) {
                if (documentThis.getScreenMode() === ScreenMode_1.ScreenMode.Portrait) {
                    if ((documentThis._isFull === false && documentThis._portraitConentHeigth === -1) || (documentThis._isFocus === 1 && documentThis._isblur === 1 && documentThis._portraitConentHeigth === -1)) {
                        documentThis._portraitConentHeigth = document.documentElement.clientHeight;
                    }
                    if (documentThis._portraitConentHeigth != -1 && documentThis._portraitConentHeigth > document.documentElement.clientHeight) {
                        documentThis._portraitConentHeigth = document.documentElement.clientHeight;
                    }
                }
                else {
                    if ((documentThis._isFull === false && documentThis._horizontalConentHeigth === -1) || (documentThis._isFocus === 1 && documentThis._isblur === 1 && documentThis._horizontalConentHeigth === -1)) {
                        documentThis._horizontalConentHeigth = document.documentElement.clientHeight;
                    }
                    if (documentThis._horizontalConentHeigth != -1 && documentThis._horizontalConentHeigth > document.documentElement.clientHeight) {
                        documentThis._horizontalConentHeigth = document.documentElement.clientHeight;
                    }
                }
                if (documentThis.getScreenMode() === ScreenMode_1.ScreenMode.Portrait) {
                    if (Laya.Browser.clientHeight > documentThis._portraitConentHeigth || (documentThis._isFull === true && documentThis._portraitConentHeigth === -1)) {
                        documentThis._showMaskDiv(false);
                        documentThis._isFull = true;
                        // document.body.scrollTop = document.documentElement.scrollTop = 0;
                        window.scroll(0, 0);
                    }
                    else {
                        documentThis._showMaskDiv(true);
                        documentThis._isFull = false;
                        // document.body.scrollTop = document.documentElement.scrollTop = 0;
                        window.scroll(0, 0);
                    }
                }
                else {
                    if (Laya.Browser.clientHeight > documentThis._horizontalConentHeigth || (documentThis._isFull === true && documentThis._horizontalConentHeigth === -1)) {
                        documentThis._showMaskDiv(false);
                        documentThis._isFull = true;
                        // document.body.scrollTop = document.documentElement.scrollTop = 0;
                        window.scroll(0, 0);
                    }
                    else {
                        documentThis._showMaskDiv(true);
                        documentThis._isFull = false;
                        // document.body.scrollTop = document.documentElement.scrollTop = 0;
                        window.scroll(0, 0);
                    }
                }
            }
            else {
                if (Laya.Browser.clientHeight > document.documentElement.clientHeight) {
                    documentThis._showMaskDiv(false);
                    documentThis._isFull = true;
                    // document.body.scrollTop = document.documentElement.scrollTop = 0;
                    window.scroll(0, 0);
                }
                else {
                    documentThis._showMaskDiv(true);
                    documentThis._isFull = false;
                    // document.body.scrollTop = document.documentElement.scrollTop = 0;
                    window.scroll(0, 0);
                }
                var top_1 = Laya.Browser.clientHeight - document.documentElement.clientHeight;
                if (Laya.Browser.onSafari && documentThis.getScreenMode() === ScreenMode_1.ScreenMode.Landscape && top_1 >= 0) {
                    documentThis._showMaskDiv(false);
                    documentThis._isFull = true;
                    // document.body.scrollTop = document.documentElement.scrollTop = 0;
                    window.scroll(0, 0);
                }
            }
            TouchMoveFullScreen.instance()._touchStatus = false;
            TouchMoveFullScreen.instance()._isblur = -1;
        }, TouchMoveFullScreen.instance()._isAppleChrome() ? 750 : 250);
    };
    TouchMoveFullScreen.prototype._isAppleChrome = function () {
        return (this.getScreenMode() === ScreenMode_1.ScreenMode.Portrait && this._portraitConentHeigth === -1 && !Laya.Browser.onSafari && !Laya.Browser.onAndroid) || (this.getScreenMode() === ScreenMode_1.ScreenMode.Landscape && this._horizontalConentHeigth === -1 && !Laya.Browser.onSafari && !Laya.Browser.onAndroid);
    };
    TouchMoveFullScreen.prototype.delayScroll = function (delay, x, y) {
        Laya.timer.clear(this, this.onDelayScroll);
        Laya.timer.once(delay, this, this.onDelayScroll, [x, y]);
    };
    TouchMoveFullScreen.prototype.onDelayScroll = function (x, y) {
        window.scroll(x, y);
    };
    TouchMoveFullScreen.prototype.onResize = function (screenMode) {
        if (this._isblur === 0)
            this._isblur = 1;
        if (screenMode === ScreenMode_1.ScreenMode.None)
            return;
        if (ScreenMode_1.ScreenMode.Landscape === screenMode) {
            this._touchEnd();
        }
        else if (ScreenMode_1.ScreenMode.Portrait === screenMode) {
            this._touchEnd();
        }
    };
    Object.defineProperty(TouchMoveFullScreen.prototype, "changedScreenMode", {
        /**
         * 变化后的屏幕模式，如果和上次的一样，则认为未发生变化，此时值为ScreenMode.None
         */
        get: function () {
            return this._changedScreenMode;
        },
        enumerable: true,
        configurable: true
    });
    TouchMoveFullScreen.prototype._onResizeHandle = function (e) {
        if (e === void 0) { e = null; }
        var nowScreenMode = this.getScreenMode();
        if (nowScreenMode !== this._lastScreenMode) {
            this._changedScreenMode = nowScreenMode;
        }
        else {
            this._changedScreenMode = ScreenMode_1.ScreenMode.None;
        }
        // this._lastScreenMode = nowScreenMode;
        this._lastScreenMode = UIManager_1.default.instance.changedScreenMode;
        var screenMode = this.changedScreenMode;
        this.onResize(screenMode);
        // console.log(Common.this.getScreenMode());
        var screenH = this.getScreenMode() === ScreenMode_1.ScreenMode.Portrait ? screen.height : screen.width;
        // if (Laya.Browser.onAndriod) {
        //     screenH = screen.height;
        // }
        this._maskDiv.style.width = Laya.Browser.clientWidth + "px";
        this._maskDiv.style.height = screenH + 1 + "px";
        this.delayScroll(300, 0, 0);
        this._layaCanvas.style.transform = "matrix(" + Laya.stage._canvasTransform.toString() + ")";
        if (this._touchStatus === false) {
            this._touchEnd();
        }
    };
    TouchMoveFullScreen.prototype._showMaskDiv = function (isShowMaskDiv) {
        this._maskDiv.style.visibility = isShowMaskDiv ? "visible" : "hidden";
        TouchMoveFullScreen.IS_SHOW_MASK_DIV = isShowMaskDiv;
    };
    TouchMoveFullScreen.prototype.getScreenMode = function () {
        // return document.documentElement.clientWidth >= document.documentElement.clientHeight ? ScreenMode.Landscape : ScreenMode.Portrait;
        return Laya.Browser.width >= Laya.Browser.height ? ScreenMode_1.ScreenMode.Landscape : ScreenMode_1.ScreenMode.Portrait;
    };
    TouchMoveFullScreen.IS_SHOW_MASK_DIV = true;
    return TouchMoveFullScreen;
}());
exports.default = TouchMoveFullScreen;
},{"../definitions/ScreenMode":68,"../manager/UIManager":164}],305:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var UIManager_1 = require("../manager/UIManager");
var MyApplication_1 = require("../MyApplication");
var uiFlag;
(function (uiFlag) {
    /** 没有动效 */
    uiFlag[uiFlag["normal"] = 0] = "normal";
    /** 普通窗口，弹窗 */
    uiFlag[uiFlag["ordinary"] = 1] = "ordinary";
    /** 旋转动效，背景 */
    uiFlag[uiFlag["rotate"] = 2] = "rotate";
})(uiFlag = exports.uiFlag || (exports.uiFlag = {}));
/**
 * UIWindow 当屏幕尺寸发生变化时需要应用的适配模式
 */
var FitScreenMode;
(function (FitScreenMode) {
    FitScreenMode[FitScreenMode["None"] = 0] = "None";
    FitScreenMode[FitScreenMode["FullScreen"] = 1] = "FullScreen";
    FitScreenMode[FitScreenMode["Center"] = 2] = "Center";
})(FitScreenMode = exports.FitScreenMode || (exports.FitScreenMode = {}));
/**
 * 用户自定义窗口类和fairyGUI窗口类的一个中间层
 * 当用UIManager.showWindow()显示窗口时，不需要再在onInit回调中设置contentPane;
 */
var UIWindow = /** @class */ (function (_super) {
    __extends(UIWindow, _super);
    function UIWindow() {
        var _this = _super.call(this) || this;
        _this.isCache = true;
        /**
         * 是否需要遮罩层
         */
        _this.needMask = false;
        /**
         * 是否忽略“关闭其它窗口”，为真时，则如果显示窗口时设置了关闭其它窗口，则对本窗口不起作用
         */
        _this.ignoreCloseOther = false;
        /**
         * 当屏幕尺寸发生变化时，窗口需要应用的适配模式
         */
        // protected fitScreenMode:FitScreenMode = FitScreenMode.Center;
        /**
         * 窗口弹出时是，键盘是否可用
         */
        _this.isKeyboardAvailable = true;
        /**
         * 需要动态加载的资源数量
         */
        _this._sourceNum = 0;
        _this._totalSourceNum = 0;
        Laya.stage.on(Laya.Event.RESIZE, _this, _this._onResize);
        _this._sourceNum = _this._totalSourceNum = 0;
        // 配置动态资源
        _this.configUISource && _this.configUISource();
        // 显示资源加载界面
        _this._showLoadingView();
        return _this;
    }
    /**
     * 获取界面资源的地址
     */
    UIWindow.getUrl = function () {
        throw new Error("you must rewrite getUrl");
    };
    /**
     * 析构函数
     */
    UIWindow.prototype.dispose = function () {
        Laya.stage.off(Laya.Event.RESIZE, this, this.onResize);
        this.removeLayout();
        // com.yigewaixingren.utils.LayoutSprite.instance.off(Layout.event.LAYOUT_RESIZE_AGO, this, this.beforeLayout);
        // com.yigewaixingren.utils.LayoutSprite.instance.off(Layout.event.LAYOUT_RESIZE_END, this, this.afterLayout);
        _super.prototype.dispose.call(this);
    };
    /**
     * 给外部代码提供注入onInit回调代码的方法，当调用此函数后，界面会先调用外部注入的代码，再调用本界面自己的onInit
     */
    UIWindow.prototype.injectOnInit = function (fun, ex) {
        var _this = this;
        var old = this.onInit;
        this.onInit = function () {
            // 先执行外部注入的函数
            fun.apply(_this, null);
            // 再执行原来的函数
            old.apply(_this, null);
            // 初始化音效
            _this.initSound();
            // 执行layout
            _this.layout();
            // com.yigewaixingren.utils.LayoutSprite.instance.on(Layout.event.LAYOUT_RESIZE_AGO, this, this.beforeLayout);
            // com.yigewaixingren.utils.LayoutSprite.instance.on(Layout.event.LAYOUT_RESIZE_END, this, this.afterLayout);
            // com.yigewaixingren.utils.LayoutSprite.instance.resize();
            // 还原
            _this.onInit = old;
            _this.funEx(ex);
            fun = null;
        };
    };
    UIWindow.prototype.injectOnShown = function (fun) {
        var _this = this;
        var old = this.onShown;
        this.onShown = function () {
            fun.apply(_this, null);
            old.apply(_this, null);
            fun = null;
            _this.onShown = old;
            old = null;
        };
    };
    /**
    * 给外部代码提供注入onHide回调代码的方法，当调用此函数后，界面会先调用外部注入的代码，再调用本函数自己的onHide
    */
    UIWindow.prototype.injectOnHide = function (fun) {
        var _this = this;
        var old = this.onHide;
        this.onHide = function () {
            old.apply(_this, null);
            fun.apply(_this, null);
            fun = null;
            _this.onHide = old;
            old = null;
        };
    };
    /**
     * 添加需要动态加载的资源
     */
    UIWindow.prototype.addUISource = function (source) {
        // 
        if (!source)
            return;
        if (source.loaded)
            return;
        source.onLoaded(this, this._onSingleSourceLoaded, [source.packageName]);
        // 更新需加载资源数量
        if (!this._packageSourceNumMap)
            this._packageSourceNumMap = {};
        var oldNum = this._packageSourceNumMap[source.packageName] | 0;
        this._packageSourceNumMap[source.packageName] = oldNum + 1;
        ++this._sourceNum;
        ++this._totalSourceNum;
        _super.prototype.addUISource.call(this, source);
    };
    UIWindow.prototype.showOn = function (parent) {
        parent.addChild(this);
        this.parent = parent;
        // this.onShown();
    };
    UIWindow.prototype.hide = function () {
        if (this.isShowing)
            this.doHideAnimation();
    };
    UIWindow.prototype.hideImmediately = function () {
        _super.prototype.hideImmediately.call(this);
        if (this.parent instanceof fairygui.GRoot)
            return;
        this.removeFromParent();
    };
    /**
     *
     */
    UIWindow.prototype.funEx = function (p) {
    };
    UIWindow.prototype.onInit = function () {
    };
    /**
     * 当屏幕尺寸发生变化时的回调
     */
    UIWindow.prototype.onResize = function (changedScreenMode) {
    };
    // private _oldIsKeyBoardAvailable:boolean;
    /**
     * 显示时的回调
     */
    UIWindow.prototype.onShown = function () {
        // console.log("onshown");
        // this._oldIsKeyBoardAvailable = SpinManager.instance.spaceKeyAvailable;
        // SpinManager.instance.spaceKeyAvailable = this.isKeyboardAvailable;
        if (!this.isKeyboardAvailable)
            ++UIManager_1.default.instance.shadowKeyBoardWindowNum;
        _super.prototype.onShown.call(this);
    };
    /**
     * 窗口隐藏时的回调
     */
    UIWindow.prototype.onHide = function () {
        if (!this.isKeyboardAvailable)
            --UIManager_1.default.instance.shadowKeyBoardWindowNum;
        // if(!Common.Utils.isNullOrUndefined(this._oldIsKeyBoardAvailable)) SpinManager.instance.spaceKeyAvailable = this._oldIsKeyBoardAvailable;
        _super.prototype.onHide.call(this);
    };
    /**
     * 布局之前
     */
    UIWindow.prototype.beforeLayout = function () {
        // console.log("before layout");
        // Layout.windowsWidth;
        // Layout.windowsHeight;
    };
    /**
     * 布局之后
     */
    UIWindow.prototype.afterLayout = function () {
        // Layout.windowsWidth;
        // Layout.windowsHeight;
    };
    /**
     * 布局
     */
    UIWindow.prototype.layout = function () {
    };
    /**
     * 移除布局
     */
    UIWindow.prototype.removeLayout = function () {
    };
    /**
     * 初始化音效
     */
    UIWindow.prototype.initSound = function () {
    };
    UIWindow.prototype._onResize = function () {
        // let now:ScreenMode = Utils.getScreenMode(Laya.Browser.wi)
        this.onResize(UIManager_1.default.instance.changedScreenMode);
    };
    /**
     * 单个资源加载完成了
     */
    UIWindow.prototype._onSingleSourceLoaded = function (packageName) {
        // 更新包对应的资源数量        
        --this._sourceNum;
        var newNum;
        packageName && (newNum = --this._packageSourceNumMap[packageName]);
        if (packageName && newNum <= 0) {
            // 当前包所有资源加载完了，再重新添加次包，避免无法加载界面的问题
            rigger.service.AssetsPackageService.instance.initPackage(packageName);
        }
        if (this._sourceNum <= 0) {
            this._packageSourceNumMap = null;
        }
        // 更新进度条显示
        this._updateLoadingProgress();
    };
    /**
     * 显示资源加载界面
     */
    UIWindow.prototype._showLoadingView = function () {
        if (this._sourceNum <= 0)
            return;
        if (UIWindow._loadingView)
            return;
        if (!MyApplication_1.default.instance.inGameLoadingCls)
            return;
        // 获取注册的资源加载界面信息
        UIWindow._loadingView = UIManager_1.default.instance.showWindow(MyApplication_1.default.instance.inGameLoadingCls, false, UIManager_1.default.instance.tipsLayer, MyApplication_1.default.instance.inGameLoadingArgs);
        UIWindow._loadingView.onComplete(this, this._hideLoadingView);
    };
    /**
     * 隐藏加载界面
     */
    UIWindow.prototype._hideLoadingView = function () {
        if (!UIWindow._loadingView)
            return;
        UIManager_1.default.instance.hideWindow(UIWindow._loadingView);
        UIWindow._loadingView = null;
    };
    UIWindow.prototype._updateLoadingProgress = function () {
        if (!UIWindow._loadingView)
            return;
        UIWindow._loadingView.setProgress((this._totalSourceNum - this._sourceNum) / this._totalSourceNum * 100);
    };
    /**
     * 加载界面
     */
    UIWindow._loadingView = null;
    return UIWindow;
}(fairygui.Window));
exports.default = UIWindow;
},{"../MyApplication":48,"../manager/UIManager":164}],306:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ConnectService_1 = require("../gameServices/connectService/ConnectService");
var LanguageProxy_1 = require("../language/LanguageProxy");
var ScreenMode_1 = require("../definitions/ScreenMode");
var PlatformAndScreenMode_1 = require("../definitions/PlatformAndScreenMode");
/**
 * Utils
 */
var Utils = /** @class */ (function () {
    function Utils() {
    }
    Utils.createEventHandler = function (caller, method, args, once) {
        return laya.utils.Handler.create(caller, method, args, once);
    };
    /**
     * 将一个64位整型转换成一个int型数组(高低位分离)
     * @public
     * @static
     * @method resoleInt64
     * @param {number} int64 需要转换的64位整型
     * @return {number[]} 一个包含两个32位整型的数组
     */
    Utils.resoleInt64 = function (int64) {
        var s = Math.pow(2, 32);
        var r = int64 % s;
        var d = (int64 - r) / s;
        return [d, r];
    };
    /**
     * 将一个int数据组(高低位)转成一个long型
     * @public
     * @static
     * @method combineInt64
     * @param {number[]} ints 一个包含两个32位整型的数组
     *
     */
    Utils.combineInt64 = function (ints) {
        var s = Math.pow(2, 32);
        return ints[0] * s + ints[1];
    };
    /**
     * 计算方向的角度
     * @public
     */
    Utils.calculateAngle = function (x, y) {
        return Utils.calculateRadian(x, y) * 180 / Math.PI;
    };
    /**
     * 计算方向的弧度
     */
    Utils.calculateRadian = function (x, y) {
        return Math.atan2(y, x);
    };
    /**
     * 从数组中移除某一个元素
     * @public
     * @static
     * @method removeFromArray
     * @param {any[]} arr 需要操作的数组
     * @param {any} ele 需要移除的元素
     * @return {any[]} 移除元素后的新数组
     */
    Utils.removeFromArray = function (arr, ele) {
        var idx = arr.indexOf(ele);
        if (idx >= 0) {
            return Utils.removeAtFromArray(arr, idx);
        }
        return arr;
    };
    /**
     * 从数组查找并返回符合条件的第一个元素的索引，只返回最先查找到的满足条件的元素的索引,如果没找到则返回-1
     * @param arr 要查找的数组
     * @param conditionFun 过滤条件函数,当返回true时，则返回，否则继续查找,该函数第一个参数是数组的元素，第二个参数是当前元素的索引，第三个参数是数组本身
     * @param startIndex 开始查找的索引
     */
    Utils.findIndexFromArray = function (arr, conditionFun, startIndex) {
        if (startIndex === void 0) { startIndex = 0; }
        if (startIndex >= arr.length) {
            return -1;
        }
        for (; startIndex < arr.length; ++startIndex) {
            if (conditionFun(arr[startIndex], startIndex, arr)) {
                return startIndex;
            }
        }
        return -1;
    };
    Utils.formatCountDown = function (seconds) {
        // console.log("sec:" + seconds);
        var h = Math.floor(seconds / 3600);
        var mseconds = seconds - h * 3600;
        var m = Math.floor(mseconds / 60);
        var s = mseconds - m * 60;
        return this.padLeft(h, 2) + ":" + this.padLeft(m, 2) + ":" + this.padLeft(s, 2);
    };
    Utils.formatCountDown2 = function (seconds) {
        // console.log("sec:" + seconds);
        // var h:number = Math.floor(seconds / 3600);
        // var mseconds:number = seconds - h * 3600;
        var m = Math.floor(seconds / 60);
        var s = seconds - m * 60;
        return this.padLeft(m, 2) + ":" + this.padLeft(s, 2);
    };
    /** 12:30:21 ，毫秒级1484139541000 */
    Utils.formatTimeHMS = function (time) {
        var data = new Date(time);
        var h = data.getHours();
        var m = data.getMinutes();
        var s = data.getSeconds();
        return this.padLeft(h, 2) + ":" + this.padLeft(m, 2) + ":" + this.padLeft(s, 2);
        // return data.toLocaleDateString();
    };
    /** 12:30 ，毫秒级1484139541000 */
    Utils.formatTimeHM = function (time) {
        var data = new Date(time);
        var h = data.getHours();
        var m = data.getMinutes();
        return this.padLeft(h, 2) + ":" + this.padLeft(m, 2);
        // return data.toLocaleDateString();
    };
    /** 2016.10.24 ，毫秒级1484139541000 */
    Utils.formatTimeYMD = function (time) {
        var data = new Date(time);
        var y = data.getFullYear();
        var m = data.getMonth() + 1;
        var d = data.getDate();
        return this.padLeft(y, 4) + "." + this.padLeft(m, 2) + "." + this.padLeft(d, 2);
    };
    /** 格式化时间，66 -> 00:01:06 */
    Utils.formatTimeHMSatVal = function (time) {
        var array = [];
        var s;
        for (var i = 0; i < 3; i++) {
            s = time % 60;
            array.push(s < 10 ? "0" + s : s.toString());
            time = Math.floor(time / 60);
        }
        return array[2] + ":" + array[1] + ":" + array[0];
    };
    /** 格式化时间, 秒级，xx -> xx天xx小时xx分钟 */
    Utils.getTimeDHM = function (time) {
        var str_m = "m";
        var str_h = "h";
        var str_d = "d";
        var timeArray = new Array();
        time = Math.ceil(time / 60);
        timeArray.push((time % 60) + str_m);
        time = Math.floor(time / 60);
        if (time != 0) {
            timeArray.push((time % 24) + str_h);
            time = Math.floor(time / 24);
            if (time != 0)
                timeArray.push(time + str_d);
        }
        return timeArray.reverse().join("");
    };
    /**
     * 1月1日，毫秒级1484139541000
     */
    Utils.formatTimeMD = function (time) {
        var date = new Date(time);
        var m = date.getMonth() + 1;
        var d = date.getDate();
        return m + "\u6708" + d + "\u65E5";
    };
    Utils.padLeft = function (num, n) {
        return (Array(n).join("0") + num).slice(-n);
    };
    /**
     * 获取当前时间的毫秒数
     */
    // public static currentTimeMillisecode() {
    //     var data:Date = new Date();
    //     return data.getTime();
    // }
    /**
     * 从数组中移除指定位置的元素
     */
    Utils.removeAtFromArray = function (arr, idx) {
        arr.splice(idx, 1);
        return arr;
    };
    Utils.makeHtmlWithColorSize = function (content, color, fontSize) {
        // <span style="color:#7a3d10;font-size:20">战斗力+1955</span>
        return "<span style=\"color:" + color + ";font-size:" + fontSize + "\">" + content + "</span>";
    };
    Utils.makeHtmlWithColor = function (content, color) {
        // <span style="color:#7a3d10">战斗力+1955</span>
        return "<span style=\"color:" + color + "\">" + content + "</span>";
    };
    Utils.makeHtmlWithSize = function (content, fontSize) {
        // <span style="color:#7a3d10">战斗力+1955</span>
        return "<span style=\"fontSize:" + fontSize + "\">" + content + "</span>";
    };
    /** 生成一个html图片，一般用于文字与图片同时居中的情况 */
    Utils.makeHtmlImg = function (src, width, height, left, top) {
        var imgStr = "<img src=\"" + src + "\" ";
        if (width)
            imgStr += " width = \"" + width + "\" ";
        if (height)
            imgStr += " height = \"" + height + "\"";
        if (left)
            imgStr += " left = \"" + left + "px\"";
        if (top)
            imgStr += " top = \"" + top + "px\"";
        return imgStr + "/>";
    };
    Utils.stackTrace = function (count) {
        if (count === void 0) { count = 10; }
        var i = 0;
        var fun = arguments.callee;
        console.log("***----------------------------------------** " + (i + 1));
        while (fun && i < count) {
            fun = fun.arguments.callee.caller;
            console.log(fun);
            i++;
            console.log("***---------------------------------------- ** " + (i + 1));
        }
    };
    /**
     * 随机:[min, max]
     */
    Utils.random = function (min, max) {
        var range = max - min;
        var rand = Math.random();
        return min + Math.round(rand * range);
    };
    /** 保留n位小数，不四舍五入，9.8 -> 9.80 */
    Utils.toFixed = function (val, decimalNum) {
        if (decimalNum == 0)
            return val.toString();
        var s = val.toFixed(decimalNum + 1);
        return s.substr(0, s.length - 1);
    };
    /** 取数字文本,向下取整，789 -> 78.9, 4567 -> "456" */
    Utils.getValStrMax3 = function (val) {
        var val2 = val % 10;
        var val1 = Math.floor(val / 10);
        if (val1 >= 100)
            return val1.toString();
        else
            return val1 + "." + val2;
    };
    /** 返回金币数量的简写形式，保留1位小数位 可选参数物品配置id/物品类型，若不为金币则直接返回 */
    Utils.getMoneyStr = function (val, goodsType) {
        // if(goodsType && goodsType != ConfigGroup.CONFIG_GROUP_GOODS_SUBTYPE_CURRENCY_GOLD)return val.toString();
        if (val < 1000)
            return val.toString();
        val = val / 1000;
        if (val < 1000)
            return Utils.toFixed(val, 1) + "K";
        return Utils.toFixed(val / 1000, 1) + "M";
    };
    /** 主面板金币显示, 若数值超过1 000 000，则返回1.00M */
    Utils.getBigMoneyStr = function (val) {
        if (val < 1000000)
            return val.toString();
        return Utils.toFixed(val / 1000000, 2) + "M";
    };
    /** 战斗界面血量显示，若数值超过1 000 000，则返回1.00M, 暂时和金钱的显示一样 */
    Utils.getBigHPStr = function (val) {
        return Utils.getBigMoneyStr(val);
    };
    Utils.getQueryString = function (name) {
        var reg = new RegExp('(^|&)' + name + '=([^&]*)(&|$)', 'i');
        var r = window.location.search.substr(1).match(reg);
        // var r = "?openid=xxxx&openkey=yyyyyy&platform=1".substr(1).match(reg);
        if (r != null) {
            return r[2];
        }
        return null;
    };
    /** 设置list的橡皮筋效果 */
    Utils.setListElastic = function (list, time, distance) {
        if (time === void 0) { time = 100; }
        if (distance === void 0) { distance = 100; }
        if (list.scrollBar) {
            list.scrollBar.elasticBackTime = time;
            list.scrollBar.elasticDistance = distance;
        }
    };
    /**
     * 从本地数据获取是否需要显示开关声音的提示界面
     */
    Utils.needShowAudioAlert = function () {
        return Laya.LocalStorage.getJSON(Utils._showAudioAlertKey) !== false;
    };
    /**
     * 禁用上线时的声音提示界面
     */
    Utils.disableShowAudioAlert = function () {
        Laya.LocalStorage.setJSON(Utils._showAudioAlertKey, false);
    };
    Utils.enableShowAudioAlert = function () {
        Laya.LocalStorage.setJSON(Utils._showAudioAlertKey, true);
    };
    /**
     * 清除游戏本地缓存
     */
    Utils.clearAudioAlertCache = function () {
        Laya.LocalStorage.clear();
    };
    /**
     * 默认的声音状态
     */
    Utils.getDefaultAudioStatus = function () {
        return Laya.LocalStorage.getJSON(Utils._defaultAudioStatus) !== false;
    };
    /**
     * 设置声音默认状态
     * @param v
     */
    Utils.setDefaultAudioStatus = function (v) {
        return Laya.LocalStorage.setJSON(Utils._defaultAudioStatus, v);
    };
    /** 获得文本的高度，主要用于输入框的高度 */
    Utils.getTextHeight = function (text, width, fontSize) {
        var labelTemp = new Laya.Label();
        labelTemp.fontSize = fontSize;
        labelTemp.width = width;
        labelTemp.wordWrap = true;
        labelTemp.text = text;
        var height = labelTemp.height;
        labelTemp.destroy();
        return height;
    };
    /** 限制文本容器的文本高度，不超出显示区域，适用于确定高度的容器，比如textInput,label,text */
    Utils.limitTextHeight = function (view, limitSize) {
        var str = "_utils_lastHeight";
        if (!view[str])
            view[str] = "";
        if (limitSize)
            if (view.text.length > limitSize)
                view.text = view.text.substr(0, limitSize);
        if (this.getTextHeight(view.text, view.width, view.fontSize) > view.height)
            view.text = view[str];
        else
            view[str] = view.text;
    };
    /**
     * 判断是不是一个有效的资源url对象
     */
    Utils.isAssetsUrlObject = function (url) {
        return url.hasOwnProperty("url") && url.hasOwnProperty("type");
        // return url["url"] && url["type"];
    };
    /**
     * 判断参数是否是一个字符串
     */
    Utils.isString = function (str) {
        return typeof str === "string";
    };
    /**
     * 是否是数组
     */
    Utils.isArray = function (arr) {
        return arr instanceof Array;
    };
    /**
     * 获取当前屏幕模式:横屏还是竖屏
     */
    Utils.getScreenMode = function () {
        // return w >= h ? ScreenMode.Landscape : ScreenMode.Portrait;
        return Laya.Browser.width >= Laya.Browser.height ? ScreenMode_1.ScreenMode.Landscape : ScreenMode_1.ScreenMode.Portrait;
    };
    Utils.getPlatformAndScreenMode = function () {
        switch (Utils.getScreenMode()) {
            case ScreenMode_1.ScreenMode.Landscape:
                if (Laya.Browser.onPC) {
                    return PlatformAndScreenMode_1.PlatformAndScreenMode.PC;
                }
                else if (Laya.Browser.onIOS) {
                    return PlatformAndScreenMode_1.PlatformAndScreenMode.IOSLandscape;
                }
                else if (Laya.Browser.onAndroid) {
                    return PlatformAndScreenMode_1.PlatformAndScreenMode.AndriodLandscape;
                }
                else {
                    return PlatformAndScreenMode_1.PlatformAndScreenMode.OtherLandscape;
                }
            case ScreenMode_1.ScreenMode.Portrait:
                if (Laya.Browser.onPC) {
                    return PlatformAndScreenMode_1.PlatformAndScreenMode.PC;
                }
                else if (Laya.Browser.onIOS) {
                    return PlatformAndScreenMode_1.PlatformAndScreenMode.IOSPortrait;
                }
                else if (Laya.Browser.onAndroid) {
                    return PlatformAndScreenMode_1.PlatformAndScreenMode.AndriodPortrait;
                }
                else {
                    return PlatformAndScreenMode_1.PlatformAndScreenMode.Other;
                }
            default:
                return PlatformAndScreenMode_1.PlatformAndScreenMode.Other;
        }
    };
    /**
     * 检查是否为空或未定义
     */
    Utils.isNullOrUndefined = function (obj) {
        return obj === null || obj === undefined;
    };
    /**
     * 字符串是否为空或空串
     */
    Utils.isNullOrEmpty = function (str) {
        return Utils.isNullOrUndefined(str) || str.length <= 0;
    };
    /**
     * 根据自动次数返回字符串
     */
    Utils.getAutoTimesString = function (times) {
        if (times < 0)
            return LanguageProxy_1.$language(102022); // "直到环节";
        return LanguageProxy_1.$language(102023).replace("[n]", times.toString()); // "[n]次旋转"
    };
    /**
     * 将金币数转换成显示需要的字符串
     *
     * @static
     * @public
     * @method convertToShowingCoin
     * @param {number} coin 真实的金币数，一般从服务器或配置中获取
     * @return {string}
     */
    Utils.convertToShowingCoin = function (coin, place) {
        if (place === void 0) { place = 2; }
        var real = coin / 100;
        return Utils.formatMoney(real, place);
        // return Utils.formatMoney((coin / 100));
    };
    /**
     * 将金币数转换成显示需要的字符串  当小于1元时取小数，当大于1元时取小数
     *
     * @static
     * @public
     * @method convertToShowingCoin
     * @param {number} coin 真实的金币数，一般从服务器或配置中获取
     * @return {string}
     */
    Utils.convertToShowingCoinIntOrFloat = function (coin, place) {
        if (place === void 0) { place = 2; }
        return coin < 100 ? Utils.convertToShowingCoin(coin, place) : Utils.convertToShowingCoin(coin, 0);
    };
    Utils.formatMoney = function (num, places, symbol, thousand, decimal) {
        if (places === void 0) { places = 0; }
        if (symbol === void 0) { symbol = "¥"; }
        if (thousand === void 0) { thousand = ","; }
        if (decimal === void 0) { decimal = "."; }
        num = num || 0;
        places = !isNaN(places = Math.abs(places)) ? places : 2;
        symbol = symbol !== undefined ? symbol : "$";
        thousand = thousand || ",";
        decimal = decimal || ".";
        var negative = num < 0 ? "-" : "", i = parseInt(num = Math.abs(+num || 0).toFixed(places), 10) + "", j = (j = i.length) > 3 ? j % 3 : 0;
        return symbol + negative + (j ? i.substr(0, j) + thousand : "") + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + thousand) + (places ? decimal + Math.abs(num - i).toFixed(places).slice(2) : "");
    };
    /**
     * 判断一人数字是否是整数
     * @param num 需要进行判断的数字
     */
    Utils.isInteger = function (num) {
        return 0 === num % 1;
    };
    /**
     * 闪烁屏幕
     */
    Utils.spangleScreen = function () {
        Laya.stage.alpha = 0.2;
        Laya.Tween.to(Laya.stage, { alpha: 1 }, 200);
    };
    Utils.hijack = function (obj, methodName, newMethod) {
        var old = obj[methodName];
        obj[methodName] = newMethod(old);
    };
    Utils.isInLobby = function () {
        var userAgent = navigator.userAgent.toLowerCase();
        var isCompanyBrowser = userAgent.indexOf("jp_runtime/embedded") != -1;
        if (isCompanyBrowser) {
            return true;
        }
        return false;
    };
    Utils.returnToLobby = function () {
        var userAgent = navigator.userAgent.toLowerCase();
        // let isCompanyBrowser: boolean = userAgent.indexOf("browser_type/android_app") != -1;
        var isCompanyBrowser = userAgent.indexOf("jp_runtime/embedded") != -1;
        if (isCompanyBrowser) {
            // window.close();
            postMessage("close", "*");
            document.location.href = "jplobby://cmd=exit";
        }
        else if (Utils.isNullOrEmpty(ConnectService_1.default.instance.lobbyUrl)) {
            window.close();
        }
        else {
            history.go(-100);
            window.location.replace(ConnectService_1.default.instance.lobbyUrl);
        }
        // if(isCompanyBrowser || Utils.isNullOrEmpty(ConnectService.instance.lobbyUrl)){
        //     window.close();
        // }
        // else{
        //     history.go(-100);
        //     window.location.replace(ConnectService.instance.lobbyUrl)
        //     // window.location.href = rigger.service.ConnectService.instance.lobbyUrl;
        // }
    };
    /**
     * 从数组中获取ID为指定值的对象
     * @param arr
     * @param id
     */
    Utils.getById = function (arr, id) {
        var idx = Utils.findIndexFromArray(arr, function (ele, i, array) {
            return ele.id === id;
        });
        if (idx < 0)
            return null;
        return arr[idx];
    };
    /**
     * base64 中文解码
     * @param utftext
     */
    Utils.utf8_decode = function (utftext) {
        var string = "";
        var i = 0;
        var c, c1, c2 = 0;
        var c3;
        while (i < utftext.length) {
            c = utftext.charCodeAt(i);
            if (c < 128) {
                string += String.fromCharCode(c);
                i++;
            }
            else if ((c > 191) && (c < 224)) {
                c2 = utftext.charCodeAt(i + 1);
                string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));
                i += 2;
            }
            else {
                c2 = utftext.charCodeAt(i + 1);
                c3 = utftext.charCodeAt(i + 2);
                string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
                i += 3;
            }
        }
        return string;
    };
    Utils.log = function (message) {
        var optionalParams = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            optionalParams[_i - 1] = arguments[_i];
        }
        if (Utils.IS_DEBUG) {
            console.log.apply(console, [message].concat(optionalParams));
        }
    };
    Utils.info = function (message) {
        var optionalParams = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            optionalParams[_i - 1] = arguments[_i];
        }
        if (Utils.IS_DEBUG) {
            console.info.apply(console, [message].concat(optionalParams));
        }
    };
    Utils.warn = function (message) {
        var optionalParams = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            optionalParams[_i - 1] = arguments[_i];
        }
        if (Utils.IS_DEBUG) {
            console.warn.apply(console, [message].concat(optionalParams));
        }
    };
    /**播放金额数字动态效果*/
    Utils.play_Money = function (money, moneyTxt, callback, time, startMoney) {
        if (time === void 0) { time = 800; }
        if (startMoney === void 0) { startMoney = 0; }
        var moneyObj;
        var moneyTween;
        if (money <= 0) {
            moneyTxt.text = Utils.convertToShowingCoin(0);
            callback && callback.run();
            return;
        }
        moneyTween = new Laya.Tween();
        moneyObj = { "money": startMoney };
        moneyTween.to(moneyObj, {
            money: money,
            update: new Laya.Handler(this, function () { moneyTxt.text = Utils.convertToShowingCoin(moneyObj["money"]); }, null)
        }, time, Laya.Ease.linearNone, Laya.Handler.create(this, function () { if (callback)
            callback.run(); }));
        return moneyTween;
    };
    /**
     * 是否打开Log日志
     */
    Utils.IS_SHOW_LOG = false;
    Utils.IS_DEBUG = false;
    Utils.IS_SHOW_GUID_VIEW = true;
    /**
     * 长按时间
     */
    Utils.LONG_PRESS_TIME = 1000;
    // private static _lastLoginPlayerIdKey = "LAST_LOGIN_PLAYER_ID";
    Utils._showAudioAlertKey = "_showAudioAlertKey";
    Utils._defaultAudioStatus = "_defaultAudioStatus";
    return Utils;
}());
exports.default = Utils;
},{"../definitions/PlatformAndScreenMode":65,"../definitions/ScreenMode":68,"../gameServices/connectService/ConnectService":160,"../language/LanguageProxy":161}]},{},[296,298,299,297,160,47])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
